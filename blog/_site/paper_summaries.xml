<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>borea17</title>
<link>https://borea17.github.io/paper_summaries.html</link>
<atom:link href="https://borea17.github.io/paper_summaries.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.340</generator>
<lastBuildDate>Fri, 26 Mar 2021 23:00:00 GMT</lastBuildDate>
<item>
  <title>MONet: Unsupervised Scene Decomposition and Representation</title>
  <dc:creator>borea17 </dc:creator>
  <link>https://borea17.github.io/paper_summaries/multi-object_network/index.html</link>
  <description><![CDATA[ 




<p><a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a> developed the <strong>Multi-Object Network (MONet)</strong> as an end-to-end trainable model to decompose images into meaningful entities such as objects. Similar to <a href="https://borea17.github.io/paper_summaries/AIR">AIR</a>, the whole training process is unsupervised, i.e., there are no labeled segmentations, handcrafted bounding boxes or whatsoever. In essence, their model combines a Variational Auto-Encoder (<a href="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes">VAE</a>) with a recurrent attention network (<a href="https://borea17.github.io/paper_summaries/u_net">U-Net</a> <em>segmentation network</em>) to spatially decompose scenes into attention masks (over which the VAE needs to reconstruct masked regions) and latent representations of each masked region. In contrast to AIR, MONet does not contain a fully generative model and its latent space is less structured. As a proof of concept, they show that their model could learn disentangled representations in a common latent code (i.e., representations of object features in latent space) and object segmentations (i.e., attention masks on the original image) on non-trivial 3D scenes.</p>
<section id="model-description" class="level2">
<h2 class="anchored" data-anchor-id="model-description">Model Description</h2>
<p>MONet builds upon the inductive bias that the world (or rather <em>simple images</em> of the world) can often be approximated as a composition of individual objects with the same underlying structure (i.e., different instantiations of the same class). To put this into practice, <a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a> developed a conditional generative sampling scheme in which scenes are spatially decomposed into parts that have to be individually modelled through a common representation code. The architecture incorporates two kind of neural networks that are trained in tandem:</p>
<ul>
<li><p><strong>Attention Network</strong>: Its purpose is to deliver attention masks <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_k"> for the image such that the whole image is completely spatially decomposed into <img src="https://latex.codecogs.com/png.latex?K"> parts, i.e., <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bk=1%7D%5EK%20%5Ctextbf%7Bm%7D_k%20=%20%5Ctextbf%7B1%7D">. Ideally, after training each mask focuses on a semantically meaningful element/segment of the image. Thus, it may also be understood as a <em>segmentation network</em>.</p>
<p>To allow for a variable number of attention masks, <a href="https://arxiv.org/abs/1901.11390">Burgess et al. (2019)</a> use a recurrent neural network <img src="https://latex.codecogs.com/png.latex?%5Calpha_%7B%5Cboldsymbol%7B%5Cpsi%7D%7D"> for the decomposition. Therein, an auto-regressive process is defined for the ongoing state. This state is called <em>scope</em> <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bs%7D_k%20%5Cin%20%5B0,%201%5D%5E%7BW%5Ctimes%20H%7D"> (image width <img src="https://latex.codecogs.com/png.latex?W"> and height <img src="https://latex.codecogs.com/png.latex?H">) as it is used to track the image parts that remain to be explained, i.e., the scope for the next state is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%20%5Ctextbf%7Bs%7D_%7Bk+1%7D%20=%20%5Ctextbf%7Bs%7D_k%20%5Codot%20%5Cleft(%5Ctextbf%7B1%7D%20-%0A%5Cunderbrace%7B%5Calpha_%7B%5Cboldsymbol%7B%5Cpsi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D;%0A%5Ctextbf%7Bs%7D_%7Bk%7D%20%5Cright)%7D_%7B%5B0,1%5D%5E%7BW%20%5Ctimes%20H%7D%7D%20%5Cright)%0A"></p>
<p>with the first scope <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bs%7D_0%20=%20%5Ctextbf%7B1%7D"> (<img src="https://latex.codecogs.com/png.latex?%5Codot"> denotes element-wise multiplication). The attention masks are given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Ctextbf%7Bm%7D_k%20%20=%20%5Cbegin%7Bcases%7D%20%5Ctextbf%7Bs%7D_%7Bk-1%7D%20%5Codot%0A%20%20%5Calpha_%7B%5Cboldsymbol%7B%5Cpsi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D;%20%5Ctextbf%7Bs%7D_%7Bk-1%7D%0A%20%20%5Cright)%20&amp;%20%5Cforall%20k%20%3C%20K%20%5C%5C%0A%20%20%5Ctextbf%7Bs%7D_%7Bk-1%7D%20&amp;%20k=K%20%5Cend%7Bcases%7D%0A"></p>
<p>By construction, we get that</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20&amp;%5Ctextbf%7Bs%7D_%7Bk%7D%20=%20%5Ctextbf%7Bs%7D_%7Bk+1%7D%20+%20%5Ctextbf%7Bm%7D_%7Bk%20+%201%7D%20=%0A%20%20%5Ctextbf%7Bs%7D_%7Bk+2%7D%20+%20%5Ctextbf%7Bm%7D_%7Bk+2%7D%20+%20%5Ctextbf%7Bm%7D_%7Bk+1%7D%20%5C%5C%0A%20%20%5Ctextbf%7B1%7D=&amp;%5Ctextbf%7Bs%7D_0%20=%0A%20%20%5Ctextbf%7Bs%7D_%7BK-1%7D%20+%20%5Csum_%7Bk=1%7D%5E%7BK-1%7D%20%5Ctextbf%7Bm%7D_%7Bk%7D%20=%20%5Csum_%7Bk=1%7D%5EK%20%5Ctextbf%7Bm%7D_k,%0A%5Cend%7Balign%7D%0A"></p>
<p>i.e., at each recursion the remaining part to be explained <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bs%7D_%7Bk%7D"> is divided into a segmentation mask <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_%7Bk+1%7D"> and a new scope <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bs%7D_%7Bk+1%7D"> such that with <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bs%7D_0=%5Ctextbf%7B1%7D"> the entire image is explained by the resulting segmentation masks, i.e., <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bk=1%7D%5EK%20%5Ctextbf%7Bm%7D_k%20=%20%5Ctextbf%7B1%7D">.</p></li>
<li><p><strong>Component VAE</strong>: Its purpose is to represent each masked region in a common latent code, i.e., each segment is encoded by the same VAE<sup>1</sup>. The encoder distribution <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D_k%20%7C%20%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bm%7D_k%5Cright)"> is conditioned both on the input image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> and the corresponding attention mask <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_k">. I.e., instead of feeding each masked region into the network, <a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a> use the whole image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> concatenated with the corresponding attention mask <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_k">. As a result, we get <img src="https://latex.codecogs.com/png.latex?K"> different latent codes <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D_k"> (termed “slots”) which represent the features of each object (masked region) in a common latent/feature space across all objects.</p>
<p>The decoder distribution <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D"> is required to reconstruct the image component <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D_k%20%5Csim%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bz%7D_k%20%5Cright)"> and the attention masks<sup>2</sup> <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_k%20%5Csim%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bc%7D%20%7C%20%5Ctextbf%7Bz%7D_k%20%5Cright)"> from these latent codes. Note that <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bc%7D%20%7C%20%5Ctextbf%7Bz%7D_k%20%5Cright)"> defines the mask distribution of the Component VAE, whereas <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cpsi%7D%7D%20%5Cleft(%5Ctextbf%7Bc%7D%20%7C%20%5Ctextbf%7Bx%7D%5Cright)"> denotes the mask distribution of the attention network<sup>3</sup>.</p>
<p>Importantly, each of the <img src="https://latex.codecogs.com/png.latex?k"> component reconstruction distributions is multiplied with the corresponding attention mask <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_k">, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BReconstruction%20Distribution%7D_k%20=%20%5Ctextbf%7Bm%7D_k%20%5Codot%0A%20%20%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bz%7D_k%20%5Cright).%0A"></p>
<p>The negative (decoder) log likelihood <em>NLL</em> (can be interpreted as the <em>reconstruction error</em>, see my post on <a href="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes#model-description">VAEs</a>) of the whole image is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BNLL%7D%20=%20-%20%5Clog%20%5Cleft(%20%5Csum_%7Bk=1%7D%5EK%20%5Ctextbf%7Bm%7D_k%20%5Codot%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bz%7D_k%20%5Cright)%5Cright),%0A"></p>
<p>where the sum can be understood as the reconstruction distribution of the whole image (mixture of components) conditioned on the latent codes <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D_k"> and the attention masks <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_k">. Clearly, the reconstructions <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D_k%20%5Csim%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bz%7D_k%5Cright)"> are unconstrained outside of the masked regions (i.e., where <img src="https://latex.codecogs.com/png.latex?m_%7Bk,i%7D%20=%200">).</p>
<p>Note that they use a prior for the latent codes <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D_k">, but not for the attentions masks <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_k">. Thus, the model is not fully generative, but rather a conditional generative model.</p></li>
</ul>
<p>The figure below summarizes the whole architecture of the model by showing the individual components (attention network, component VAE) and their interaction.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/multi-object_network/img/MONet_schematic.png" title="Schematic of MONet" class="img-fluid" alt="Schematic of MONet"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Schematic of MONet</strong>. A recurrent attention network is used to obtain the attention masks <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D%5E%7B(i)%7D">. Afterwards, a group structured representation is retrieved by feeding each concatenation of <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D%5E%7B(i)%7D,%20%5Ctextbf%7Bx%7D"> through the same VAE with encoder parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cphi%7D"> and decoder parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D">. The outputs of the VAE are the unmasked image reconstructions <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%5E%7B(i)%7D"> and mask reconstructions <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D%5E%7B(i)%7D">. Lastly, the reconstructed image is assembled using the deterministic attention masks <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D%5E%7B(i)%7D"> and the sampled unmasked image reconstructions <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%5E%7B(i)%7D">.</td>
</tr>
</tbody>
</table>
<p>The whole model is end-to-end trainable with the following loss function</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cmathcal%7BL%7D%5Cleft(%5Cboldsymbol%7B%5Cphi%7D;%20%5Cboldsymbol%7B%5Ctheta%7D;%0A%5Cboldsymbol%7B%5Cpsi%7D;%20%5Ctextbf%7Bx%7D%20%5Cright)%20&amp;=%20%5Cunderbrace%7B-%20%5Clog%20%5Cleft(%20%5Csum_%7Bk=1%7D%5EK%20%5Ctextbf%7Bm%7D_k%20%5Codot%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%20%7C%0A%5Ctextbf%7Bz%7D_k%20%5Cright)%5Cright)%7D_%7B%5Ctext%7BReconstruction%20Error%20between%20%7D%0A%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%20%5Ctext%7B%20and%20%7D%20%5Ctextbf%7Bx%7D%7D%20+%20%5Cbeta%0A%5Cunderbrace%7BD_%7BKL%7D%20%5Cleft(%20%5Cprod_%7Bk=1%7D%5EK%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D_k%20%7C%0A%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bm%7D_k%5Cright)%20%7C%7C%20p(%5Ctextbf%7Bz%7D)%0A%5Cright)%7D_%7B%5Ctext%7BRegularization%20Term%20for%20Distribution%20of%20%7D%5Ctextbf%7Bz%7D_k%7D%5C%5C%0A&amp;+%20%5Cgamma%20%5Cunderbrace%7BD_%7BKL%7D%20%5Cleft(%20q_%7B%5Cboldsymbol%7B%5Cpsi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bc%7D%20%7C%0A%5Ctextbf%7Bx%7D%20%5Cright)%20%7C%7C%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bc%7D%20%7C%20%5C%7B%0A%5Ctextbf%7Bz%7D_k%20%5C%7D%20%5Cright)%20%5Cright)%7D_%7B%5Ctext%7BReconstruction%20Error%20between%20%7D%0A%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_k%20%5Ctext%7B%20and%20%7D%20%5Ctextbf%7Bm%7D_k%7D,%0A%5Cend%7Balign%7D%0A"></p>
<p>where the first term measures the reconstruction error of the fully reconstructed image (sum) as mentioned above. The second term is the KL divergence between the variational posterior approximation factorized across slots, i.e., <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)%20=%20%5Cprod_%7Bk=1%7D%5EK%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D_k%7C%20%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bm%7D_k%5Cright)">, and the prior of the latent distribution <img src="https://latex.codecogs.com/png.latex?p(%5Ctextbf%7Bz%7D)">. As this term pushes the encoder distribution to be close to the prior distribution, it is commonly referred to as <em>regularization term</em>. It is weighted by the tuneable hyperparameter <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> to encourage learning of disentanglement latent representions, see <a href="https://deepmind.com/research/publications/beta-VAE-Learning-Basic-Visual-Concepts-with-a-Constrained-Variational-Framework">Higgins et al. (2017)</a>. Note that the first two terms are derived from the standard VAE loss. The third term is the KL divergence between the attention mask distribution generated by the attention network <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cpsi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bc%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)"> and the component VAE <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bc%7D%20%7C%5C%7B%5Ctextbf%7Bz%7D_k%5C%7D%20%5Cright)">, i.e., it forces these distributions to lie close to each other. It could be understood as the reconstructions error of the VAE’s attention masks <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_k">, as it forces them to lie close to the attention masks <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_k"> of the attention network. Note however that the attention network itself is trainable, thus the network could also react by pushing the attention mask distribution towards the reconstructed mask distribution of the VAE. <img src="https://latex.codecogs.com/png.latex?%5Cgamma"> is a tuneable hypeterparameter to modulate the importance of this term, i.e., increasing <img src="https://latex.codecogs.com/png.latex?%5Cgamma"> results in close distributions.</p>
<p><strong>Motivation</strong>: The model aims to produce semantically meaningful decompositions in terms of segmentation and latent space attributes. Previous work such as the <a href="https://borea17.github.io/paper_summaries/spatial_broadcast_decoder">Spatial Broadcast decoder</a> has shown that VAEs are extensively capable of decomposing <em>simple</em> single-object scenes into disentangled latent space representations. However, even <em>simple</em> multi-object scenes are far more challenging to encode due to their complexity. <a href="https://arxiv.org/abs/1901.11390">Burgess et al. (2019)</a> hypothesize that exploiting the compositional structure of scenes (inductive bias) may help to reduce this complexity. Instead of decomposing the entire multi-object scene in one sweep, MONet breaks the image in multiple (<img src="https://latex.codecogs.com/png.latex?K">) tasks which it decomposes with the same VAE<sup>4</sup>. Restricting the model complexity of the decoder (e.g., by using few layers), forces the model to produce segmentation with similar tasks, i.e., segmentations over structurally similar scene elements such that the VAE is capable of solving all tasks (note that this is a hypothesis). The authors argue that optimization should push towards a meaningful decomposition. Furthermore, they empirically validate their hypothesis by showing that for the <em>Objects Room</em> dataset the reconstruction error is much lower when the ground truth attention masks are given compared to an <em>all-in-one</em> (single sweep) or a <em>wrong</em> masks situation.</p>
<p>Adding some more motivation: It might be helpful to think about the data-generating process: Commonly, <em>artificial</em> multi-object scenes are created by adding each object successively to the image. Assuming that each of these objects is generated from the same class with different instantiations (i.e., different color/shape/size/…), it seems most natural to recover this process by decomposing the image and then decoding each part.</p>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p><a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a> tested MONet on three different multi-object scene datasets (<em>Objects Room</em>, <em>CLEVR</em>, <em>Multi-dSprites</em>) and showed that their model could successively learn to <!-- decompose scenes into semantically meaningful parts (i.e., produce --> <!-- meaningful segmentation masks), to represent each segmented object in a --> <!-- common (nearly disentangled) latent code, and to generalize to unseen --> <!-- scene configurations without any supervision.  --></p>
<ul>
<li>decompose scenes into semantically meaningful parts, i.e., produce meaningful segmentation masks,</li>
<li>represent each segmented object in a common (nearly disentangled) latent code, and</li>
<li>generalize to unseen scene configurations</li>
</ul>
<p>without any supervision. Notably, MONet can handle a variable number of objects by producing latent codes that map to an empty scene, see image below. Furthermore, it turned out that MONet is also able to deal with occlusions: In the CLEVR dataset the unmasked reconstructions could even recover occluded objects, see image below. <a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a> argue that this indicates how <code>MONet is learning from and constrained by the structure of the data</code>.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/multi-object_network/img/paper_results.png" title="MONet Paper Results" class="img-fluid" alt="MONet Paper Results"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>MONet Paper Results</strong>: Decomposition on <em>Multi-dSprties</em> and <em>CLEVR</em> images. First row shows the input image, second and third row the corresponding reconstructions and segmentations by MONet (trained for 1,000,000 iterations). The last three rows show the unmasked component reconstructions from some chosen slots (indicated by <img src="https://latex.codecogs.com/png.latex?S">). Red arrows highlight occluded regions of shapes that are completed as full shapes. Taken from <a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a>.</td>
</tr>
</tbody>
</table>
<p>The following reimplementation aims to reproduce some of these results while providing an in-depth understanding of the model architecture. Therefore, a dataset that is similar to the <em>Multi-dSprites</em> dataset is created, then the whole model (as faithfully as possible close to the original architecture) is reimplemented and trained in Pytorch and lastly, some useful visualizations of the trained model are created.</p>
<section id="data-generation" class="level3">
<h3 class="anchored" data-anchor-id="data-generation">Data Generation</h3>
<p>A dataset that is similar in spirit to the <em>Multi-dSprites</em> will be generated. <a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a> generated this dataset by sampling <img src="https://latex.codecogs.com/png.latex?1-4"> images randomly from the binary <a href="https://github.com/deepmind/dsprites-dataset">dsprites dataset</a>(consisting of <img src="https://latex.codecogs.com/png.latex?737,280"> images), colorizing these by sampling from a uniform random RGB color and compositing those (with occlusion) onto a uniform random RGB background.</p>
<p>To reduce training time, we are going to generate a much simpler dataset of <img src="https://latex.codecogs.com/png.latex?x"> images with two non-overlaping objects (<code>square</code> or <code>circle</code>) and a fixed color space (<code>red</code>, <code>green</code> or <code>aqua</code>) for these objects, see image below. The dataset is generated by sampling uniformly random from possible latent factors, i.e., random non-overlaping positions for the two objects, random object constellations and random colors from color space, see code below image.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/multi-object_network/img/self_dataset.png" title="Examples of Dataset" class="img-fluid" alt="Examples of Dataset"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Visualization of self-written dataset.</td>
</tr>
</tbody>
</table>
<div class="cell" data-execution_count="2">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TensorDataset</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_dataset(n_samples, SEED<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############### CONFIGURATION ###############</span></span>
<span id="cb1-10">    canvas_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb1-11">    min_obj_size, max_obj_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb1-12">    min_num_obj, max_num_obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-13">    shapes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"square"</span>]</span>
<span id="cb1-14">    colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"green"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"aqua"</span>]</span>
<span id="cb1-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#############################################</span></span>
<span id="cb1-16">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty([n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, canvas_size, canvas_size])</span>
<span id="cb1-17">    labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty([n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, canvas_size, canvas_size])</span>
<span id="cb1-18"></span>
<span id="cb1-19">    pos_positions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(canvas_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> max_obj_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-20"></span>
<span id="cb1-21">    np.random.seed(SEED)</span>
<span id="cb1-22">    rnd_positions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(pos_positions, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-23">    rnd_num_objs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(min_num_obj, max_num_obj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_samples))</span>
<span id="cb1-24">    rnd_obj_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(min_obj_size, max_obj_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb1-25">                                      size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_samples, max_num_obj))</span>
<span id="cb1-26">    rnd_shapes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(shapes, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_samples, max_num_obj), replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-27">    rnd_colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(colors, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_samples, max_num_obj), replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i_data <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_samples):</span>
<span id="cb1-29">        x_0, y_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnd_positions[i_data]</span>
<span id="cb1-30">        num_objs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnd_num_objs[i_data]</span>
<span id="cb1-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num_objs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb1-32">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make sure that there is no overlap</span></span>
<span id="cb1-33">            max_obj_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(rnd_obj_sizes[i_data])</span>
<span id="cb1-34">            impos_x_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(x_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> max_obj_size, x_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_obj_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-35">            impos_y_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(y_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> max_obj_size, y_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> max_obj_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-36">            x_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(np.setdiff1d(pos_positions, impos_x_pos), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-37">            y_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(np.setdiff1d(pos_positions, impos_y_pos), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb1-39">            x_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-40">            y_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-41"></span>
<span id="cb1-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># current latent factors</span></span>
<span id="cb1-43">        num_objs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnd_num_objs[i_data]</span>
<span id="cb1-44">        x_positions, y_positions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x_0, x_1], [y_0, y_1]</span>
<span id="cb1-45">        obj_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnd_obj_sizes[i_data]</span>
<span id="cb1-46">        shapes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnd_shapes[i_data]</span>
<span id="cb1-47">        colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnd_colors[i_data]</span>
<span id="cb1-48"></span>
<span id="cb1-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create img and label tensors</span></span>
<span id="cb1-50">        img, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_img_and_label(</span>
<span id="cb1-51">            x_pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_positions[:num_objs],</span>
<span id="cb1-52">            y_pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_positions[:num_objs],</span>
<span id="cb1-53">            shapes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>shapes[:num_objs],</span>
<span id="cb1-54">            colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors[:num_objs],</span>
<span id="cb1-55">            sizes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>obj_sizes[:num_objs],</span>
<span id="cb1-56">            img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>canvas_size</span>
<span id="cb1-57">        )</span>
<span id="cb1-58">        data[i_data] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img</span>
<span id="cb1-59">        labels[i_data] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label</span>
<span id="cb1-60">    dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TensorDataset(data, labels)</span>
<span id="cb1-61">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dataset</span>
<span id="cb1-62"></span>
<span id="cb1-63"></span>
<span id="cb1-64"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_img_and_label(x_pos, y_pos, shapes, colors, sizes, img_size):</span>
<span id="cb1-65">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""generates a img and corresponding segmentation label mask</span></span>
<span id="cb1-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    from the provided latent factors</span></span>
<span id="cb1-67"></span>
<span id="cb1-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x_pos (list): x positions of objects</span></span>
<span id="cb1-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        y_post (list): y positions of objects</span></span>
<span id="cb1-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        shapes (list): shape can only be `circle` or `square`</span></span>
<span id="cb1-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        colors (list): colors of object</span></span>
<span id="cb1-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sizes (list): object sizes</span></span>
<span id="cb1-74"></span>
<span id="cb1-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb1-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img (torch tensor): generated image represented as tensor</span></span>
<span id="cb1-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        label (torch tensor): corresponding semantic segmentation mask</span></span>
<span id="cb1-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-79">    out_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>, (img_size, img_size), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span>
<span id="cb1-80">    labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb1-81">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add objects</span></span>
<span id="cb1-82">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x, y, shape, color, size <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x_pos, y_pos, shapes, colors, sizes):</span>
<span id="cb1-83">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RGB"</span>, (img_size, img_size), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span>
<span id="cb1-84">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define end coordinates</span></span>
<span id="cb1-85">        x_1, y_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size</span>
<span id="cb1-86">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw new image onto black image</span></span>
<span id="cb1-87">        img1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDraw.Draw(img)</span>
<span id="cb1-88">        img2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDraw.Draw(out_img)</span>
<span id="cb1-89">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"square"</span>:</span>
<span id="cb1-90">            img1.rectangle([(x, y), (x_1, y_1)], fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color)</span>
<span id="cb1-91">            img2.rectangle([(x, y), (x_1, y_1)], fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color)</span>
<span id="cb1-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"circle"</span>:</span>
<span id="cb1-93">            img1.ellipse([(x, y), (x_1, y_1)], fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color)</span>
<span id="cb1-94">            img2.ellipse([(x, y), (x_1, y_1)], fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color)</span>
<span id="cb1-95">        labels.append((transforms.ToTensor()(img).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb1-96">    out_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.ToTensor()(out_img).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.float32)</span>
<span id="cb1-97">    out_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, img_size, img_size)</span>
<span id="cb1-98">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i_object <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(labels)):</span>
<span id="cb1-99">        out_label[labels[i_object]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i_object <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-100">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out_image, out_label</span></code></pre></div>
</details>
</div>
</section>
<section id="model-implementation" class="level3">
<h3 class="anchored" data-anchor-id="model-implementation">Model Implementation</h3>
<p>MONet is a rather sophisticated model composing two powerful neural network architectures in a reasonable way. One major downside of such complex models is that they comprise lots of hyperparamters from which much remains unknown such as sensitivity to small pertubations (e.g., changing layers within network architectures or parameters <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, <img src="https://latex.codecogs.com/png.latex?%5Cgamma">). Therefore, the model implementation aims to be as close as possible to the original model. Note that <a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a> did not publish their implementation.</p>
<p>For the sake of simplicity, this section is divided into four parts:</p>
<ul>
<li><p><strong>Attention Network</strong>: The architecture of the recurrent neural network <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Calpha%7D_%7B%5Cpsi%7D"> is described in appendix B.2 of <a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a>. Basically, it consists of a slightly modified <a href="https://borea17.github.io/paper_summaries/u_net">U-Net</a> architecture that (at the <img src="https://latex.codecogs.com/png.latex?k">th step) takes as input the concatenation of the image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> and the current scope mask in log units <img src="https://latex.codecogs.com/png.latex?%5Clog%20%5Ctextbf%7Bs%7D_k">. The output of the modified U-Net is a one channel image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bo%7D%20%5Cin%20%5D-%5Cinfty,%20+%20%5Cinfty%5B%5E%7BW%5Ctimes%20H%7D"> in which each entry can be interpreted as the logits probability <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Blogits%20%7D%5Cboldsymbol%7B%5Calpha%7D_k">. A sigmoid layer can be used to transform these logits into probabilities, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Cboldsymbol%7B%5Calpha%7D_k%20&amp;=%20%5Ctext%7BSigmoid%7D%20%5Cleft(%5Ctext%7Blogits%20%7D%0A%20%20%5Cboldsymbol%7B%5Calpha%7D_k%20%5Cright)%20=%20%5Cfrac%20%7B1%7D%20%7B1%20+%20%5Cexp%5Cleft(-%20%5Ctext%7Blogits%20%7D%0A%20%20%5Cboldsymbol%7B%5Calpha%7D_k%20%5Cright)%7D%5C%5C%0A%20%201%20-%20%5Cboldsymbol%7B%5Calpha%7D_k%20&amp;=%201%20-%20%5Ctext%7BSigmoid%7D%20%5Cleft(%5Ctext%7Blogits%20%7D%0A%20%20%5Cboldsymbol%7B%5Calpha%7D_k%20%5Cright)%20=%20%5Cfrac%20%7B%5Cexp%5Cleft(-%20%5Ctext%7Blogits%20%7D%0A%20%20%5Cboldsymbol%7B%5Calpha%7D_k%20%5Cright)%20%7D%20%7B%201%20+%20%5Cexp%5Cleft(-%20%5Ctext%7Blogits%20%7D%0A%20%20%5Cboldsymbol%7B%5Calpha%7D_k%20%5Cright)%7D%0A%5Cend%7Balign%7D%0A"></p>
<p>Additionally, <a href="https://arxiv.org/abs/1901.11390">Burgess et al. (2019)</a> transform these probabilties into logaritmic units, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%20%5Clog%20%5Cboldsymbol%7B%5Calpha%7D_k%20&amp;=%20-%20%5Clog%20%5Cleft(%201%20+%20%5Cexp%5Cleft(-%20%5Ctext%7Blogits%20%7D%0A%20%20%5Cboldsymbol%7B%5Calpha%7D_k%20%5Cright)%5Cright)=%5Ctext%7BLogSigmoid%20%7D%5Cleft(%0A%5Ctext%7Blogits%20%7D%20%5Cboldsymbol%7B%5Calpha%7D_k%20%5Cright)%5C%5C%0A%20%20%20%5Clog%20%5Cleft(1%20-%20%5Cboldsymbol%7B%5Calpha%7D_k%5Cright)%20&amp;=%20-%20%5Ctext%7Blogits%20%7D%0A%5Cboldsymbol%7B%5Calpha%7D_k%20+%20%5Clog%20%5Cboldsymbol%7B%5Calpha%7D_k,%0A%5Cend%7Balign%7D%0A"></p>
<p>i.e., a LogSigmoid layer can be used (instead of a sigmoid layer with applying logarithm to both outputs) to speed up the computations. From the model description above, it follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Ctextbf%7Bs%7D_%7Bk+1%7D%20&amp;=%20%5Ctextbf%7Bs%7D_k%20%5Codot%20%5Cleft(%201%20-%0A%20%20%5Cboldsymbol%7B%5Calpha%7D_k%20%5Cright)%20%5Cquad%20&amp;&amp;%5CLeftrightarrow%20%20%5Cquad%20%5Clog%0A%20%20%5Ctextbf%7Bs%7D_%7Bk+1%7D%20=%20%5Clog%20%5Ctextbf%7Bs%7D_k%20+%20%5Clog%20%5Cleft(1%20-%20%5Cboldsymbol%7B%5Calpha%7D_k%20%5Cright)%5C%5C%0A%20%20%5Ctextbf%7Bm%7D_%7Bk+1%7D%20&amp;=%20%5Ctextbf%7Bs%7D_%7Bk%7D%20%5Codot%20%5Cboldsymbol%7B%5Calpha%7D_k%20%5Cquad%0A&amp;&amp;%5CLeftrightarrow%20%5Cquad%20%5Clog%20%5Ctextbf%7Bm%7D_%7Bk+1%7D%20=%20%5Clog%20%5Ctextbf%7Bs%7D_%7Bk%7D%20+%20%5Clog%20%5Cboldsymbol%7B%5Calpha%7D_k,%0A%5Cend%7Balign%7D%0A"></p>
<p>i.e., the output of the <img src="https://latex.codecogs.com/png.latex?k">th step can be computed by simply adding the log current scope <img src="https://latex.codecogs.com/png.latex?%5Clog%20%5Ctextbf%7Bs%7D_k"> to each log probability. As a result, the next log attention mask <img src="https://latex.codecogs.com/png.latex?%5Clog%20%5Ctextbf%7Bm%7D_%7Bk+1%7D"> and next log scope <img src="https://latex.codecogs.com/png.latex?%5Clog%20%5Ctextbf%7Bs%7D_%7Bk+1%7D"> can be retrieved. Note that using log units instead of standard units is beneficial as it ensures numerical stability while simplifying the optimization due to an increased learning signal. <!-- or simpliyfing the loss function computation --></p>
<p>The code below summarizes the network architecture, <a href="https://arxiv.org/abs/1901.11390">Burgess et al. (2019)</a> did not state the channel dimensionality within the U-Net blocks explicitely. However, as they mentioned to use a <code>U-Net blueprint</code>, it is assumed that they use the same dimensionality as in the original <a href="https://borea17.github.io/paper_summaries/u_net">U-Net paper</a>. To reduce training time and memory capacity, the following implementation caps the channel dimensionality in the encoder to 64 output channels.</p></li>
</ul>
<div class="cell" data-execution_count="3">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb2-3"></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> UNet(nn.Module):</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""U-Net architecture with blocks proposed by Burgess et al. (2019)</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        encoder_blocks (list): u_net blocks of encoder path</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        decoder_blocks (list): u_net blocks of decoder path</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bottleneck_MLP (list): bottleneck is a 3-layer MLP with ReLUs</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        out_conv (nn.Conv2d): convolutional classification layer</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-14"></span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-16">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.ModuleList(</span>
<span id="cb2-18">            [</span>
<span id="cb2-19">                UNet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 16, 64, 64]</span></span>
<span id="cb2-20">                UNet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>),             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 32, 32, 32]</span></span>
<span id="cb2-21">                UNet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 64, 16, 16]</span></span>
<span id="cb2-22">                UNet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 64, 8, 8]</span></span>
<span id="cb2-23">                UNet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 75, 4, 4]</span></span>
<span id="cb2-24">            ]</span>
<span id="cb2-25">        )</span>
<span id="cb2-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bottleneck_MLP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-27">            nn.Flatten(),                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 512*4*4]</span></span>
<span id="cb2-28">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>),</span>
<span id="cb2-29">            nn.ReLU(),</span>
<span id="cb2-30">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>),                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 512*4*4]</span></span>
<span id="cb2-31">            nn.ReLU(),</span>
<span id="cb2-32">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>),              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 512*4*4]</span></span>
<span id="cb2-33">            nn.ReLU(),             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshaped into [batch_size, 512, 4, 4]</span></span>
<span id="cb2-34">        )</span>
<span id="cb2-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.ModuleList(</span>
<span id="cb2-36">            [</span>
<span id="cb2-37">                UNet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 64, 4, 4]</span></span>
<span id="cb2-38">                UNet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 64, 8, 8]</span></span>
<span id="cb2-39">                UNet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>),             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 32, 16, 16]</span></span>
<span id="cb2-40">                UNet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 32, 32, 32]</span></span>
<span id="cb2-41">                UNet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>),              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 64, 64, 64]</span></span>
<span id="cb2-42">            ]</span>
<span id="cb2-43">        )</span>
<span id="cb2-44"></span>
<span id="cb2-45">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-47"></span>
<span id="cb2-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb2-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># go through encoder path and store intermediate results</span></span>
<span id="cb2-50">        skip_tensors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, encoder_block <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder_blocks):</span>
<span id="cb2-52">            out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_block(x)</span>
<span id="cb2-53">            skip_tensors.append(out)</span>
<span id="cb2-54">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no resizing in the last block</span></span>
<span id="cb2-55">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder_blocks) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># downsample</span></span>
<span id="cb2-56">                x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.interpolate(</span>
<span id="cb2-57">                    out, scale_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nearest"</span>, </span>
<span id="cb2-58">                    recompute_scale_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-59">                )</span>
<span id="cb2-60">        last_skip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out</span>
<span id="cb2-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># feed last skip tensor through bottleneck</span></span>
<span id="cb2-62">        out_MLP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bottleneck_MLP(last_skip)</span>
<span id="cb2-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape output to match last skip tensor</span></span>
<span id="cb2-64">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out_MLP.view(last_skip.shape)</span>
<span id="cb2-65">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># go through decoder path and use skip tensors</span></span>
<span id="cb2-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, decoder_block <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder_blocks):</span>
<span id="cb2-67">            inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((skip_tensors[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> index], out), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-68">            out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decoder_block(inp)</span>
<span id="cb2-69">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no resizing in the last block</span></span>
<span id="cb2-70">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder_blocks) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upsample</span></span>
<span id="cb2-71">                out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.interpolate(out, scale_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nearest"</span>)</span>
<span id="cb2-72">        prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.out_conv(out)</span>
<span id="cb2-73">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> prediction</span>
<span id="cb2-74"></span>
<span id="cb2-75">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb2-76">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _block(in_channels, out_channels):</span>
<span id="cb2-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""U-Net block as described by Burgess et al. (2019)"""</span></span>
<span id="cb2-78">        u_net_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-79">            nn.Conv2d(</span>
<span id="cb2-80">                in_channels,</span>
<span id="cb2-81">                out_channels,</span>
<span id="cb2-82">                kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb2-83">                stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-84">                padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-85">                bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb2-86">            ),</span>
<span id="cb2-87">            nn.InstanceNorm2d(num_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>out_channels, affine<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb2-88">            nn.ReLU(),</span>
<span id="cb2-89">        )</span>
<span id="cb2-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> u_net_block</span>
<span id="cb2-91"></span>
<span id="cb2-92"></span>
<span id="cb2-93"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> AttentionNetwork(nn.Module):</span>
<span id="cb2-94">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-95">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-96">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> UNet()</span>
<span id="cb2-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-98"></span>
<span id="cb2-99">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, num_slots):</span>
<span id="cb2-100">        log_s_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(x[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, :, :])</span>
<span id="cb2-101">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize list to store intermediate results</span></span>
<span id="cb2-102">        log_m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-103">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> slot <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_slots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb2-104">            inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((x, log_s_k), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-105">            alpha_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.unet(inp)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 1, image_dim, image_dim]</span></span>
<span id="cb2-106">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transform into log probabilties log (alpha_k) and log (1 - alpha_k)</span></span>
<span id="cb2-107">            log_alpha_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.logsigmoid(alpha_logits)</span>
<span id="cb2-108">            log_1_m_alpha_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>alpha_logits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> log_alpha_k</span>
<span id="cb2-109">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute log_new_mask, log_new_scope</span></span>
<span id="cb2-110">            log_new_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_s_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> log_alpha_k</span>
<span id="cb2-111">            log_new_scope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_s_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> log_1_m_alpha_k</span>
<span id="cb2-112">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store intermediate results in list</span></span>
<span id="cb2-113">            log_m.append(log_new_mask)</span>
<span id="cb2-114">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update log scope</span></span>
<span id="cb2-115">            log_s_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_new_scope</span>
<span id="cb2-116">        log_m.append(log_s_k)</span>
<span id="cb2-117">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert list to tensor [batch_size, num_slots, 1, image_dim, image_dim]</span></span>
<span id="cb2-118">        log_m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat(log_m, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-119">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> log_m</span></code></pre></div>
</details>
</div>
<!-- [^5]: [Burgess et al. (2019)](https://arxiv.org/abs/1901.11390) state -->
<!--     that they use a log softmax layer, however this would only be -->
<!--     possible if there were two channels at the output. Note that in -->
<!--     binary classification, a pixel-wise softmax layer (two channel) can be -->
<!--     transformed into a sigmoid layer (one channel) by using the -->
<!--     difference between the two channels as input:  -->
<!--     $$ -->
<!--     \begin{align} -->
<!--       \text{Softmax} (x_1) &= \frac {1} {1 + \exp(x_2 - x_1)} = \frac -->
<!--     {1} {1 + \exp(t)} = \text{Sigmoid} (t), \\ -->
<!--       \text{Softmax} (x_2) &= \frac {1}{1 + \exp(x_1 - x_2)} = \frac -->
<!--     {1}{1+\exp(-t)} = 1 - \text{Sigmoid}(t). -->
<!--     \end{align} -->
<!--     $$ -->
<ul>
<li><p><strong>Component VAE</strong>: The architectures for the encoder <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D"> and decoder <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D"> neural networks are described in appendix B.1 of <a href="https://arxiv.org/abs/1901.11390">Burgess et al. (2019)</a>. Basically, the encoder <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D(%5Ctextbf%7Bz%7D_k%20%7C%20%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bm%7D_k)"> is a typical CNN that takes the concatentation of an image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> and a segmentation mask in logaritmic units <img src="https://latex.codecogs.com/png.latex?%5Clog%20%5Ctextbf%7Bm%7D_k"> as input to compute the mean <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cmu%7D_%7BE,%20k%7D"> and logarithmed variance <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Csigma%7D%5E2_%7BE,k%7D"> of the Gaussian latent space distribution <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D%20%5Cleft(%20%5Cboldsymbol%7B%5Cmu%7D_%7BE,%20k%7D,%20%5Ctext%7Bdiag%7D%5Cleft(%5Cboldsymbol%7B%5Csigma%7D%5E2_%7BE,k%7D%20%5Cright)%20%5Cright)">. Sampling from this distribution is avoided by using the reparametrization trick, i.e., the latent variable <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D_k"> is expressed as a deterministic variable<sup>5</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Ctextbf%7Bz%7D_k%20=%20%5Cboldsymbol%7B%5Cmu%7D_%7BE,%20k%7D%20+%0A%20%20%5Cboldsymbol%7B%5Csigma%7D%5E2_%7BE,k%7D%20%5Codot%20%5Cboldsymbol%7B%5Cepsilon%7D%20%5Cquad%0A%20%20%5Ctext%7Bwhere%7D%20%5Cquad%20%5Cboldsymbol%7B%5Cepsilon%7D%20%5Csim%20%5Cmathcal%7BN%7D%5Cleft(%0A%20%20%5Ctextbf%7B0%7D,%20%5Ctextbf%7BI%7D%0A%20%20%5Cright).%0A"></p>
<p>The component VAE uses a <a href="https://borea17.github.io/paper_summaries/spatial_broadcast_decoder">Spatial Broadcast decoder</a> <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D"> to transform the latent vector <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D_k"> into the reconstructed image component <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D_k%20%5Csim%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bz%7D_k%20%5Cright)"> and mask <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_k%20%5Csim%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bc%7D%7C%5Ctextbf%7Bz%7D_k%20%5Cright)">. <a href="https://arxiv.org/abs/1901.11390">Burgess et al. (2019)</a> chose independent Gaussian distributions with fixed variances for each pixel as the reconstructed image component distributions <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20x_i%20%7C%20%5Ctextbf%7Bz%7D_k%20%5Cright)%20%5Csim%20%5Cmathcal%7BN%7D%20%5Cleft(%5Cmu_%7Bk,i%7D%20(%5Cboldsymbol%7B%5Ctheta%7D),%20%5Csigma_k%5E2%20%5Cright)"> and independent Bernoulli distributions for each pixel as the reconstructed mask distributions <img src="https://latex.codecogs.com/png.latex?p%5Cleft(c_%7Bk,%20i%7D%7C%20%5Ctextbf%7Bz%7D_k%20%5Cright)%20%5Csim%20%5Ctext%7BBern%7D%20%5Cleft(%20p_%7Bk,i%7D%20(%5Cboldsymbol%7B%5Ctheta%7D)%5Cright)">. I.e., the decoder output is a 4 channel image from which the first three channels correspond to the 3 RGB channels for the means of the image components <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cmu%7D_k"> and the last channel corresponds to the logits probabilities of the Bernoulli distribution <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Blogits%20%7D%5Ctextbf%7Bp%7D_k">.</p></li>
</ul>
<div class="cell" data-execution_count="4">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CNN_VAE(nn.Module):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""simple CNN-VAE class with a Gaussian encoder (mean and diagonal variance</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    structure) and a Gaussian decoder with fixed variance </span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    (decoder is implemented as a Spatial Broadcast decoder) </span></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        latent_dim (int): dimension of latent space</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        encoder (nn.Sequential): encoder network for mean and log_var</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        decoder (nn.Sequential): spatial broadcast decoder  for mean (fixed var)</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x_grid (torch tensor): appended x coordinates for spatial broadcast decoder</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        y_grid (torch tensor): appended x coordinates for spatial broadcast decoder</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-13"></span>
<span id="cb3-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(CNN_VAE, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span></span>
<span id="cb3-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb3-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 4, 64, 64]</span></span>
<span id="cb3-19">            nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-20">            nn.ReLU(),</span>
<span id="cb3-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 32, 32, 32]</span></span>
<span id="cb3-22">            nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-23">            nn.ReLU(),</span>
<span id="cb3-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 32, 16, 16]</span></span>
<span id="cb3-25">            nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-26">            nn.ReLU(),</span>
<span id="cb3-27">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 64, 8, 8]</span></span>
<span id="cb3-28">            nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-29">            nn.ReLU(),</span>
<span id="cb3-30">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 64, 4, 4],</span></span>
<span id="cb3-31">            nn.Flatten(),</span>
<span id="cb3-32">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 1024]</span></span>
<span id="cb3-33">        )</span>
<span id="cb3-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MLP <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb3-35">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>),</span>
<span id="cb3-36">            nn.ReLU(),</span>
<span id="cb3-37">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim),</span>
<span id="cb3-38">        )</span>
<span id="cb3-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># spatial broadcast decoder configuration</span></span>
<span id="cb3-40">        img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb3-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># "input width and height of CNN both 8 larger than target output"</span></span>
<span id="cb3-42">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb3-43">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb3-44">        x_grid, y_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.meshgrid(x, y)</span>
<span id="cb3-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape into [1, 1, img_size, img_size] and save in state_dict</span></span>
<span id="cb3-46">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_grid'</span>, x_grid.view((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_grid.shape).clone())</span>
<span id="cb3-47">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_grid'</span>, y_grid.view((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_grid.shape).clone())</span>
<span id="cb3-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb3-49">             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape [batch_size, latent_dim + 2, 72, 72]</span></span>
<span id="cb3-50">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>,</span>
<span id="cb3-51">                      stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb3-52">            nn.ReLU(),</span>
<span id="cb3-53">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape [batch_size, 16, 70, 70]</span></span>
<span id="cb3-54">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-55">                      kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb3-56">            nn.ReLU(),</span>
<span id="cb3-57">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape [batch_size, 16, 68, 68]</span></span>
<span id="cb3-58">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-59">                      kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb3-60">            nn.ReLU(),</span>
<span id="cb3-61">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape [batch_size, 16, 66, 66]</span></span>
<span id="cb3-62">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-63">                      kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)),</span>
<span id="cb3-64">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape [batch_size, 4, 64, 64]</span></span>
<span id="cb3-65">            nn.ReLU(),</span>
<span id="cb3-66">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb3-67">                      kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)),</span>
<span id="cb3-68">        )</span>
<span id="cb3-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb3-70"></span>
<span id="cb3-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-72">        [z, mu_E, log_var_E] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(x)</span>
<span id="cb3-73">        x_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z)</span>
<span id="cb3-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_rec, z, mu_E, log_var_E</span>
<span id="cb3-75"></span>
<span id="cb3-76">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-77">        out_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.MLP(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder(x))</span>
<span id="cb3-78">        mu_E, log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.chunk(out_encoder, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample noise variable for each batch</span></span>
<span id="cb3-80">        epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(log_var_E)</span>
<span id="cb3-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get latent variable by reparametrization trick</span></span>
<span id="cb3-82">        z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.exp(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> log_var_E) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> epsilon</span>
<span id="cb3-83">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [z, mu_E, log_var_E]</span>
<span id="cb3-84"></span>
<span id="cb3-85">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z):</span>
<span id="cb3-86">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-87">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape z into [batch_size, latent_dim, 1, 1]</span></span>
<span id="cb3-88">        z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.view(z.shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb3-89">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tile across image [batch_size, latent_im, 64+8, 64+8]</span></span>
<span id="cb3-90">        z_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)</span>
<span id="cb3-91">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upsample x_grid and y_grid to [batch_size, 1, 64+8, 64+8]</span></span>
<span id="cb3-92">        x_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_grid.repeat(batch_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-93">        y_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_grid.repeat(batch_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-94">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate vectors [batch_size, latent_dim+2, 64+8, 64+8]</span></span>
<span id="cb3-95">        z_sb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((z_b, x_b, y_b), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-96">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply convolutional layers mu_D</span></span>
<span id="cb3-97">        mu_D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(z_sb)</span>
<span id="cb3-98">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mu_D</span>
<span id="cb3-99"></span>
<span id="cb3-100">    </span>
<span id="cb3-101"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ComponentVAE(CNN_VAE):</span>
<span id="cb3-102">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Component VAE class for use in MONet as proposed by Burgess et al. (2019)</span></span>
<span id="cb3-103"></span>
<span id="cb3-104"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb3-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        #################### CNN_VAE ########################</span></span>
<span id="cb3-106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        encoder (nn.Sequential): encoder network for mean and log_var</span></span>
<span id="cb3-107"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        decoder (nn.Sequential): decoder network for mean (fixed var)</span></span>
<span id="cb3-108"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_dim (int): image dimension along one axis</span></span>
<span id="cb3-109"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        expand_dim (int): expansion of latent image to accomodate for lack of padding</span></span>
<span id="cb3-110"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x_grid (torch tensor): appended x coordinates for spatial broadcast decoder</span></span>
<span id="cb3-111"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        y_grid (torch tensor): appended x coordinates for spatial broadcast decoder</span></span>
<span id="cb3-112"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        #####################################################</span></span>
<span id="cb3-113"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_channels (int): number of channels in image</span></span>
<span id="cb3-114"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-115"></span>
<span id="cb3-116">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,):</span>
<span id="cb3-117">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-118">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-119">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb3-120"></span>
<span id="cb3-121">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image, log_mask, deterministic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb3-122">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-123"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        parellize computation of reconstructions</span></span>
<span id="cb3-124"></span>
<span id="cb3-125"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb3-126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            image (torch.tensor): input image [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb3-127"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            log_mask (torch.tensor): all seg masks [batch, slots, 1, img_dim, img_dim]</span></span>
<span id="cb3-128"></span>
<span id="cb3-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb3-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            mu_z_k (torch.tensor): latent mean [batch, slot, latent_dim]</span></span>
<span id="cb3-131"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            log_var_z_k (torch.tensor): latent log_var [batch, slot, latent_dim]</span></span>
<span id="cb3-132"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z_k (torch.tensor): latent log_var [batch, slot, latent_dim]</span></span>
<span id="cb3-133"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x_r_k (torch.tensor): img reconstruction </span></span>
<span id="cb3-134"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                [batch, slot, img_chan, img_dim, img_dim]</span></span>
<span id="cb3-135"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            logits_m_r_k (torch.tensor): mask recons. [batch, slot, 1, img_dim, img_dim]</span></span>
<span id="cb3-136"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb3-137">        num_slots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_mask.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-138">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create input [batch_size*num_slots, image_channels+1, img_dim, img_dim]</span></span>
<span id="cb3-139">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ComponentVAE._prepare_input(image, log_mask, num_slots)</span>
<span id="cb3-140">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get encoder distribution parameters [batch*slots, latent_dim]</span></span>
<span id="cb3-141">        [z_k, mu_z_k, log_var_z_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(x)</span>
<span id="cb3-142">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> deterministic:</span>
<span id="cb3-143">            z_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_z_k</span>
<span id="cb3-144">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get decoder dist. parameters [batch*slots, image_channels, img_dim, img_dim]</span></span>
<span id="cb3-145">        [x_r_k, logits_m_r_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z_k)</span>
<span id="cb3-146">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert outputs into easier understandable shapes</span></span>
<span id="cb3-147">        [mu_z_k, log_var_z_k, z_k, x_r_k, logits_m_r_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ComponentVAE._prepare_output(</span>
<span id="cb3-148">            mu_z_k, log_var_z_k, z_k, x_r_k, logits_m_r_k, num_slots</span>
<span id="cb3-149">        )</span>
<span id="cb3-150">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [mu_z_k, log_var_z_k, z_k, x_r_k, logits_m_r_k]</span>
<span id="cb3-151"></span>
<span id="cb3-152">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z):</span>
<span id="cb3-153">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-154"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb3-155"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z (torch.tensor): [batch_size*num_slots, latent_dim]</span></span>
<span id="cb3-156"></span>
<span id="cb3-157"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb3-158"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            mu_x (torch.tensor): [batch*slots, img_channels, img_dim, img_dim]</span></span>
<span id="cb3-159"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            logits_m (torch.tensor): [batch*slots, 1, img_dim, img_dim]</span></span>
<span id="cb3-160"></span>
<span id="cb3-161"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb3-162">        mu_D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().decode(z)</span>
<span id="cb3-163">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split into means of x and logits of m</span></span>
<span id="cb3-164">        mu_x, logits_m <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.split(mu_D, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_channels, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-165">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># enforce positivity of mu_x</span></span>
<span id="cb3-166">        mu_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_x.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>()</span>
<span id="cb3-167">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [mu_x, logits_m]</span>
<span id="cb3-168"></span>
<span id="cb3-169">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb3-170">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _prepare_input(image, log_mask, num_slots):</span>
<span id="cb3-171">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-172"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb3-173"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            image (torch.tensor): input image [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb3-174"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            log_mask (torch.tensor): all seg masks [batch, slots, 1, img_dim, img_dim]</span></span>
<span id="cb3-175"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            num_slots (int): number of slots (log_mask.shape[1])</span></span>
<span id="cb3-176"></span>
<span id="cb3-177"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb3-178"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x (torch.tensor): input image [batch*slots, img_channels+1, img_dim, img_dim]</span></span>
<span id="cb3-179"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb3-180">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prepare image [batch_size*num_slots, image_channels, img_dim, img_dim]</span></span>
<span id="cb3-181">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image.repeat(num_slots, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-182">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prepare log_mask [batch_size*num_slots, 1, img_dim, img_dim]</span></span>
<span id="cb3-183">        log_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat(log_mask.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).chunk(num_slots, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-184">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate along color channel</span></span>
<span id="cb3-185">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((image, log_mask), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-186">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x</span>
<span id="cb3-187"></span>
<span id="cb3-188">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb3-189">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _prepare_output(mu_z_k, log_var_z_k, z_k, x_r_k, logits_m_r_k, num_slots):</span>
<span id="cb3-190">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-191"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        convert output into an easier understandable format</span></span>
<span id="cb3-192"></span>
<span id="cb3-193"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb3-194"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            mu_z_k (torch.tensor): [batch_size*num_slots, latent_dim]</span></span>
<span id="cb3-195"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            log_var_z_k (torch.tensor): [batch_size*num_slots, latent_dim]</span></span>
<span id="cb3-196"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z_k (torch.tensor): [batch_size*num_slots, latent_dim]</span></span>
<span id="cb3-197"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x_r_k (torch.tensor): [batch_size*num_slots, img_channels, img_dim, img_dim]</span></span>
<span id="cb3-198"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            logits_m_r_k (torch.tensor): [batch_size*num_slots, 1, img_dim, img_dim]</span></span>
<span id="cb3-199"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            num_slots (int): number of slots (log_mask.shape[1])</span></span>
<span id="cb3-200"></span>
<span id="cb3-201"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb3-202"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            mu_z_k (torch.tensor): [batch, slot, latent_dim]</span></span>
<span id="cb3-203"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            log_var_z_k (torch.tensor): [batch, slot, latent_dim]</span></span>
<span id="cb3-204"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z_k (torch.tensor): [batch, slot, latent_dim]</span></span>
<span id="cb3-205"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x_r_k (torch.tensor): [batch, slots, img_channels, img_dim, img_dim]</span></span>
<span id="cb3-206"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            logits_m_r_k (torch.tensor): [batch, slots, 1, img_dim, img_dim]</span></span>
<span id="cb3-207"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb3-208">        mu_z_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(mu_z_k.chunk(num_slots, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-209">        log_var_z_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(log_var_z_k.chunk(num_slots, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-210">        z_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(z_k.chunk(num_slots, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-211">        x_r_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(x_r_k.chunk(num_slots, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-212">        logits_m_r_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.stack(logits_m_r_k.chunk(num_slots, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-213">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [mu_z_k, log_var_z_k, z_k, x_r_k, logits_m_r_k]</span></code></pre></div>
</details>
</div>
<ul>
<li><p><strong>MONet Implementation</strong>: The compositional structure is achieved by looping for <img src="https://latex.codecogs.com/png.latex?K"> steps over the image and combining the attention network with the component VAE. While attention masks and latent codes can be generated easily (during test time), computing the loss <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D"> is more complicated. Remind that the loss function is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cmathcal%7BL%7D%5Cleft(%5Cboldsymbol%7B%5Cphi%7D;%20%5Cboldsymbol%7B%5Ctheta%7D;%0A%5Cboldsymbol%7B%5Cpsi%7D;%20%5Ctextbf%7Bx%7D%20%5Cright)%20&amp;=%20%5Cunderbrace%7B-%20%5Clog%20%5Cleft(%20%5Csum_%7Bk=1%7D%5EK%20%5Ctextbf%7Bm%7D_k%20%5Codot%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%20%7C%0A%5Ctextbf%7Bz%7D_k%20%5Cright)%5Cright)%7D_%7B%5Ctext%7BReconstruction%20Error%20between%20%7D%0A%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%20%5Ctext%7B%20and%20%7D%20%5Ctextbf%7Bx%7D%7D%20+%20%5Cbeta%0A%5Cunderbrace%7BD_%7BKL%7D%20%5Cleft(%20%5Cprod_%7Bk=1%7D%5EK%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D_k%20%7C%0A%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bm%7D_k%5Cright)%20%7C%7C%20p(%5Ctextbf%7Bz%7D)%0A%5Cright)%7D_%7B%5Ctext%7BRegularization%20Term%20for%20Distribution%20of%20%7D%5Ctextbf%7Bz%7D_k%7D%5C%5C%0A&amp;+%20%5Cgamma%20%5Cunderbrace%7BD_%7BKL%7D%20%5Cleft(%20q_%7B%5Cboldsymbol%7B%5Cpsi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bc%7D%20%7C%0A%5Ctextbf%7Bx%7D%20%5Cright)%20%7C%7C%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bc%7D%20%7C%20%5C%7B%0A%5Ctextbf%7Bz%7D_k%20%5C%7D%20%5Cright)%20%5Cright)%7D_%7B%5Ctext%7BReconstruction%20Error%20between%20%7D%0A%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_k%20%5Ctext%7B%20and%20%7D%20%5Ctextbf%7Bm%7D_k%7D.%0A%5Cend%7Balign%7D%0A"></p>
<p>Each of these three terms can be written in a more explicit form such that the implementation becomes trivial:</p>
<ol type="1">
<li><p><em>Reconstruction Error between <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"></em>: This term is also known as the negative log likelihood (NLL) of the whole reconstructed image. <a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a> chose independent Gaussian distributions with fixed variance for each pixel as the decoder distribution <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20x_%7Bi%7D%20%7C%20%5Ctextbf%7Bz%7D_k%20%5Cright)%20%5Csim%20%5Cmathcal%7BN%7D%20%5Cleft(%5Cmu_%7Bk,%20i%7D(%5Cboldsymbol%7B%5Ctheta%7D),%20%5Csigma_k%5E2%20%5Cright)">.</p></li>
<li><p><em>Regularization Term for Distribution of <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D_k"></em>: The coding space is regularized using the KL divergence between the latent (posterior) distribution <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D_k%20%5Cright)%20%5Csim%20%5Cmathcal%7BN%7D%20%5Cleft(%20%5Cboldsymbol%7B%5Cmu%7D_k,%20%5Cleft(%5Cboldsymbol%7B%5Csigma%7D_k%5E2%5Cright)%5E%7B%5Ctext%7BT%7D%7D%20%5Ctextbf%7BI%7D%20%5Cright)"> factorized across slots and the latent prior distribution weighted with the hyperparameter <img src="https://latex.codecogs.com/png.latex?%5Cbeta">. The product of multiple Gaussians is itself a Gaussian, however it is rather complicated to compute the new mean and covariance matrix of this Gaussian. Fortunately, each <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D_k"> is sampled independently from the corresponding latent distribution <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D(%5Ctextbf%7Bz%7D_k)">, thus we can generate the new mean and covariance by concatenation (see <a href="https://stats.stackexchange.com/a/308137">this post</a>), i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20q(%5Ctextbf%7Bz%7D_1,%20%5Cdots,%20%5Ctextbf%7Bz%7D_K)%20=%20%5Cprod_%7Bk=1%7D%5EK%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D_k%0A%5Cright)%20%20=%20q%5Cleft(%20%5Cbegin%7Bbmatrix%7D%20%5Ctextbf%7Bz%7D_1%20%5C%5C%20%5Cvdots%0A%20%20%5C%5C%20%5Ctextbf%7Bz%7D_K%20%20%5Cend%7Bbmatrix%7D%5Cright)%20=%20%5Cmathcal%7BN%7D%20%5Cleft(%0A%20%20%5Cunderbrace%7B%0A%20%20%5Cbegin%7Bbmatrix%7D%20%5Cboldsymbol%7B%5Cmu%7D_1%20%5C%5C%20%5Cvdots%0A%20%20%20%5C%5C%20%5Cboldsymbol%7B%5Cmu%7D_K%20%5Cend%7Bbmatrix%7D%7D_%7B%0A%20%20%20%5Cwidehat%7B%5Cboldsymbol%7B%5Cmu%7D%7D%7D,%20%5Cunderbrace%7B%5Ctext%7Bdiag%7D%5Cleft(%0A%20%20%5Cbegin%7Bbmatrix%7D%20%5Cboldsymbol%7B%5Csigma%7D_1%5E2%20%5C%5C%20%20%5Cvdots%5C%5C%0A%20%20%5Cboldsymbol%7B%5Csigma%7D_K%5E2%20%20%5Cend%7Bbmatrix%7D%0A%20%20%5Cright)%7D_%7B%20%5Cleft(%5Cwidehat%7B%5Cboldsymbol%7B%5Csigma%7D%7D%5E2%5Cright)%5E%7B%5Ctext%7BT%7D%7D%20%5Ctextbf%7BI%7D%7D%5Cright)%0A"></p>
<p><a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a> chose a unit Gaussian distribution as the latent prior <img src="https://latex.codecogs.com/png.latex?p(%5Ctextbf%7Bz%7D)%20%5Csim%20%5Cmathcal%7BN%7D%20%5Cleft(%5Ctextbf%7B0%7D,%20%5Ctextbf%7BI%7D%20%5Cright)"> with <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bdim%7D(%5Ctextbf%7B0%7D)%20=%20%5Ctext%7Bdim%7D(%5Chat%7B%5Cboldsymbol%7B%5Cmu%7D%7D)">. The KL divergence between those two Gaussian distributions can be calculated in closed form (see Appendix B of <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a>)</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%20D_%7BKL%7D%20%5Cleft(%20%5Cprod_%7Bk=1%7D%5EK%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%0A%5Cleft(%5Ctextbf%7Bz%7D_k%20%5Cright)%20%7C%7C%20p(%5Ctextbf%7Bz%7D)%20%5Cright)%20&amp;=%20-%5Cfrac%0A%7B1%7D%7B2%7D%20%5Csum_%7Bj=1%7D%5E%7BK%20%5Ccdot%20L%7D%20%5Cleft(1%20+%20%5Clog%20%5Cleft(%0A%5Cwidehat%7B%5Csigma%7D_j%5E2%20%5Cright)%20-%20%5Cwidehat%7B%5Cmu%7D_j%5E2%20-%20%5Cwidehat%7B%5Csigma%7D_j%5E2%20%5Cright),%0A%5Cend%7Balign%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?L"> denotes the dimensionality of the latent space.</p></li>
<li><p><em>Reconstruction Error between <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_k"> and <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_k"></em>: Remind that the attention network <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Calpha%7D_%7B%5Cboldsymbol%7B%5Cpsi%7D%7D"> produces <img src="https://latex.codecogs.com/png.latex?K"> segmentation masks in logaritmic units, i.e., <img src="https://latex.codecogs.com/png.latex?%5Clog%20%5Ctextbf%7Bm%7D_k">. By construction <img src="https://latex.codecogs.com/png.latex?%5Csum_%7Bk=1%7D%5EK%20%5Ctextbf%7Bm%7D_k%20=%20%5Ctextbf%7B1%7D">, i.e., concatentation of the attention masks <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D%20=%20%5Cbegin%7Bbmatrix%7D%20%5Ctextbf%7Bm%7D_1%20&amp;%20%5Cdots%20&amp;%20%5Ctextbf%7Bm%7D_K%20%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D"> can be interpreted as a pixel-wise categorical distribution<sup>6</sup>. Similarly, concatenating the logits probabilties of the component VAE and applying a pixel-wise softmax, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D%20=%20%5Cbegin%7Bbmatrix%7D%20%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_1%20%5C%5C%20%5Cvdots%20%5C%5C%0A%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_K%20%5Cend%7Bbmatrix%7D%20=%20%5Ctext%7BSoftmax%7D%5Cleft(%5Cbegin%7Bbmatrix%7D%20%5Ctext%7Blogits%20%7D%5Ctextbf%7Bp%7D_1%20%5C%5C%20%5Cvdots%20%5C%5C%0A%5Ctext%7Blogits%20%7D%5Ctextbf%7Bp%7D_K%20%5Cend%7Bbmatrix%7D%5Cright),%0A"></p>
<p>transforms the logits outputs of the component VAE into a pixel-wise categorical distribution. Thus, the KL-divergence can be calculated as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20D_%7BKL%7D%20%5Cleft(%20q_%7B%5Cboldsymbol%7B%5Cpsi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bc%7D%20%7C%0A%5Ctextbf%7Bx%7D%20%5Cright)%20%7C%7C%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bc%7D%20%7C%20%5C%7B%0A%5Ctextbf%7Bz%7D_k%20%5C%7D%20%5Cright)%20%5Cright)%20&amp;=%0A%20%20%5Csum_%7Bi=1%7D%5E%7BH%5Ccdot%20W%7D%20D_%7BKL%7D%20%5Cleft(%20%7B%5Ctextbf%7Bm%7D%7D_i%20%7C%7C%20%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_i%20%5Cright)%20%5C%5C%0A%20%20&amp;=%20%5Csum_%7Bi=1%7D%5E%7BH%5Ccdot%20W%7D%20%5Ctextbf%7Bm%7D_i%20%5Codot%20%5Cleft(%5Clog%20%5Ctextbf%7Bm%7D_i%20-%20%5Clog%20%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_i%20%5Cright),%0A%5Cend%7Balign%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?i"> denotes the pixel space, i.e., <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_i%20%5Cin%20%5B0,%201%5D%5E%7BK%7D">. To make the computation more efficient, we directly compute the reconstructed segmentations in logaritmic units using pixel-wise logsoftmax, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D%20=%20%5Ctext%7BLogSoftmax%7D%5Cleft(%5Cbegin%7Bbmatrix%7D%20%5Ctext%7Blogits%20%7D%5Ctextbf%7Bp%7D_1%20%5C%5C%20%5Cvdots%20%5C%5C%0A%5Ctext%7Blogits%20%7D%5Ctextbf%7Bp%7D_K%20%5Cend%7Bbmatrix%7D%5Cright).%0A"></p></li>
</ol></li>
</ul>
<div class="cell" data-execution_count="5">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytorch_lightning <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb4-4"></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> MONet(pl.LightningModule):</span>
<span id="cb4-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Multi-Object Network class as described by Burgess et al. (2019)</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Atributes:</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        n_samples (int): number of samples in training dataset</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        attention_network (AttentionNetwork)</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        component_VAE (ComponentVAE)</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ############## loss specific ##############</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bg_var (float): background variance</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        fg_var (float): foreground variance</span></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        beta (float): hyperparamater for loss</span></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        gamma (float): hyperparameter for loss</span></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ###########################################</span></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ############ training specific ############</span></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_slots_train (int): number of slots used during training time</span></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        lr (float): learning rate</span></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        batch_size (int): batch size used during training</span></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        log_every_k_epochs (int): how often current result img should be logged</span></span>
<span id="cb4-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ###########################################</span></span>
<span id="cb4-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-26"></span>
<span id="cb4-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, n_samples):</span>
<span id="cb4-28">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(MONet, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-29">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_samples</span>
<span id="cb4-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.attention_network <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AttentionNetwork()</span>
<span id="cb4-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.component_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ComponentVAE()</span>
<span id="cb4-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize all biases to zero</span></span>
<span id="cb4-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.attention_network.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(MONet.weight_init)</span>
<span id="cb4-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.component_VAE.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(MONet.weight_init)</span>
<span id="cb4-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############## loss specific ##############</span></span>
<span id="cb4-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_slots_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb4-37">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bg_var, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fg_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.09</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.11</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb4-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb4-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">###########################################</span></span>
<span id="cb4-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############ training specific ############</span></span>
<span id="cb4-42">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb4-43">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log_every_k_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb4-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialise pixel output standard deviations (NLL calculation)</span></span>
<span id="cb4-45">        var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fg_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.ones(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_slots_train, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-46">        var[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bg_var  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first step</span></span>
<span id="cb4-47">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"var"</span>, var)</span>
<span id="cb4-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.save_hyperparameters()</span>
<span id="cb4-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb4-50"></span>
<span id="cb4-51">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, num_slots):</span>
<span id="cb4-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        defines the inference procedure of MONet, i.e., computes the latent</span></span>
<span id="cb4-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        space and keeps track of useful metrics</span></span>
<span id="cb4-55"></span>
<span id="cb4-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb4-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x (torch.tensor): image [batch_size, img_channels, img_dim, img_dim]</span></span>
<span id="cb4-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            num_slots (int): number of slots</span></span>
<span id="cb4-59"></span>
<span id="cb4-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb4-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            out (dict): output dictionary containing</span></span>
<span id="cb4-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                log_m_k (torch.tensor) [batch, slots, 1, img_dim, img_dim]</span></span>
<span id="cb4-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    (logarithmized attention masks of attention_network)</span></span>
<span id="cb4-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                mu_k (torch.tensor) [batch, slots, latent_dim]</span></span>
<span id="cb4-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    (means of component VAE latent space)</span></span>
<span id="cb4-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                log_var_k (torch.tensor) [batch, slots, latent_dim]</span></span>
<span id="cb4-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    (logarithmized variances of component VAE latent space)</span></span>
<span id="cb4-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                x_r_k (torch.tensor) [batch, slots, img_channels, img_dim, img_dim]</span></span>
<span id="cb4-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    (slot-wise VAE image reconstructions)</span></span>
<span id="cb4-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                logits_m_r_k (torch.tensor) [batch, slots, 1, img_dim, img_dim]</span></span>
<span id="cb4-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    (slot-wise VAE mask reconstructions in logits)</span></span>
<span id="cb4-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                x_tilde (torch.tensor) [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb4-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    (reconstructed image using x_r_k and log_m_k)</span></span>
<span id="cb4-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-75">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute all logarithmized masks (iteratively)</span></span>
<span id="cb4-76">        log_m_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.attention_network(x, num_slots)</span>
<span id="cb4-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute all VAE reconstructions (parallel)</span></span>
<span id="cb4-78">        [mu_z_k, log_var_z_k, z_k, x_r_k, logits_m_r_k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.component_VAE(x, </span>
<span id="cb4-79">                                                                             log_m_k.exp())</span>
<span id="cb4-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store output in dict</span></span>
<span id="cb4-81">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb4-82">        output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_m_k"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_m_k</span>
<span id="cb4-83">        output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu_z_k"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_z_k</span>
<span id="cb4-84">        output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_var_z_k"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_var_z_k</span>
<span id="cb4-85">        output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"z_k"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_k</span>
<span id="cb4-86">        output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x_r_k"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_r_k</span>
<span id="cb4-87">        output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logits_m_r_k"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logits_m_r_k</span>
<span id="cb4-88">        output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x_tilde"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (log_m_k.exp() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_r_k).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-89">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output</span>
<span id="cb4-90">    </span>
<span id="cb4-91">    </span>
<span id="cb4-92">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########################################</span></span>
<span id="cb4-93">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#########  TRAINING FUNCTIONS  #########</span></span>
<span id="cb4-94">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########################################</span></span>
<span id="cb4-95"></span>
<span id="cb4-96">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> training_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, batch, batch_idx):</span>
<span id="cb4-97">        x, labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># labels are not used here (unsupervised)</span></span>
<span id="cb4-98">        output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_slots_train)        </span>
<span id="cb4-99">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">############ NLL \sum_k m_k log p(x_k) #############################</span></span>
<span id="cb4-100">        NLL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb4-101">            output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_m_k"</span>].exp() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> </span>
<span id="cb4-102">            (((x.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x_r_k"</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.var)))</span>
<span id="cb4-103">        ).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb4-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute KL divergence of latent space (component VAE) per batch</span></span>
<span id="cb4-105">        KL_div_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (</span>
<span id="cb4-106">            <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_var_z_k"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu_z_k"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> </span>
<span id="cb4-107">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_var_z_k"</span>].exp()</span>
<span id="cb4-108">        ).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb4-109">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute KL divergence between masks</span></span>
<span id="cb4-110">        log_m_r_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"logits_m_r_k"</span>].log_softmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-111">        KL_div_masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_m_k"</span>].exp() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_m_k"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> log_m_r_k)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(</span>
<span id="cb4-112">            axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb4-113">        )</span>
<span id="cb4-114">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute loss</span></span>
<span id="cb4-115">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (NLL.mean() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.beta <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> KL_div_VAE.mean() </span>
<span id="cb4-116">                <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gamma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> KL_div_masks.mean())</span>
<span id="cb4-117">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># log results in TensorBoard</span></span>
<span id="cb4-118">        step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.global_step</span>
<span id="cb4-119">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.logger.experiment.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loss/NLL"</span>, NLL.mean(), step)</span>
<span id="cb4-120">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.logger.experiment.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loss/KL VAE"</span>, KL_div_VAE.mean(), step)</span>
<span id="cb4-121">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.logger.experiment.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loss/KL masks"</span>, KL_div_masks.mean(), step)</span>
<span id="cb4-122">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.logger.experiment.add_scalar(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loss/loss"</span>, loss, step)</span>
<span id="cb4-123">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"loss"</span>:loss, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: x}</span>
<span id="cb4-124"></span>
<span id="cb4-125">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> training_epoch_end(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, outputs):</span>
<span id="cb4-126">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""this function is called after each epoch"""</span></span>
<span id="cb4-127">        step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.current_epoch)</span>
<span id="cb4-128">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (step <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log_every_k_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-129">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># log some images, their segmentations and reconstructions</span></span>
<span id="cb4-130">            n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb4-131">            </span>
<span id="cb4-132">            last_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>]</span>
<span id="cb4-133">            i_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(last_x)), n_samples, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-134">            images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> last_x[i_samples]</span>
<span id="cb4-135">            </span>
<span id="cb4-136">            fig_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.plot_reconstructions_and_decompositions(images, </span>
<span id="cb4-137">                                                                   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_slots_train)</span>
<span id="cb4-138">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.logger.experiment.add_figure(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"image and reconstructions"</span>, </span>
<span id="cb4-139">                                              fig_rec, global_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>step)</span>
<span id="cb4-140">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb4-141">    </span>
<span id="cb4-142">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########################################</span></span>
<span id="cb4-143">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######### TRAINING SETUP HOOKS #########</span></span>
<span id="cb4-144">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########################################</span></span>
<span id="cb4-145"></span>
<span id="cb4-146">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> configure_optimizers(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-147">        optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.RMSprop(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.lr)</span>
<span id="cb4-148">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> optimizer</span>
<span id="cb4-149">    </span>
<span id="cb4-150">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-151">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> weight_init(m):</span>
<span id="cb4-152">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""initialize all bias to zero"""</span></span>
<span id="cb4-153">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(m, nn.Conv2d) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(m, nn.Linear):</span>
<span id="cb4-154">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> m.bias <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-155">                torch.nn.init.zeros_(m.bias)</span>
<span id="cb4-156">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb4-157">    </span>
<span id="cb4-158">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########################################</span></span>
<span id="cb4-159">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####### PLOT AND HELPER FUNCTIONS ######</span></span>
<span id="cb4-160">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########################################</span></span>
<span id="cb4-161"></span>
<span id="cb4-162">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-163">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> convert_masks_indices_to_mask_rgb(masks_ind, slots):</span>
<span id="cb4-164">        colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.cm.get_cmap(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hsv"</span>, slots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-165">        cmap_rgb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colors(np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, slots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span>
<span id="cb4-166">        masks_RGB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cmap_rgb[masks_ind].squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-167">        masks_RGB_tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.from_numpy(masks_RGB)</span>
<span id="cb4-168">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> masks_RGB_tensor</span>
<span id="cb4-169"></span>
<span id="cb4-170">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_reconstructions_and_decompositions(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, images, num_slots):</span>
<span id="cb4-171">        monet_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(images, num_slots)</span>
<span id="cb4-172">        batch_size, img_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> images.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb4-173">        </span>
<span id="cb4-174">        colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.cm.get_cmap(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hsv"</span>, num_slots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-175">        cmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colors(np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_slots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-176">        </span>
<span id="cb4-177">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get mask indices using argmax [batch_size, 1, 64, 64]</span></span>
<span id="cb4-178">        masks_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> monet_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_m_k"</span>].exp().argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).detach().cpu()</span>
<span id="cb4-179">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert into RGB values  [batch_size, 64, 64, 3]</span></span>
<span id="cb4-180">        masks_RGB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MONet.convert_masks_indices_to_mask_rgb(masks_ind, num_slots)              </span>
<span id="cb4-181">        fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb4-182">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(batch_size):</span>
<span id="cb4-183">            orig_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> images[counter]</span>
<span id="cb4-184">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data</span></span>
<span id="cb4-185">            plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num_slots, batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-186">            plt.imshow(transforms.ToPILImage()(orig_img))</span>
<span id="cb4-187">            plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-188">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reconstruction mixture</span></span>
<span id="cb4-189">            x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> monet_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x_tilde"</span>][counter].clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-190">            plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num_slots, batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-191">            plt.imshow(transforms.ToPILImage()(x_tilde))</span>
<span id="cb4-192">            plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-193">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># segmentation (binary) from attention network</span></span>
<span id="cb4-194">            plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num_slots, batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-195">            plt.imshow(masks_RGB[counter])</span>
<span id="cb4-196">            plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-197">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unmasked component reconstructions</span></span>
<span id="cb4-198">            x_r_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> monet_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x_r_k"</span>][counter].clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-199">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> slot <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_slots):</span>
<span id="cb4-200">                x_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_r_k[slot]</span>
<span id="cb4-201">                plot_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(slot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-202">                plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num_slots, batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, plot_idx)</span>
<span id="cb4-203">                plt.imshow(transforms.ToPILImage()(x_rec))</span>
<span id="cb4-204">                plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-205">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># annotation plots</span></span>
<span id="cb4-206">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num_slots, batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-207">        ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Data'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb4-208">                    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb4-209">        ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb4-210">        ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-211">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num_slots, batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-212">        ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reconstruction</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">mixture'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb4-213">                    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb4-214">        ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb4-215">        ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-216">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num_slots, batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-217">        ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Segmentation'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb4-218">                    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb4-219">        ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb4-220">        ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-221">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> slot <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_slots):</span>
<span id="cb4-222">            ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num_slots, batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb4-223">                             <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(slot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb4-224">            ax.annotate(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'S</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>slot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb4-225">                        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold'</span>,</span>
<span id="cb4-226">                        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cmap[slot])</span>
<span id="cb4-227">            ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb4-228">            ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-229">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fig</span>
<span id="cb4-230">    </span>
<span id="cb4-231">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_ComponentVAE_results(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, images, num_slots):</span>
<span id="cb4-232">        monet_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(images, num_slots)</span>
<span id="cb4-233">        x_r_k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> monet_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x_r_k"</span>]</span>
<span id="cb4-234">        masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> monet_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"log_m_k"</span>].exp()</span>
<span id="cb4-235">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get mask indices using argmax [batch_size, 1, 64, 64]</span></span>
<span id="cb4-236">        masks_ind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> masks.argmax(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).detach().cpu()</span>
<span id="cb4-237">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># convert into RGB values  [batch_size, 64, 64, 3]</span></span>
<span id="cb4-238">        masks_RGB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MONet.convert_masks_indices_to_mask_rgb(masks_ind, num_slots) </span>
<span id="cb4-239">        </span>
<span id="cb4-240">        colors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.cm.get_cmap(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'hsv'</span>, num_slots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-241">        cmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> colors(np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_slots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-242">        n_samples, img_channels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> images.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb4-243">        fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(constrained_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>))</span>
<span id="cb4-244">        grid_spec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_gridspec(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_samples, hspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb4-245">        </span>
<span id="cb4-246">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_samples):</span>
<span id="cb4-247">            orig_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> images[counter]</span>
<span id="cb4-248">            x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> monet_output[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x_tilde"</span>][counter].clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-249">            segmentation_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> masks_RGB[counter]</span>
<span id="cb4-250">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upper plot: Data, Reconstruction Mixture, Segmentation</span></span>
<span id="cb4-251">            upper_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_spec[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, counter].subgridspec(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-252">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> upper_plot_index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb4-253">                ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(upper_grid[upper_plot_index])</span>
<span id="cb4-254">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> upper_plot_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-255">                    plt.imshow(transforms.ToPILImage()(orig_img))</span>
<span id="cb4-256">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> upper_plot_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb4-257">                    plt.imshow(transforms.ToPILImage()(x_tilde))   </span>
<span id="cb4-258">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb4-259">                    plt.imshow(segmentation_mask)</span>
<span id="cb4-260">                plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-261">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># annotations</span></span>
<span id="cb4-262">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> upper_plot_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data</span></span>
<span id="cb4-263">                        ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Data'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb4-264">                                    xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb4-265">                                    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>,)</span>
<span id="cb4-266">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> upper_plot_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reconstruction mixture</span></span>
<span id="cb4-267">                        ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Reconstruction</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">mixture'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb4-268">                                     va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>,</span>
<span id="cb4-269">                                     xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb4-270">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Segmentation</span></span>
<span id="cb4-271">                        ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Segmentation'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>,</span>
<span id="cb4-272">                                     xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb4-273">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lower plot: Component VAE reconstructions</span></span>
<span id="cb4-274">            lower_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> grid_spec[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, counter].subgridspec(num_slots, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, </span>
<span id="cb4-275">                                                           wspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, hspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>)</span>
<span id="cb4-276">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row_index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_slots):</span>
<span id="cb4-277">                x_slot_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_r_k[counter][row_index]</span>
<span id="cb4-278">                m_slot_r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> masks[counter][row_index]</span>
<span id="cb4-279">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col_index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb4-280">                    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(lower_grid[row_index, col_index])</span>
<span id="cb4-281">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> col_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unmasked</span></span>
<span id="cb4-282">                        plt.imshow(transforms.ToPILImage()(x_slot_r.clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb4-283">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> row_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-284">                            plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unmasked'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb4-285">                        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-286">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># masked</span></span>
<span id="cb4-287">                        masked <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> m_slot_r)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>torch.ones_like(x_slot_r) </span>
<span id="cb4-288">                                  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> m_slot_r<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x_slot_r)</span>
<span id="cb4-289">                        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#masked = m_slot_r*x_slot_r</span></span>
<span id="cb4-290">                        plt.imshow(transforms.ToPILImage()(masked.clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)))</span>
<span id="cb4-291">                        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> row_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb4-292">                            plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Masked'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>)</span>
<span id="cb4-293">                        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-294">                    ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb4-295">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> col_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># annotations</span></span>
<span id="cb4-296">                        ax.annotate(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'S</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>row_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), </span>
<span id="cb4-297">                                    xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb4-298">                                    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, weight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold'</span>,</span>
<span id="cb4-299">                                    color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cmap[row_index])</span>
<span id="cb4-300">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb4-301">                                   </span>
<span id="cb4-302">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########################################</span></span>
<span id="cb4-303">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########## DATA RELATED HOOKS ##########</span></span>
<span id="cb4-304">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########################################</span></span>
<span id="cb4-305"></span>
<span id="cb4-306">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> prepare_data(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb4-307">        n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.n_samples</span>
<span id="cb4-308">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_dataset(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n_samples)</span>
<span id="cb4-309">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb4-310"></span>
<span id="cb4-311">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_dataloader(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-312">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> DataLoader(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.batch_size, </span>
<span id="cb4-313">                          num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<ul>
<li><strong>Training Procedure</strong>: <a href="https://arxiv.org/abs/1901.11390">Burgess et al. (2019)</a> chose <code>RMSProp</code> for the optimization with a learning rate of <code>0.0001</code> and a batch size of <code>64</code>, see Appendix B.3. Thanks to the <a href="https://pytorch-lightning.readthedocs.io/en/latest/">PyTorch-Lightning</a> framework, these paramters are already defined in the model and we can easily integrate tensorboard into our training procedure:</li>
</ul>
<div class="cell" data-execution_count="6">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pytorch_lightning <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seed_everything</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pytorch_lightning.loggers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TensorBoardLogger</span>
<span id="cb5-3"></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train(n_samples, num_epochs, SEED<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-6">    seed_everything(SEED)</span>
<span id="cb5-7"></span>
<span id="cb5-8">    monet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MONet(n_samples)</span>
<span id="cb5-9">    logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TensorBoardLogger(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./results'</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SimplifiedMultiSprites"</span>)</span>
<span id="cb5-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize pytorch lightning trainer</span></span>
<span id="cb5-11">    num_gpus <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-12">    trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.Trainer(</span>
<span id="cb5-13">        deterministic<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-14">        gpus<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_gpus,</span>
<span id="cb5-15">        track_grad_norm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb5-16">        gradient_clip_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># don't clip</span></span>
<span id="cb5-17">        max_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_epochs,</span>
<span id="cb5-18">        progress_bar_refresh_rate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb5-19">        logger<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logger,</span>
<span id="cb5-20">    )</span>
<span id="cb5-21">     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># train model</span></span>
<span id="cb5-22">    trainer.fit(monet)</span>
<span id="cb5-23">    trained_monet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> monet</span>
<span id="cb5-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> trained_monet</span>
<span id="cb5-25"></span>
<span id="cb5-26">trained_monet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>, num_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/multi-object_network/img/MONET_train.png" title="Training" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Training</figcaption>
</figure>
</div>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>The following visualization are inspired by Figure 3 and 7 of <a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a> and mainly serve to evaluate the representation quality of the trained model.</p>
<ul>
<li><p><strong>MONet Reconstructions and Decompositions</strong>: The most intuitive visualization is to show some (arbitrarly chosen) fully reconstructed images (i.e, <code>Reconstruction mixture</code> <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%20=%20%5Csum_%7Bk=1%7D%5EK%20%5Ctextbf%7Bm%7D_k%20%5Codot%20%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D_k">) compared to the original input <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> (<code>Data</code>) together with the learned segmentation masks (i.e., <code>Segmentation</code> <img src="https://latex.codecogs.com/png.latex?%5C%7B%20%5Ctextbf%7Bm%7D_k%20%5C%7D">) of the attention network. Note that in order to visualize the segmentations in one plot, we cast the attenion masks into binary attention masks by applying <code>arg max</code> pixel-wise over all <img src="https://latex.codecogs.com/png.latex?K"> attention masks. In addition, all umasked component VAE reconstructions (i.e., <code>S(k)</code> <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D_k">) are shown, see figure below.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/multi-object_network/img/reconstruction_and_decompositions.png" title="MONet Reconstructions and Decompositions" class="img-fluid" alt="MONet Reconstruction and Decompositions"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Figure 7 of</strong> <a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a>: Each example shows the image fed as input data to the model, with corresponding outputs from the model. Reconstruction mixtures show sum of components from all slots, weighted by the learned masks from the attention network. Colour-coded segmentation maps summarize the attention masks <img src="https://latex.codecogs.com/png.latex?%5C%7B%5Ctextbf%7Bm%7D_k%20%5C%7D">. Rows labeld S1-5 show the reconstruction components of each slot.</td>
</tr>
</tbody>
</table></li>
</ul>
<div class="cell" data-execution_count="7">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_monet.train_dataloader()</span>
<span id="cb6-2">random_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(dataloader))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-3">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_monet.plot_reconstructions_and_decompositions(batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/multi-object_network/img/MONET_rec.png" title="Reconstructions and Decompositions" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">MONet Reconstructions and Decompositions after Train</figcaption>
</figure>
</div>
<ul>
<li><p><strong>Component VAE Results</strong>: In order to evaluate the perfomance of the component VAE, we are interested in the unmasked slot-wise reconstructions (i.e., <code>unmasked</code> refers to <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D_k"> for each slot <img src="https://latex.codecogs.com/png.latex?k">) and the slot-wise reconstructions masked by the VAE’s reconstructed masks (i.e., <code>masked</code> refers to <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_k%20%5Codot%20%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D_k">). Ideally, masked versions capture either a single object, the background or nothing at all (representing no object), see figure below. In addition, we are going to plot the ground truth masked reconstructions (i.e., <code>gt masked</code> refers to <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_k%20%5Codot%20%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D_k">) such that the difference between <code>gt masked</code> and <code>masked</code> indicates the reconstruction error of the attention masks.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/multi-object_network/img/component_VAE_results.png" title="Component VAE Results" class="img-fluid" alt="Component VAE Results"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Figure 3 of</strong> <a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a>: Each example shows the image fet as input data to the model, with corresponding outputs from the model. Reconstruction mixtures show sum of components from all slots, weighted by the learned masks from the attention network. Color-coded segmentation maps summarise the attention masks <img src="https://latex.codecogs.com/png.latex?%5C%7B%5Ctextbf%7Bm%7D_k%5C%7D">. Rows labeled S1-7 show the reconstruction components of each slot. Unmasked version are shown side-by-side with corresponding versions that are masked with the VAE’s reconstructed masks <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bm%7D%7D_k">.</td>
</tr>
</tbody>
</table></li>
</ul>
<div class="cell" data-execution_count="8">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_monet.train_dataloader()</span>
<span id="cb7-2">random_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(dataloader))[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-3">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_monet.plot_ComponentVAE_results(batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/multi-object_network/img/MONET_CompVAE.png" title="MONet Component VAE" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">MONet Component VAE</figcaption>
</figure>
</div>
</section>
</section>
<section id="drawbacks-of-paper" class="level2">
<h2 class="anchored" data-anchor-id="drawbacks-of-paper">Drawbacks of Paper</h2>
<ul>
<li>deterministic attention mechanism implying that objective function is not a valid lower bound on the marginal likelihood (as mentioned by <a href="https://arxiv.org/abs/1907.13052">Engelcke et al.&nbsp;(2020)</a>)</li>
<li>image generation suffers from discrepancy between inferred and reconstructed masks <!-- * only works on simple images in which multiple objects of the same class occur --> <!-- * even simple images require high training times --></li>
<li>lots of hyperparameters (network architectures, <img src="https://latex.codecogs.com/png.latex?%5Cbeta">, <img src="https://latex.codecogs.com/png.latex?%5Cgamma">, optimization)</li>
</ul>
</section>
<section id="acknowledgment" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgment">Acknowledgment</h2>
<p>There are a lot of implementations out there that helped me very much in understanding the paper:</p>
<ul>
<li><a href="https://github.com/baudm/MONet-pytorch">Darwin Bautista’s implementation</a> includes derivation of the NLL (which in the end, I did not use for simplicity).</li>
<li><a href="https://github.com/stelzner/monet/">Karl Stelzner’s implementation</a> is kept more simplisitic and is therefore easier to understand.</li>
<li><a href="https://github.com/applied-ai-lab/genesis">Martin Engelcke, Claas Voelcker and Max Morrison</a> included an implementation of MONet in the Genesis repository.</li>
</ul>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Encoding each segment through the same VAE can be understood as an architectural prior on common structure within individual objects.↩︎</p></li>
<li id="fn2"><p><a href="https://arxiv.org/abs/1901.11390">Burgess et al.&nbsp;(2019)</a> do not explain why the Component VAE should also model the attention masks. Note however that this allows for better generalization, e.g., shape/class variation depends on attention mask.↩︎</p></li>
<li id="fn3"><p>For completeness <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bc%7D%20%5Cin%20%5C%7B1,%20%5Cdots,%20K%5C%7D"> denotes a categorical variable to indicate the probability that pixels belong to a particular component <img src="https://latex.codecogs.com/png.latex?k">, i.e., <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D_k%20=%20p(%5Ctextbf%7Bc%7D%20=%20k)">.↩︎</p></li>
<li id="fn4"><p>Philosophical note: Humans also tend to work better when focusing on one task at a time.↩︎</p></li>
<li id="fn5"><p>This is explained in more detail in my <a href="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes">VAE</a> post. For simplicity, we are setting the number of (noise variable) samples <img src="https://latex.codecogs.com/png.latex?L"> per datapoint to 1 (see equation <img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D"> in <a href="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes#model-description"><em>Reparametrization Trick</em></a> paragraph). Note that <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a> stated that in their experiments setting <img src="https://latex.codecogs.com/png.latex?L=1"> sufficed as long as the minibatch size was large enough.↩︎</p></li>
<li id="fn6"><p>Note that concatenation of masks leads to a three dimensional tensor.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>reimplementation</category>
  <category>unsupervised</category>
  <category>VAE</category>
  <guid>https://borea17.github.io/paper_summaries/multi-object_network/index.html</guid>
  <pubDate>Fri, 26 Mar 2021 23:00:00 GMT</pubDate>
</item>
<item>
  <title>The Concrete Distribution: A Continuous Relaxation of Discrete Random Variables</title>
  <dc:creator>borea17 </dc:creator>
  <link>https://borea17.github.io/paper_summaries/concrete_distribution/index.html</link>
  <description><![CDATA[ 




<p><a href="https://arxiv.org/abs/1611.00712">Maddison et al.&nbsp;(2016)</a> introduce <strong>CON</strong>tinuous relaxations of dis<strong>CRETE</strong> (<strong>concrete</strong>) random variables as an approximation to discrete variables. The <strong>Concrete distribution</strong> is motivated by the fact that backpropagation through discrete random variables is not directly possible. While for continuous random variables, the <strong>reparametrization trick</strong> is applicable to allow gradients to flow through a sampling operation, this does not work for discrete variables due to the discontinuous operations associated to their sampling. The <strong>concrete distribution</strong> allows for a simple reparametrization through which gradients can propagate such that a low-variance biased gradient estimator of the discrete path can be obtained.</p>
<section id="model-description" class="level2">
<h2 class="anchored" data-anchor-id="model-description">Model Description</h2>
<p>The <strong>Concrete distribution</strong> builds upon the (very old) <strong>Gumbel-Max trick</strong> that allows for a reparametrization of a categorical distribution into a deterministic function over the distribution parameters and an auxiliary noise distribution. The problem within this reparameterization is that it relies on an <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bargmax%7D">-operation such that backpropagation remains out of reach. Therefore, <a href="https://arxiv.org/abs/1611.00712">Maddison et al.&nbsp;(2016)</a> propose to use the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bsoftmax%7D">-operation as a continuous relaxation of the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bargmax%7D">. This idea has been concurrently developed at the same time by <a href="https://arxiv.org/abs/1611.01144">Jang et al. (2016)</a> who called it the <strong>Gumbel-Softmax trick</strong>.</p>
<section id="gumbel-max-trick" class="level3">
<h3 class="anchored" data-anchor-id="gumbel-max-trick">Gumbel-Max Trick</h3>
<p>The Gumbel-Max trick basically refactors sampling of a deterministic random variable into a component-wise addition of the discrete distribution parameters and an auxiliary noise followed by <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bargmax%7D">, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Ctext%7BSampling%20%7D&amp;z%20%5Csim%20%5Ctext%7BCat%7D%20%5Cleft(%5Calpha_1,%20%5Cdots,%20%5Calpha_N%20%5Cright)%0A%5Ctext%7B%20can%20equally%20expressed%20as%20%7D%20z%20=%20%5Carg%5Cmax_%7Bk%7D%20%5CBig(%5Clog%5Calpha_k%20+%20G_k%5CBig)%5C%5C%0A&amp;%5Ctext%7Bwith%20%7D%20G_k%20%5Csim%20%5Ctext%7BGumbel%20Distribution%7D%5Cleft(%5Cmu=0,%20%5Cbeta=1%20%5Cright)%0A%5Cend%7Balign%7D%0A"></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/concrete_distribution/img/Gumble_Max.png" title="Gumble Max" class="img-fluid" alt="Gumble Max"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>Computational Graph Gumbel-Max Trick</strong>. Taken from <a href="https://arxiv.org/abs/1611.00712">Maddison et al.&nbsp;(2016)</a>.</td>
</tr>
</tbody>
</table>
<p><strong>Derivation</strong>: Let’s take a closer look on how and why that works. Firstly, we show that samples from <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BCat%7D%20%5Cleft(%5Calpha_1,%20%5Cdots,%20%5Calpha_N%20%5Cright)"> are equally distributed to</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Az%20=%20%5Carg%20%5Cmin_%7Bk%7D%20%5Cfrac%20%7B%5Cepsilon_k%7D%7B%5Calpha_k%7D%20%5Cquad%20%5Ctext%7Bwith%7D%20%5Cquad%0A%5Cepsilon_k%20%5Csim%20%5Ctext%7BExp%7D%5Cleft(%201%20%5Cright)%0A"></p>
<p>Therefore, we observe that each term inside the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bargmin%7D"> is independent exponentially distributed with (<a href="https://math.stackexchange.com/a/85578">easy proof</a>)</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%7B%5Cepsilon_k%7D%7B%5Calpha_k%7D%20%5Csim%20%20%5Ctext%7BExp%7D%20%5CBig(%20%5Calpha_k%20%5CBig)%0A"></p>
<p>The next step is to show that the index of the variable which achieves the minimum is distributed according to the categorical distribution (<a href="https://en.wikipedia.org/wiki/Exponential_distribution#Distribution_of_the_minimum_of_exponential_random_variables">easy proof</a>)</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Carg%20%5Cmin_%7Bk%7D%20%5Cfrac%20%7B%5Cepsilon_k%7D%7B%5Calpha_k%7D%20=%20P%20%5Cleft(%20k%20%7C%20z_k%20=%20%5Cmin%20%5C%7B%20z_1,%20%5Cdots,%20z_N%20%5C%7D%20%5Cright)%20=%20%5Cfrac%0A%7B%5Calpha_k%7D%7B%5Csum_%7Bi=1%7D%5EN%20%5Calpha_i%7D%0A"></p>
<p>A nice feature of this formulation is that the categorical distribution parameters <img src="https://latex.codecogs.com/png.latex?%5C%7B%5Calpha_i%5C%7D_%7Bi=1%7D%5EN"> do not need to be normalized before reparameterization as normalization is ensured by the factorization itself. Lastly, we simply reformulate this mapping by applying the log and multiplying by minus 1</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Az%20=%20%5Carg%20%5Cmin_%7Bk%7D%20%5Cfrac%20%7B%5Cepsilon_k%7D%7B%5Calpha_k%7D%20=%5Carg%20%5Cmin_k%20%5CBig(%5Clog%20%5Cepsilon_k%20-%0A%5Clog%20%5Calpha_k%20%5CBig)%20=%20%5Carg%20%5Cmax_k%20%5CBig(%5Clog%20%5Calpha_k%20%20-%20%5Clog%20%5Cepsilon_k%5CBig)%0A"></p>
<p>This looks already very close to the <strong>Gumbel-Max trick</strong> defined above. Remind that to generate exponential distributed random variables, we can simply transform uniformly distributed samples of the unit interval as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cepsilon_k%20=%20-%5Clog%20u_k%20%5Cquad%20%5Ctext%7Bwith%7D%20%5Cquad%20u_k%20%5Csim%0A%5Ctext%7BUniform%20Distribution%7D%20%5CBig(0,%201%5CBig)%0A"></p>
<p>Thus, we get that</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A-%20%5Clog%20%5Cepsilon_k%20=%20-%20%5Clog%20%5CBig(%20-%20%5Clog%20u_k%20%5CBig)%20=%20G_k%20%5Csim%0A%5Ctext%7BGumbel%20Distribution%7D%20%5CBig(%20%5Cmu=0,%20%5Cbeta=1%20%5CBig)%0A"></p>
</section>
<section id="gumbel-softmax-trick" class="level3">
<h3 class="anchored" data-anchor-id="gumbel-softmax-trick">Gumbel-Softmax Trick</h3>
<p>The problem in the <strong>Gumbel-Max trick</strong> is the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bargmax%7D">-operation as the derivative of <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bargmax%7D"> is 0 everywhere except at the boundary of state changes, where it is undefined. Thus, <a href="https://arxiv.org/abs/1611.00712">Maddison et al. (2016)</a> use the temperature-valued <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BSoftmax%7D"> as a continuous relaxation of the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bargmax%7D"> computation such that</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Ctext%7BSampling%20%7D&amp;z%20%5Csim%20%5Ctext%7BCat%7D%20%5Cleft(%5Calpha_1,%20%5Cdots,%20%5Calpha_N%20%5Cright)%0A%5Ctext%7B%20is%20relaxed%20cont.%20to%20%7D%20z_k%20=%20%5Cfrac%20%7B%5Cexp%20%5Cleft(%20%5Cfrac%20%7B%5Clog%20%5Calpha_k%20+%20G_k%7D%7B%5Clambda%7D%20%5Cright)%7D%0A%7B%5Csum_%7Bi=1%7D%5EN%20%5Cexp%20%5Cleft(%20%5Cfrac%20%7B%5Clog%20%5Calpha_i%20+%20G_i%7D%7B%5Clambda%7D%20%5Cright)%7D%5C%5C%0A&amp;%5Ctext%7Bwith%20%7D%20G_k%20%5Csim%20%5Ctext%7BGumbel%20Distribution%7D%5Cleft(%5Cmu=0,%20%5Cbeta=1%20%5Cright)%0A%5Cend%7Balign%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Cin%20%5B0,%20%5Cinfty%5B"> is the temperature and <img src="https://latex.codecogs.com/png.latex?%5Calpha_k%20%5Cin%20%5B0,%20%5Cinfty%5B"> are the categorical distribution parameters. The temperature can be understood as a hyperparameter that controls the <em>sharpness</em> of the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bsoftmax%7D">, i.e., how much the <em>winner-takes-all</em> dynamics of the softmax is taken:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Crightarrow%200">: <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bsoftmax%7D"> smoothly approaches discrete <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bargmax%7D"> computation</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Crightarrow%20%5Cinfty">: <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bsoftmax%7D"> leads to uniform distribution.</li>
</ul>
<p>Note that the samples <img src="https://latex.codecogs.com/png.latex?z_k"> obtained by this reparameterization follow a new family of distributions, the <strong>Concrete distribution</strong>. Thus, <img src="https://latex.codecogs.com/png.latex?z_k"> are called <strong>Concrete random variables</strong>.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/concrete_distribution/img/Gumble_Softmax.png" title="Gumble Softmax" class="img-fluid" alt="Gumble Softmax"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>Computational Graph Gumbel-Softmax Trick</strong>. Taken from <a href="https://arxiv.org/abs/1611.00712">Maddison et al.&nbsp;(2016)</a>.</td>
</tr>
</tbody>
</table>
<p><strong>Intuition</strong>: To better understand the relationship between the <em>Concrete</em> distribution and the <em>discrete categorical</em> distribution, let’s look on an exemplary result. Remind that the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bargmax%7D"> operation for a <img src="https://latex.codecogs.com/png.latex?n">-dimensional categorical distribution returns states on the vertices of the simplex</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cboldsymbol%7B%5CDelta%7D%5E%7Bn-1%7D%20=%20%5Cleft%5C%7B%20%5Ctextbf%7Bx%7D%5Cin%20%5C%7B0,%201%5C%7D%5En%20%5Cmid%20%5Csum_%7Bk=1%7D%5En%20x_k%20=%201%20%5Cright%5C%7D%0A"></p>
<p>Concrete random variables are relaxed to return states in the interior of the simplex</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cwidetilde%7B%5Cboldsymbol%7B%5CDelta%7D%7D%5E%7Bn-1%7D%20=%20%5Cleft%5C%7B%20%5Ctextbf%7Bx%7D%5Cin%20%5B0,%201%5D%5En%20%5Cmid%20%5Csum_%7Bk=1%7D%5En%20x_k%20=%201%20%5Cright%5C%7D%0A"></p>
<p>The image below shows how the distribution of concrete random variables changes for an exemplary discrete categorical distribution <img src="https://latex.codecogs.com/png.latex?(%5Calpha_1,%20%5Calpha_2,%20%5Calpha_3)%20=%20(2,%200.5,%201)"> and different temperatures <img src="https://latex.codecogs.com/png.latex?%5Clambda">.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/concrete_distribution/img/simplex.png" title="Relationship between Concrete and Discrete Variables" class="img-fluid" alt="Relationship between Concrete and Discrete Variables"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Relationship between Concrete and Discrete Variables</strong>: A discrete distribution with unnormalized probabilities <img src="https://latex.codecogs.com/png.latex?(%5Calpha_1,%20%5Calpha_2,%20%5Calpha_3)%20=%20(2,%200.5,%201)"> and three corresponding <strong>Concrete densities</strong> at increasing temperatures <img src="https://latex.codecogs.com/png.latex?%5Clambda">.<br> Taken from <a href="https://arxiv.org/abs/1611.00712">Maddison et al.&nbsp;(2016)</a>.</td>
</tr>
</tbody>
</table>
</section>
<section id="concrete-distribution" class="level3">
<h3 class="anchored" data-anchor-id="concrete-distribution">Concrete Distribution</h3>
<p>While the Gumbel-Softmax trick defines how to obtain samples from a <strong>Concrete distribution</strong>, <a href="https://arxiv.org/abs/1611.00712">Maddison et al.&nbsp;(2016)</a> provide a definition of its density and prove some nice properties:</p>
<p><strong>Definition</strong>: The <strong>Concrete distribution</strong> <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BX%7D%20%5Csim%20%5Ctext%7BConcrete%7D(%5Cboldsymbol%7B%5Calpha%7D,%20%5Clambda)"> with temperature <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Cin%20%5B0,%20%5Cinfty%5B"> and location <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Calpha%7D%20=%20%5Cbegin%7Bbmatrix%7D%20%5Calpha_1%20&amp;%20%5Cdots%20&amp;%20%5Calpha_n%20%5Cend%7Bbmatrix%7D%20%5Cin%20%5B0,%20%5Cinfty%5D%5E%7Bn%7D"> has a density</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20p_%7B%5Cboldsymbol%7B%5Calpha%7D,%20%5Clambda%7D%20(%5Ctextbf%7Bx%7D)%20=%20(n-1)!%20%5Clambda%5E%7Bn-1%7D%20%5Cprod_%7Bk=1%7D%5En%0A%20%20%5Cleft(%20%5Cfrac%20%7B%5Calpha_k%20x_k%5E%7B-%5Clambda%20-%201%7D%7D%20%7B%5Csum_%7Bi=1%7D%5En%20%5Calpha_i%20x_i%5E%7B-%5Clambda%7D%7D%20%5Cright)%0A"></p>
<p><strong>Nice Properties and their Implications</strong>:</p>
<ol type="1">
<li><p><em>Reparametrization</em>: Instead of sampling directly from the Concrete distribution, one can obtain samples by the following deterministic (<img src="https://latex.codecogs.com/png.latex?d">) reparametrization</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AX_k%20%5Cstackrel%7Bd%7D%7B=%7D%20%5Cfrac%20%7B%5Cexp%20%5Cleft(%20%5Cfrac%20%7B%5Clog%20%5Calpha_k%20+%20G_k%7D%7B%5Clambda%7D%20%5Cright)%7D%0A%7B%5Csum_%7Bi=1%7D%5EN%20%5Cexp%20%5Cleft(%20%5Cfrac%20%7B%5Clog%20%5Calpha_i%20+%20G_i%7D%7B%5Clambda%7D%20%5Cright)%7D%20%5Cquad%0A%5Ctext%7Bwith%7D%20%5Cquad%20G_k%20%5Csim%20%5Ctext%7BGumbel%7D(0,%201)%0A"></p>
<p>This property ensures that we can easily compute unbiased low-variance gradients w.r.t. the location parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Calpha%7D"> of the Concrete distribution.</p></li>
<li><p><em>Rounding</em>: Rounding a Concrete random variable results in the discrete random variable whose distribution is described by the logits <img src="https://latex.codecogs.com/png.latex?%5Clog%20%5Calpha_k"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0AP%20(%5Ctext%7BX%7D_k%20%3E%20%5Ctext%7BX%7D_i%20%5Ctext%7B%20for%20%7D%20i%5Cneq%20k)%20=%20%5Cfrac%20%7B%5Calpha_k%7D%7B%5Csum_%7Bi=1%7D%5En%20%5Calpha_i%7D%0A"></p>
<p>This property again indicates the close relationship between concrete and discrete distributions.</p></li>
<li><p><em>Convex eventually</em>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BIf%20%7D%20%5Clambda%20%5Cle%20%5Cfrac%20%7B1%7D%7Bn-1%7D,%20%5Ctext%7B%20then%20%7D%20p_%7B%5Cboldsymbol%7B%5Calpha%7D,%0A%5Clambda%7D%20%5Ctext%7B%20is%20log-convex%20in%20%7D%20x%0A"></p>
<p>This property basically tells us if <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is small enough, there are no modes in the interior of the probability simplex.</p></li>
</ol>
</section>
<section id="discrete-latent-vae" class="level3">
<h3 class="anchored" data-anchor-id="discrete-latent-vae">Discrete-Latent VAE</h3>
<p>One use-case of the <strong>Concrete distribution</strong> and its reparameterization is the training of an variational autoencoder (VAE) with a discrete latent space. The main idea is to use the Concrete distribution during training and use discrete sampled latent variables at test-time. An obvious limitation of this approach is that during training non-discrete samples are returned such that our model needs to be able to handle continuous variables<sup>1</sup>. Let’s dive into the <strong>discrete-latent VAE</strong> described by <a href="https://arxiv.org/abs/1611.00712">Maddison et al. (2016)</a>.</p>
<p>We assume that we have a dataset <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D%20=%20%5C%7B%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5C%7D_%7Bi=1%7D%5EN"> of <img src="https://latex.codecogs.com/png.latex?N"> i.i.d. samples <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> which were generated by the following process:</p>
<ol type="1">
<li>We sample a <em>one-hot</em> latent vector <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bd%7D%5Cin%5C%7B0,%201%5C%7D%5E%7BK%7D"> from a categorical prior distribution <img src="https://latex.codecogs.com/png.latex?P_%7B%5Cboldsymbol%7Ba%7D%7D%20(%5Ctextbf%7Bd%7D)">.</li>
<li>We use our sample <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bd%7D%5E%7B(i)%7D"> and put it into the <strong>scene model</strong> <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D(%5Ctextbf%7Bx%7D%7C%5Ctextbf%7Bd%7D)"> from which we sample to generate the observed image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D">.</li>
</ol>
<p>As a result, the marginal likelihood of an image can be stated as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7Ba%7D%7D%20(%5Ctextbf%7Bx%7D)%20=%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bd%7D%0A%5Csim%20P_%7B%5Cboldsymbol%7Ba%7D%7D(%5Ctextbf%7Bd%7D)%7D%20%5CBig%5B%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bx%7D%20%7C%0A%5Ctextbf%7Bd%7D)%20%5CBig%5D%20=%20%5Csum%20P_%7B%5Cboldsymbol%7Ba%7D%7D%20%5Cleft(%5Ctextbf%7Bd%7D%5E%7B(i)%7D%20%5Cright)%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%20%7C%0A%5Ctextbf%7Bd%7D%5E%7B(i)%7D%20%5Cright),%0A"></p>
<p>where the sum is over all possible <img src="https://latex.codecogs.com/png.latex?K"> dimensional one-hot vectors. In order to recover this generative process, we introduce a variational approximation <img src="https://latex.codecogs.com/png.latex?Q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20(%5Ctextbf%7Bd%7D%7C%5Ctextbf%7Bx%7D)"> of the true, but unknown posterior. Now we exchange the sampling distribution towards this approximation</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7Ba%7D%7D%20(%5Ctextbf%7Bx%7D)%20=%20%5Csum%0A%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7Ba%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bd%7D%5E%7B(i)%7D%0A%5Cright)%7D%7BQ_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bd%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bx%7D%5Cright)%7D%0AQ_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bd%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bx%7D%5Cright)%20=%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bd%7D%20%5Csim%20%20Q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bd%7D%20%7C%0A%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cleft%5B%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7Ba%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bd%7D%0A%5Cright)%7D%7BQ_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bd%7D%20%7C%20%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cright%5D%0A"></p>
<p>Lastly, applying Jensen’s inequality on the log-likelihood leads to the evidence lower bound (ELBO) objective of VAEs</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7Ba%7D%7D%20(%5Ctextbf%7Bx%7D)%20=%0A%5Clog%20%5Cleft(%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bd%7D%20%5Csim%20%20Q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bd%7D%20%7C%0A%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cleft%5B%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7Ba%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bd%7D%0A%5Cright)%7D%7BQ_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bd%7D%20%7C%20%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cright%5D%5Cright)%0A%5Cge%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bd%7D%20%5Csim%20%20Q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bd%7D%20%7C%0A%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cleft%5B%20%5Clog%20%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7Ba%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bd%7D%0A%5Cright)%7D%7BQ_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bd%7D%20%7C%20%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cright%5D%0A=%20%5Cmathcal%7BL%7D%5E%7B%5Ctext%7BELBO%7D%7D%0A"></p>
<p>While we are able to compute this objective, we cannot simply optimize it using standard automatic differentiation (AD) due to the discrete sampling operations. The <strong>concrete distribution comes to rescue</strong>: <a href="https://arxiv.org/abs/1611.00712">Maddison et al. (2016)</a> propose to relax the terms <img src="https://latex.codecogs.com/png.latex?P_%7B%5Cboldsymbol%7Ba%7D%7D(%5Ctextbf%7Bd%7D)"> and <img src="https://latex.codecogs.com/png.latex?Q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D(%5Ctextbf%7Bd%7D%7C%5Ctextbf%7Bx%7D)"> using concrete distributions instead, leading to the relaxed objective</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%5E%7B%5Ctext%7BELBO%7D%7D=%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bd%7D%20%5Csim%20%20Q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bd%7D%20%7C%0A%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cleft%5B%20%5Clog%20%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%7C%20%5Ctextbf%7Bd%7D%0A%5Cright)%20P_%7B%5Cboldsymbol%7Ba%7D%7D%20(%5Ctextbf%7Bd%7D)%20%7D%7BQ_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bd%7D%20%7C%20%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cright%5D%0A%5Cstackrel%7B%5Ctext%7Brelax%7D%7D%7B%5Crightarrow%7D%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%20%20q_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Clambda_1%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cleft%5B%20%5Clog%20%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%7C%20%5Ctextbf%7Bz%7D%0A%5Cright)%20p_%7B%5Cboldsymbol%7Ba%7D,%20%5Clambda_2%7D%20(%5Ctextbf%7Bz%7D)%20%7D%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Clambda_1%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cright%5D%0A"></p>
<p>Then, during training we optimize the relaxed objective while during test time we evaluate the original objective including discrete sampling operations. The really neat thing here is that switching between the two modes works out of the box: we only need to switch between the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bsoftmax%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bargmax%7D"> operations.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/concrete_distribution/img/discrete_VAE.png" title="Discrete-Latent VAE Architecture" class="img-fluid" alt="Discrete-Latent VAE Architecture"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>Discrete-Latent VAE Architecture</strong></td>
</tr>
</tbody>
</table>
<p><strong>Things to beware of</strong>: <a href="https://arxiv.org/abs/1611.00712">Maddison et al. (2016)</a> noted that <code>naively implementing [the relaxed objective] will result in numerical issues</code>. Therefore, they give some implementation hints in Appendix C:</p>
<ul>
<li><p><strong>Log-Probabilties of Concrete Variables can suffer from underflow</strong>: Let’s investigate why this might happen. The log-likelihood of a concrete variable <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D"> is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Calpha%7D,%20%5Clambda%7D%20(%5Ctextbf%7Bz%7D)%20=&amp;%20%5Clog%20%5CBig((K-1)!%20%5CBig)%20+%20(K-1)%20%5Clog%20%5Clambda%0A%20%20+%20%5Cleft(%5Csum_%7Bi=1%7D%5EK%20%20%5Clog%20%5Calpha_i%20+%20(-%5Clambda%20-%201)%20%5Clog%20%20z_i%20%5Cright)%20%5C%5C%0A%20%20%20&amp;-%20K%20%5Clog%20%5Cleft(%5Csum_%7Bi=1%7D%5EK%20%5Cexp%5Cleft(%20%5Clog%20%5Calpha_i%20-%20%5Clambda%20%5Clog%20z_i%5Cright)%5Cright)%0A%5Cend%7Balign%7D%0A"></p>
<p>Now let’s remind that concrete variables are pushing towards one-hot vectors (when <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is set accordingly), i.e., due to rounding/underflow we might get some <img src="https://latex.codecogs.com/png.latex?z_i=0">. This is problematic, since the <img src="https://latex.codecogs.com/png.latex?%5Clog"> is not defined in this case.</p>
<p>To circumvent this, <a href="https://arxiv.org/abs/1611.00712">Maddison et al.&nbsp;(2016)</a> propose to work with Concrete random variables in log-space, i.e., to use the following reparameterization</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay_i%20=%20%5Cfrac%20%7B%5Clog%20%5Calpha_i%20+%20G_i%7D%7B%5Clambda%7D%20-%20%5Clog%20%5Cleft(%20%5Csum_%7Bi=1%7D%5EK%20%5Cexp%0A%5Cleft(%20%5Cfrac%20%7B%5Clog%20%5Calpha_i%20+%20G_i%7D%7B%5Clambda%7D%20%5Cright)%20%5Cright)%0A%5Cquad%20G_i%20%5Csim%20%5Ctext%7BGumbel%7D(0,%201)%0A"></p>
<p>The resulting random variable <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7By%7D%5Cin%5Cmathbb%7BR%7D%5EK"> has the property that <img src="https://latex.codecogs.com/png.latex?%5Cexp(Y)%20%5Csim%20%5Ctext%7BConcrete%7D%5Cleft(%5Cboldsymbol%7B%5Calpha%7D,%20%5Clambda%20%5Cright)">, therefore they denote <img src="https://latex.codecogs.com/png.latex?Y"> as an <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BExpConcrete%7D%5Cleft(%5Cboldsymbol%7B%5Calpha%7D,%20%5Clambda%5Cright)">. Accordingly, the log-likelihood <img src="https://latex.codecogs.com/png.latex?%5Clog%20%5Ckappa_%7B%5Cboldsymbol%7B%5Calpha%7D,%20%5Clambda%7D"> of a variable ExpConcrete variable <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7By%7D"> is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Calpha%7D,%20%5Clambda%7D%20(%5Ctextbf%7By%7D)%20=&amp;%20%5Clog%20%5CBig((K-1)!%20%5CBig)%20+%20(K-1)%20%5Clog%20%5Clambda%0A%20%20+%20%5Cleft(%5Csum_%7Bi=1%7D%5EK%20%20%5Clog%20%5Calpha_i%20+%20(%5Clambda%20-%201)%20y_i%20%5Cright)%20%5C%5C%0A%20%20%20&amp;-%20n%20%5Clog%20%5Cleft(%5Csum_%7Bi=1%7D%5En%20%5Cexp%5Cleft(%20%5Clog%20%5Calpha_i%20-%20%5Clambda%20y_i%5Cright)%5Cright)%0A%5Cend%7Balign%7D%0A"></p>
<p>This reparameterization does not change our approach due to the fact that the KL terms of a variational loss are invariant under invertible transformations, i.e., since <img src="https://latex.codecogs.com/png.latex?%5Cexp"> is invertible, the KL divergence between two <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BExpConcrete%7D"> is the same the KL divergence between two <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BConcrete%7D"> distributions.</p></li>
<li><p><strong>Working with <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BExpConcrete%7D"> random variables</strong>: Remind the relaxed objective</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%5E%7B%5Ctext%7BELBO%7D%7D_%7Brel%7D%20=%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%20%20q_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Clambda_1%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cleft%5B%0A%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bz%7D%5Cright)%20+%20%5Clog%0A%5Cfrac%7B%0Ap_%7B%5Cboldsymbol%7Ba%7D,%20%5Clambda_2%7D%20(%5Ctextbf%7Bz%7D)%0A%7D%20%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D,%0A%5Clambda_1%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5Cright)%7D%0A%5Cright%5D%0A"></p>
<p>Now let’s exchange the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BConcrete%7D"> by <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BExpConcrete%7D"> distributions</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%5E%7B%5Ctext%7BELBO%7D%7D_%7Brel%7D%20=%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7By%7D%20%5Csim%20%20%5Ckappa_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Clambda_1%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5Cright)%7D%20%5Cleft%5B%0A%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%20%7C%20%5Cexp(%5Ctextbf%7By%7D)%5Cright)%20+%20%5Clog%0A%5Cfrac%7B%0A%5Crho_%7B%5Cboldsymbol%7Ba%7D,%20%5Clambda_2%7D%20(%5Ctextbf%7By%7D)%0A%7D%20%7B%5Ckappa_%7B%5Cboldsymbol%7B%5Cphi%7D,%0A%5Clambda_1%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7By%7D%5Cright)%7D%0A%5Cright%5D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Crho_%7B%5Cboldsymbol%7Ba%7D,%20%5Clambda_2%7D%20(%5Ctextbf%7By%7D)"> is the density of an <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BExpConcrete%7D"> corresponding to the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BConcrete%7D"> distribution <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7Ba%7D,%20%5Clambda_2%7D%20(%5Ctextbf%7Bz%7D)">. Thus, during the implementation we will simply use <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BExpConcrete%7D"> random variables <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7By%7D"> as random variables and then perform an <img src="https://latex.codecogs.com/png.latex?%5Cexp"> computation before putting them through the decoder.</p></li>
<li><p><strong>Choosing the temperature</strong> <img src="https://latex.codecogs.com/png.latex?%5Clambda">: <a href="https://arxiv.org/abs/1611.00712">Maddison et al. (2016)</a> note that the success of the training heavily depends on the choice of temperature. It is rather intuitive that the relaxed nodes should not be able to represent precise real valued mode in the interior of the probability simplex, since otherwise the model is designed to fail. In other words, the only modes of the concrete distributions should be at the vertices of the probability simplex. Fortunately, <a href="https://arxiv.org/abs/1611.00712">Maddison et al. (2016)</a> proved that</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BIf%20%7D%20%5Clambda%20%5Cle%20%5Cfrac%20%7B1%7D%7Bn-1%7D,%20%5Ctext%7B%20then%20%7D%20p_%7B%5Cboldsymbol%7B%5Calpha%7D,%0A%5Clambda%7D%20%5Ctext%7B%20is%20log-convex%20in%20%7D%20x%0A"></p>
<p>In other words, if we keep <img src="https://latex.codecogs.com/png.latex?%5Clambda%20%5Cle%20%5Cfrac%20%7B1%7D%7Bn-1%7D">, there are no modes in the interior. However, <a href="https://arxiv.org/abs/1611.00712">Maddison et al. (2016)</a> note that in practice, this upper-bound on <img src="https://latex.codecogs.com/png.latex?%5Clambda"> might be too tight, e.g., they found for <img src="https://latex.codecogs.com/png.latex?n=4"> that <img src="https://latex.codecogs.com/png.latex?%5Clambda=1"> was the best temperature and in <img src="https://latex.codecogs.com/png.latex?n=8">, <img src="https://latex.codecogs.com/png.latex?%5Clambda=%5Cfrac%20%7B2%7D%7B3%7D">. As a result, they recommend to rather explore <img src="https://latex.codecogs.com/png.latex?%5Clambda"> as tuneable hyperparameters.</p>
<p>Last note about the temperature <img src="https://latex.codecogs.com/png.latex?%5Clambda">: They found that choosing different temperatures <img src="https://latex.codecogs.com/png.latex?%5Clambda_1"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda_2"> for the posterior <img src="https://latex.codecogs.com/png.latex?%5Ckappa_%7B%5Cboldsymbol%7B%5Calpha%7D,%20%5Clambda_1%7D"> and prior <img src="https://latex.codecogs.com/png.latex?%5Crho_%7B%5Cboldsymbol%7Ba%7D,%20%5Clambda_2%7D"> could dramatically improve the results.</p></li>
</ul>
</section>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>Let’s showcase how the <strong>discrete-latent VAE</strong> performs in comparison to the <strong>standard VAE</strong> (with Gaussian latents). For the sake of simplicity, I am going to create a very (VERY) simple dataset that should mimick the <strong>generative process</strong> we assume in the discrete-latent VAE, i.e., there are <img src="https://latex.codecogs.com/png.latex?K"> one-hot vectors <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bd%7D"> and a Gaussian distribution <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bd%7D)">.</p>
<section id="data-generation" class="level3">
<h3 class="anchored" data-anchor-id="data-generation">Data Generation</h3>
<p>The dataset is made of three (<img src="https://latex.codecogs.com/png.latex?K=3">) distinct shapes each is assigned a distinct color such that in fact there are only three images in the dataset <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D=%5C%7B%5Ctextbf%7Bx%7D_i%5C%7D_%7Bi=1%7D%5E3">. Therefore, the Gaussian distribution <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bd%7D)"> has an infinitely small variance. To allow for minibatches during training and to make the epochs larger than one iteration, we upsample the three images by repeating each image <img src="https://latex.codecogs.com/png.latex?1000"> times in the dataset:</p>
<div class="cell" data-execution_count="2">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TensorDataset</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OneHotEncoder</span>
<span id="cb1-7"></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_img(shape, color, img_size):</span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generate an RGB image from the provided latent factors</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        shape (string): can only be 'circle', 'square', 'triangle'</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        color (string): color name or rgb string</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_size (int): describing the image size (img_size, img_size)</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        size (int): size of shape</span></span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        torch tensor [3, img_size, img_size]</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># blank image</span></span>
<span id="cb1-22">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>, (img_size, img_size), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>)</span>
<span id="cb1-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># center coordinates</span></span>
<span id="cb1-24">    center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define coordinates</span></span>
<span id="cb1-26">    x_0, y_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-27">    x_1, y_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-28">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw shapes</span></span>
<span id="cb1-29">    img1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDraw.Draw(img)</span>
<span id="cb1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'square'</span>:</span>
<span id="cb1-31">        img1.rectangle([(x_0, y_0), (x_1, y_1)], fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color)</span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'circle'</span>:</span>
<span id="cb1-33">        img1.ellipse([(x_0, y_0), (x_1, y_1)], fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color)</span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'triangle'</span>:</span>
<span id="cb1-35">        y_0, y_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,  center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb1-36">        img1.polygon([(x_0, y_0), (x_1, y_0), (center, y_1)], fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color)</span>
<span id="cb1-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> transforms.ToTensor()(img)</span>
<span id="cb1-38"></span>
<span id="cb1-39"></span>
<span id="cb1-40"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_dataset(n_samples_per_class, colors, shapes, sizes, img_size):</span>
<span id="cb1-41">    data, labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [], []</span>
<span id="cb1-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (n_samples, color, shape, size) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(n_samples_per_class,colors,shapes,sizes):</span>
<span id="cb1-43">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_img(shape, color, img_size, size)</span>
<span id="cb1-44"></span>
<span id="cb1-45">        data.append(img.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).repeat(n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-46">        labels.extend(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>[shape])</span>
<span id="cb1-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cast data to tensor [sum(n_samples_per_class), 3, img_size, img_size]</span></span>
<span id="cb1-48">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.vstack(data).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.float32)</span>
<span id="cb1-49">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create one-hot encoded labels</span></span>
<span id="cb1-50">    labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OneHotEncoder().fit_transform(np.array(labels).reshape(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)).toarray()</span>
<span id="cb1-51">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make tensor dataset</span></span>
<span id="cb1-52">    dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TensorDataset(data, torch.from_numpy(labels))</span>
<span id="cb1-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dataset</span>
<span id="cb1-54"></span>
<span id="cb1-55">IMG_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span></span>
<span id="cb1-56">N_SAMPLES_PER_CLASS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>]</span>
<span id="cb1-57">SHAPES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'square'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'circle'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'triangle'</span>]</span>
<span id="cb1-58">COLORS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>]</span>
<span id="cb1-59">SIZES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>]</span>
<span id="cb1-60">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_dataset(N_SAMPLES_PER_CLASS,COLORS, SHAPES, SIZES, IMG_SIZE)</span></code></pre></div>
</details>
</div>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/concrete_distribution/img/dataset.png" title="Dataset" class="img-fluid" alt="Dataset"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>Dataset</strong></td>
</tr>
</tbody>
</table>
</section>
<section id="model-implementation" class="level3">
<h3 class="anchored" data-anchor-id="model-implementation">Model Implementation</h3>
<ul>
<li><strong>Standard VAE</strong></li>
</ul>
<div class="cell" data-execution_count="3">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.distributions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dists</span>
<span id="cb2-3"></span>
<span id="cb2-4">HIDDEN_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span></span>
<span id="cb2-5">LATENT_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb2-6">FIXED_VAR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> VAE(nn.Module):</span>
<span id="cb2-10"></span>
<span id="cb2-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-12">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(VAE, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-14">            nn.Flatten(),</span>
<span id="cb2-15">            nn.Linear((IMG_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, HIDDEN_DIM),</span>
<span id="cb2-16">            nn.ReLU(),</span>
<span id="cb2-17">            nn.Linear(HIDDEN_DIM, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>LATENT_DIM)</span>
<span id="cb2-18">        )</span>
<span id="cb2-19">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-20">            nn.Linear(LATENT_DIM, HIDDEN_DIM),</span>
<span id="cb2-21">            nn.ReLU(),</span>
<span id="cb2-22">            nn.Linear(HIDDEN_DIM, (IMG_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb2-23">        )</span>
<span id="cb2-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-25"></span>
<span id="cb2-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_loss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb2-27">        [x_tilde, z, mu_z, log_var_z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(x)</span>
<span id="cb2-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute negative log-likelihood</span></span>
<span id="cb2-29">        NLL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dists.Normal(x_tilde, FIXED_VAR).log_prob(x).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)).mean()</span>
<span id="cb2-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copmute kl divergence</span></span>
<span id="cb2-31">        KL_Div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> log_var_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu_z.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> log_var_z.exp()).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).mean()</span>
<span id="cb2-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute loss</span></span>
<span id="cb2-33">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NLL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> KL_Div</span>
<span id="cb2-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> loss, NLL, KL_Div</span>
<span id="cb2-35"></span>
<span id="cb2-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb2-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""feed image (x) through VAE</span></span>
<span id="cb2-38"></span>
<span id="cb2-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x (torch tensor): input [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb2-41"></span>
<span id="cb2-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x_tilde (torch tensor): [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb2-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z (torch tensor): latent space samples [batch, LATENT_DIM]</span></span>
<span id="cb2-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            mu_z (torch tensor): mean latent space [batch, LATENT_DIM]</span></span>
<span id="cb2-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            log_var_z (torch tensor): log var latent space [batch, LATENT_DIM]</span></span>
<span id="cb2-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-48">        z, mu_z, log_var_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(x)</span>
<span id="cb2-49">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z)</span>
<span id="cb2-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [x_tilde, z, mu_z, log_var_z]</span>
<span id="cb2-51"></span>
<span id="cb2-52">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb2-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""computes the approximated posterior distribution parameters and</span></span>
<span id="cb2-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        samples from this distribution</span></span>
<span id="cb2-55"></span>
<span id="cb2-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x (torch tensor): input [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb2-58"></span>
<span id="cb2-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z (torch tensor): latent space samples [batch, LATENT_DIM]</span></span>
<span id="cb2-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            mu_E (torch tensor): mean latent space [batch, LATENT_DIM]</span></span>
<span id="cb2-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            log_var_E (torch tensor): log var latent space [batch, LATENT_DIM]</span></span>
<span id="cb2-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get encoder distribution parameters</span></span>
<span id="cb2-65">        out_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder(x)</span>
<span id="cb2-66">        mu_E, log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.chunk(out_encoder, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample noise variable for each batch and sample</span></span>
<span id="cb2-68">        epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(log_var_E)</span>
<span id="cb2-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get latent variable by reparametrization trick</span></span>
<span id="cb2-70">        z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.exp(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>log_var_E) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> epsilon</span>
<span id="cb2-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> z, mu_E, log_var_E</span>
<span id="cb2-72"></span>
<span id="cb2-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z):</span>
<span id="cb2-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""computes the Gaussian mean of p(x|z)</span></span>
<span id="cb2-75"></span>
<span id="cb2-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z (torch tensor): latent space samples [batch, LATENT_DIM]</span></span>
<span id="cb2-78"></span>
<span id="cb2-79"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x_tilde (torch tensor): [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb2-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-82">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get decoder distribution parameters</span></span>
<span id="cb2-83">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(z).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, IMG_SIZE, IMG_SIZE)</span>
<span id="cb2-84">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_tilde</span>
<span id="cb2-85"></span>
<span id="cb2-86">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_latent_traversal(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_batch, n_pert, pert_min_max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_latents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>):</span>
<span id="cb2-87">        device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_batch.device</span>
<span id="cb2-88">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize images of latent traversal</span></span>
<span id="cb2-89">        images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n_latents, n_pert, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>image_batch.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>::])</span>
<span id="cb2-90">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select the latent_dims with lowest variance (most informative)</span></span>
<span id="cb2-91">        [x_tilde, z, mu_z, log_var_z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(image_batch)</span>
<span id="cb2-92">        i_lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_var_z.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).sort()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][:n_latents]</span>
<span id="cb2-93">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sweep for latent traversal</span></span>
<span id="cb2-94">        sweep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pert_min_max, pert_min_max, n_pert)</span>
<span id="cb2-95">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take first image and encode</span></span>
<span id="cb2-96">        [z, mu_E, log_var_E] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(image_batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb2-97">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> latent_dim, i_lat <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(i_lats):</span>
<span id="cb2-98">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pertubation_dim, z_replaced <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(sweep):</span>
<span id="cb2-99">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copy z and pertubate latent__dim i_lat</span></span>
<span id="cb2-100">                z_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.detach().clone()</span>
<span id="cb2-101">                z_new[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i_lat] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_replaced</span>
<span id="cb2-102"></span>
<span id="cb2-103">                img_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z_new.to(device)).squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).cpu()</span>
<span id="cb2-104"></span>
<span id="cb2-105">                images[latent_dim][pertubation_dim] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_rec</span>
<span id="cb2-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> images</span></code></pre></div>
</details>
</div>
<ul>
<li><p><strong>Discrete-Latent VAE</strong>:</p>
<p>Luckily, <a href="https://pytorch.org/docs/stable/distributions.html">Pytorch distributions</a> have already implemented the <strong>concrete distribution</strong> which even takes care of using the <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BExpConcrete%7D"> for the computation of the log probability, see <a href="https://pytorch.org/docs/stable/_modules/torch/distributions/relaxed_categorical.html#RelaxedOneHotCategorical">source code</a>.</p>
<p>As suggested by <a href="https://arxiv.org/abs/1611.00712">Maddison et al.&nbsp;(2016)</a>, we set <img src="https://latex.codecogs.com/png.latex?%5Clambda_1%20=%20%5Cfrac%7B2%7D%7B3%7D">. Setting <img src="https://latex.codecogs.com/png.latex?%5Clambda_2%20=%202"> seemed to improve stability, however I did not take time to really tune these hyperparameters (which is just not necessary due to the simplicity of the task).</p></li>
</ul>
<div class="cell" data-execution_count="4">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">LAMBDA_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb3-2">LAMBDA_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>])</span>
<span id="cb3-3">PRIOR_PROBS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>LATENT_DIM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>torch.ones(LATENT_DIM)</span>
<span id="cb3-4"></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DiscreteVAE(nn.Module):</span>
<span id="cb3-7"></span>
<span id="cb3-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-9">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(DiscreteVAE, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb3-11">            nn.Flatten(),</span>
<span id="cb3-12">            nn.Linear((IMG_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, HIDDEN_DIM),</span>
<span id="cb3-13">            nn.ReLU(),</span>
<span id="cb3-14">            nn.Linear(HIDDEN_DIM, LATENT_DIM)</span>
<span id="cb3-15">        )</span>
<span id="cb3-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb3-17">            nn.Linear(LATENT_DIM, HIDDEN_DIM),</span>
<span id="cb3-18">            nn.ReLU(),</span>
<span id="cb3-19">            nn.Linear(HIDDEN_DIM, (IMG_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb3-20">        )</span>
<span id="cb3-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LAMBDA_1"</span>, LAMBDA_1)</span>
<span id="cb3-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"LAMBDA_2"</span>, LAMBDA_2)</span>
<span id="cb3-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRIOR_PROBS"</span>, PRIOR_PROBS)</span>
<span id="cb3-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb3-25"></span>
<span id="cb3-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_loss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-27">        [x_tilde, z, latent_dist] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train"</span>)</span>
<span id="cb3-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute negative log-likelihood</span></span>
<span id="cb3-29">        NLL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dists.Normal(x_tilde, FIXED_VAR).log_prob(x).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)).mean()</span>
<span id="cb3-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copmute kl divergence</span></span>
<span id="cb3-31">        PRIOR_DIST <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dists.RelaxedOneHotCategorical(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.LAMBDA_2, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.PRIOR_PROBS)</span>
<span id="cb3-32">        KL_Div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  (latent_dist.log_prob(z) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> PRIOR_DIST.log_prob(z)).mean()</span>
<span id="cb3-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute loss</span></span>
<span id="cb3-34">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NLL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> KL_Div</span>
<span id="cb3-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> loss, NLL, KL_Div</span>
<span id="cb3-36"></span>
<span id="cb3-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train"</span>):</span>
<span id="cb3-38">        latent_dist, z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(x, mode)</span>
<span id="cb3-39">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z)</span>
<span id="cb3-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [x_tilde, z, latent_dist]</span>
<span id="cb3-41"></span>
<span id="cb3-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train"</span>):</span>
<span id="cb3-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""computes the approximated posterior distribution parameters and</span></span>
<span id="cb3-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        returns the distribution (torch distribution) and a sample from that</span></span>
<span id="cb3-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        distribution</span></span>
<span id="cb3-46"></span>
<span id="cb3-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb3-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x (torch tensor): input [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb3-49"></span>
<span id="cb3-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb3-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            dist (torch distribution): latent distribution</span></span>
<span id="cb3-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb3-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get encoder distribution parameters</span></span>
<span id="cb3-54">        log_alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder(x)</span>
<span id="cb3-55">        probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_alpha.exp()</span>
<span id="cb3-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train"</span>:</span>
<span id="cb3-57">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concrete distribution</span></span>
<span id="cb3-58">            latent_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dists.RelaxedOneHotCategorical(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.LAMBDA_1, probs)</span>
<span id="cb3-59">            z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_dist.rsample()</span>
<span id="cb3-60">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [latent_dist, z]</span>
<span id="cb3-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test"</span>:</span>
<span id="cb3-62">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># discrete distribution</span></span>
<span id="cb3-63">            latent_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dists.OneHotCategorical(probs)</span>
<span id="cb3-64">            d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_dist.sample()</span>
<span id="cb3-65">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [latent_dist, d]</span>
<span id="cb3-66"></span>
<span id="cb3-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_latent_traversal(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb3-68">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""in the discrete case there are only LATENT_DIM possible latent states"""</span></span>
<span id="cb3-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize images of latent traversal</span></span>
<span id="cb3-70">        images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(LATENT_DIM, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, IMG_SIZE, IMG_SIZE)</span>
<span id="cb3-71">        latent_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(LATENT_DIM, LATENT_DIM)</span>
<span id="cb3-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i_lat <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(LATENT_DIM):</span>
<span id="cb3-73">            d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, LATENT_DIM).to(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.LAMBDA_1.device)</span>
<span id="cb3-74">            d[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i_lat] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-75">            images[i_lat] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(d).squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-76">            latent_samples[i_lat] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d</span>
<span id="cb3-77">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> images, latent_samples</span>
<span id="cb3-78"></span>
<span id="cb3-79">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z):</span>
<span id="cb3-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""computes the Gaussian mean of p(x|z)</span></span>
<span id="cb3-81"></span>
<span id="cb3-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb3-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z (torch tensor): latent space samples [batch, LATENT_DIM]</span></span>
<span id="cb3-84"></span>
<span id="cb3-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb3-86"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x_tilde (torch tensor): [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb3-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb3-88">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get decoder distribution parameters</span></span>
<span id="cb3-89">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(z).view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, IMG_SIZE, IMG_SIZE)</span>
<span id="cb3-90">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_tilde</span></code></pre></div>
</details>
</div>
<ul>
<li><strong>Training Procedure</strong></li>
</ul>
<div class="cell" data-execution_count="5">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> livelossplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PlotLosses</span>
<span id="cb4-3"></span>
<span id="cb4-4">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb4-5">LEARNING_RATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-3</span></span>
<span id="cb4-6">WEIGHT_DECAY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span></span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train(dataset, std_vae, discrete_vae, num_epochs):</span>
<span id="cb4-9">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb4-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(device))</span>
<span id="cb4-11"></span>
<span id="cb4-12">    data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-13">                             num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb4-14">    std_vae.to(device)</span>
<span id="cb4-15">    discrete_vae.to(device)</span>
<span id="cb4-16"></span>
<span id="cb4-17">    optimizer_std_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(std_vae.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LEARNING_RATE,</span>
<span id="cb4-18">                                         weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WEIGHT_DECAY)</span>
<span id="cb4-19">    optimizer_dis_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(discrete_vae.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LEARNING_RATE,</span>
<span id="cb4-20">                                         weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WEIGHT_DECAY)</span>
<span id="cb4-21">    losses_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotLosses(groups<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KL Div'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STD-VAE KL'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Discrete-VAE KL'</span>],</span>
<span id="cb4-22">                                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NLL'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STD-VAE NLL'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Discrete-VAE NLL'</span>]})</span>
<span id="cb4-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb4-24">        avg_KL_STD_VAE, avg_NLL_STD_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-25">        avg_KL_DIS_VAE, avg_NLL_DIS_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (x, label) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data_loader:</span>
<span id="cb4-27">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.to(device)</span>
<span id="cb4-28">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standard vae update</span></span>
<span id="cb4-29">            optimizer_std_vae.zero_grad()</span>
<span id="cb4-30">            loss, NLL, KL_Div  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> std_vae.compute_loss(x)</span>
<span id="cb4-31">            loss.backward()</span>
<span id="cb4-32">            optimizer_std_vae.step()</span>
<span id="cb4-33">            avg_KL_STD_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> KL_Div.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb4-34">            avg_NLL_STD_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> NLL.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb4-35">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># discrete vae update</span></span>
<span id="cb4-36">            optimizer_dis_vae.zero_grad()</span>
<span id="cb4-37">            loss, NLL, KL_Div  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> discrete_vae.compute_loss(x)</span>
<span id="cb4-38">            loss.backward()</span>
<span id="cb4-39">            optimizer_dis_vae.step()</span>
<span id="cb4-40">            avg_KL_DIS_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> KL_Div.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb4-41">            avg_NLL_DIS_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> NLL.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb4-42"></span>
<span id="cb4-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot current losses</span></span>
<span id="cb4-44">        losses_plot.update({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STD-VAE KL'</span>: avg_KL_STD_VAE, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STD-VAE NLL'</span>: avg_NLL_STD_VAE,</span>
<span id="cb4-45">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Discrete-VAE KL'</span>: avg_KL_DIS_VAE,</span>
<span id="cb4-46">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Discrete-VAE NLL'</span>: avg_NLL_DIS_VAE}, current_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch)</span>
<span id="cb4-47">        losses_plot.send()</span>
<span id="cb4-48">    trained_std_vae, trained_discrete_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> std_vae, discrete_vae</span>
<span id="cb4-49">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> trained_std_vae, trained_discrete_vae</span></code></pre></div>
</details>
</div>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>Let’s train both models for some seconds:</p>
<div class="cell" data-execution_count="6">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span></span>
<span id="cb5-2">std_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VAE()</span>
<span id="cb5-3">discrete_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DiscreteVAE()</span>
<span id="cb5-4"></span>
<span id="cb5-5">trained_std_vae, trained_discrete_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(dataset, std_vae, discrete_vae, num_epochs)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/concrete_distribution/img/training.png" title="Training" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Training</figcaption>
</figure>
</div>
<p>Both models seem to be able to create descent reconstructions (really low NLL). From here on out, we will only run the <strong>discrete-latent VAE</strong> in test-mode, i.e., with a categorical latent distribution.</p>
</section>
<section id="visualizations" class="level3">
<h3 class="anchored" data-anchor-id="visualizations">Visualizations</h3>
<ul>
<li><strong>Reconstructions</strong>: Let’s verify that both models are able to create good reconstructions.</li>
</ul>
<div class="cell" data-execution_count="7">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_reconstructions(std_vae, discrete_vae, dataset, SEED<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb6-2">    np.random.seed(SEED)</span>
<span id="cb6-3">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb6-4"></span>
<span id="cb6-5">    std_vae.to(device)</span>
<span id="cb6-6">    discrete_vae.to(device)</span>
<span id="cb6-7"></span>
<span id="cb6-8">    n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb6-9">    i_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)), n_samples, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb6-10"></span>
<span id="cb6-11">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb6-12">    plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reconstructions"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold'</span>)</span>
<span id="cb6-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, i_sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(i_samples):</span>
<span id="cb6-14">        orig_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[i_sample][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb6-15">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot original img</span></span>
<span id="cb6-16">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter)</span>
<span id="cb6-17">        plt.imshow(transforms.ToPILImage()(orig_img))</span>
<span id="cb6-18">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb6-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-20">            ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>,</span>
<span id="cb6-21">                        va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb6-22">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot img reconstruction STD VAE</span></span>
<span id="cb6-23">        [x_tilde, z, mu_z, log_var_z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> std_vae(orig_img.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device))</span>
<span id="cb6-24"></span>
<span id="cb6-25">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_samples)</span>
<span id="cb6-26">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_tilde[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().cpu()</span>
<span id="cb6-27">        plt.imshow(transforms.ToPILImage()(x_tilde))</span>
<span id="cb6-28">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb6-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-30">            ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STD VAE recons"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>,</span>
<span id="cb6-31">                        va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb6-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot img reconstruction IWAE</span></span>
<span id="cb6-33">        [x_tilde, z, dist] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> discrete_vae(orig_img.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test"</span>)</span>
<span id="cb6-34">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_samples)</span>
<span id="cb6-35">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_tilde[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().cpu()</span>
<span id="cb6-36">        plt.imshow(transforms.ToPILImage()(x_tilde))</span>
<span id="cb6-37">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb6-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb6-39">            ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Discrete VAE recons"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>,</span>
<span id="cb6-40">                        va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb6-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb6-42"></span>
<span id="cb6-43"></span>
<span id="cb6-44">plot_reconstructions(trained_std_vae, trained_discrete_vae, dataset)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/concrete_distribution/img/recons.png" title="Reconstructions" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Reconstructions</figcaption>
</figure>
</div>
<p>Interestingly, the <strong>standard VAE</strong> does not always create valid reconstructions. This is due to the sampling from a Gaussian in the latent space, i.e., the decoder might see some <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D"> it has not yet seen and then creates some weird reconstruction.</p>
<ul>
<li><p><strong>Latent Traversal</strong>: Let’s traverse the latent dimension to see what the model has learnt. Note that for the <strong>standard VAE</strong> the latent space is continuous and therefore infinitely many latent sample exist. As usual, we will only show an limited amount by pertubating each latent dimension between -1 and +1 (while holding the other dimensions constant).</p>
<p>For the <strong>discrete-latent VAE</strong>, there are only <img src="https://latex.codecogs.com/png.latex?K"> possible latent states.</p></li>
</ul>
<div class="cell" data-execution_count="8">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_latent_traversal(std_vae, discrete_vae, dataset, SEED<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):    </span>
<span id="cb7-2">    np.random.seed(SEED)</span>
<span id="cb7-3">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb7-4">    </span>
<span id="cb7-5">    std_vae.to(device)</span>
<span id="cb7-6">    discrete_vae.to(device)</span>
<span id="cb7-7">    </span>
<span id="cb7-8">    n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-9">    i_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)), n_samples, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-10">    img_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([dataset[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> i_samples], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-11">    img_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_batch.to(device)</span>
<span id="cb7-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate latent traversals</span></span>
<span id="cb7-13">    n_pert, pert_min_max, n_lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb7-14">    img_trav_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> std_vae.create_latent_traversal(img_batch, n_pert, pert_min_max, n_lats)</span>
<span id="cb7-15">    img_discrete_vae, latent_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> discrete_vae.create_latent_traversal()</span>
<span id="cb7-16">    </span>
<span id="cb7-17">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb7-18">    n_rows, n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_pert <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-19">    gs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GridSpec(n_rows, n_cols)</span>
<span id="cb7-20">    plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Latent Traversals"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold'</span>)</span>
<span id="cb7-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row_index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_lats):</span>
<span id="cb7-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col_index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_pert):</span>
<span id="cb7-23">            img_rec_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_trav_vae[row_index][col_index]</span>
<span id="cb7-24">            </span>
<span id="cb7-25">            ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(gs[row_index, col_index])</span>
<span id="cb7-26">            plt.imshow(transforms.ToPILImage()(img_rec_VAE))</span>
<span id="cb7-27">            plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb7-28">            </span>
<span id="cb7-29">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> row_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> col_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n_pert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb7-30">                plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STD VAE'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>)</span>
<span id="cb7-31">            </span>
<span id="cb7-32">            ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(gs[row_index, col_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_pert <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb7-33">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> col_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb7-34">                plt.imshow(transforms.ToPILImage()(img_discrete_vae[row_index]))</span>
<span id="cb7-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> col_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>:</span>
<span id="cb7-36">                d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_samples[row_index].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.uint8).tolist()</span>
<span id="cb7-37">                ax.annotate(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"d = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>d<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>))</span>
<span id="cb7-38">                </span>
<span id="cb7-39">            </span>
<span id="cb7-40">            plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb7-41">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> row_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> col_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n_pert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb7-42">                plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Discrete VAE'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>)</span>
<span id="cb7-43">            </span>
<span id="cb7-44">            </span>
<span id="cb7-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add pertubation magnitude</span></span>
<span id="cb7-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [plt.subplot(gs[n_lats, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])]:</span>
<span id="cb7-47">        ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pertubation magnitude"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>,</span>
<span id="cb7-48">                    va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb7-49">        ax.set_frame_on(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-50">        ax.axes.set_xlim([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.15</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pert_min_max, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.15</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pert_min_max])</span>
<span id="cb7-51">        ax.xaxis.set_ticks([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pert_min_max, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pert_min_max])</span>
<span id="cb7-52">        ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>)</span>
<span id="cb7-53">        ax.xaxis.set_tick_params(direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inout"</span>, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb7-54">        ax.get_yaxis().set_ticks([])</span>
<span id="cb7-55">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb7-56"></span>
<span id="cb7-57">plot_latent_traversal(trained_std_vae, trained_discrete_vae, dataset)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/concrete_distribution/img/latent_trav.png" title="Latent Traversal" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Latent Traversal</figcaption>
</figure>
</div>
<p>Well, this looks nice for the <strong>discrete VAE</strong> and really confusing for the <strong>Standard VAE</strong>.</p>
</section>
</section>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>The lecture on <a href="https://www.youtube.com/watch?v=-KzvHc16HlM">discrete latent variables</a> by Artem Sobolev as well as the <a href="https://www.youtube.com/watch?v=JFgXEbgcT7g">NIPS presentation</a> by Eric Jang were really helpful resources.</p>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>While continuous variables do not pose a problem for standard VAEs with neural networks as approximations, it should be noted that there are numerous cases in which we cannot operate with continuous variables, e.g., when the (discrete) variable is used as a decision variable.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>reimplementation</category>
  <category>VAE</category>
  <category>D-VAE</category>
  <guid>https://borea17.github.io/paper_summaries/concrete_distribution/index.html</guid>
  <pubDate>Sat, 20 Feb 2021 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Importance Weighted Autoencoders</title>
  <dc:creator>borea17 </dc:creator>
  <link>https://borea17.github.io/paper_summaries/iwae/index.html</link>
  <description><![CDATA[ 




<!-- nextjournal_link: "https://nextjournal.com/borea17/attend-infer-repeat/" -->
<p><a href="https://arxiv.org/abs/1509.00519">Burda et al.&nbsp;(2016)</a> introduce the <strong>Importance Weighted Autoencoder (IWAE)</strong> as a simple modification in the training of <a href="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes">variational autoencoders</a> <strong>(VAEs)</strong>. Notably, they proved that this modification leads to a <strong>strictly tighter lower bound on the data log-likelihood</strong>. Furthermore, the standard VAE formulation is contained within the IWAE framework as a special case. In essence, the modification consists of using multiple samples from the <em>recognition network</em> / <em>encoder</em> and adapting the loss function with <em>importance-weighted sample losses</em>. In their experiments, they could emprically validate that employing IWAEs leads to improved test log-likelihoods and richer latent space representations compared to VAEs.</p>
<section id="model-description" class="level2">
<h2 class="anchored" data-anchor-id="model-description">Model Description</h2>
<p>An IWAE can be understood as a standard VAE in which multiple samples are drawn from the encoder distribution <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5CBig(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5CBig)"> and then fed through the decoder <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5CBig(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5CBig)">. In principle, this modification has been already proposed in the original VAE paper by <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a>. However, <a href="https://arxiv.org/abs/1509.00519">Burda et al. (2016)</a> additionally proposed to use a different objective function. The empirical objective function can be understood as the data log-likelihood <img src="https://latex.codecogs.com/png.latex?%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bx%7D)"> where the sampling distribution is exchanged to <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5CBig(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5CBig)"> via the method of <em>importance sampling</em>.</p>
<section id="high-level-overview" class="level3">
<h3 class="anchored" data-anchor-id="high-level-overview">High-Level Overview</h3>
<p>The IWAE framework builds upon a standard VAE architecture. There are two neural networks as approximations for the encoder <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)"> and the decoder distribution <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bz%7D%20%5Cright)">. More precisely, the networks estimate the parameters that parametrize these distributions. Typically, the latent distribution is assumed to be a Gaussian <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)%20%5Csim%20%5Cmathcal%7BN%7D%5Cleft(%20%5Cboldsymbol%7B%5Cmu%7D_%7B%5Ctext%7BE%7D%7D,%20%5Ctext%7Bdiag%7D%20%5Cleft(%20%5Cboldsymbol%7B%5Csigma%7D%5E2_%7B%5Ctext%7BE%7D%7D%5Cright)%20%5Cright)"> such that the encoder network estimates its the mean <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cmu%7D%5C_%7B%5Ctext%7BE%7D%7D"> and variance<sup>1</sup> <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5CSigma%7D%20=%20%5Ctext%7Bdiag%7D%20%5Cleft(%5Cboldsymbol%7B%5Csigma%7D%5E2_%7B%5Ctext%7BE%7D%7D%5Cright)">. To allow for backpropagation, we apply the reparametrization trick to the latent distribution which essentially consist of transforming samples from some (fixed) random distribution, e.g.&nbsp;<img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cepsilon%7D%20%5Csim%20%5Cmathcal%7BN%7D%20%5Cleft(%5Ctextbf%7B0%7D,%20%5Ctextbf%7BI%7D%20%5Cright)">, into the desired distribution using a deterministic mapping.</p>
<p>The main difference between a VAE and an IWAE lies in the objective function which is explained in more detail in the next section.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/iwae/img/schematic_VAE.png" title="VAE/IWAE Architecture" class="img-fluid" alt="VAE/IWAE Architecture"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>VAE/IWAE Architecture</strong></td>
</tr>
</tbody>
</table>
</section>
<section id="derivation" class="level3">
<h3 class="anchored" data-anchor-id="derivation">Derivation</h3>
<p>Let <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D%20=%20%5C%7B%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5C%7D_%7Bi=1%7D%5EN"> denote a dataset of <img src="https://latex.codecogs.com/png.latex?N"> i.i.d. samples where each observed datapoint <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> is obtained by first sampling a latent vector <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D"> from the prior <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D(%5Ctextbf%7Bz%7D)"> and then sampling <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> itself from the scene model <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5CBig(%20%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bz%7D%20%5CBig)">. Now we introduce an auxiliary distribution <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5CBig(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5CBig)"> (with its own paramaters) as an approximation to the true, but unknown posterior <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)">. Accordingly, the data likelihood of a one sample <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> can be stated as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bx%7D%5E%7B(i)%7D)%20=%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5CBig(%5Ctextbf%7Bz%7D%20%5CBig)%7D%20%5CBig%5B%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20%5CBig%5D%20=%0A%5Cint%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D)%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20d%5Ctextbf%7Bz%7D%20=%0A%5Cint%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20,%20%5Ctextbf%7Bz%7D%20%5Cright)%20d%5Ctextbf%7Bz%7D%0A"></p>
<p>Now, we use the simple trick of <em>importance sampling</em> to change the sampling distribution into the approximated posterior, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%0A=%20%5Cint%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20,%20%5Ctextbf%7Bz%7D%0A%5Cright)%7D%20%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0Aq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20d%5Ctextbf%7Bz%7D%0A=%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A%5Cleft%5B%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20,%20%5Ctextbf%7Bz%7D%0A%5Cright)%7D%20%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A%5Cright%5D%0A"></p>
<section id="vae-formulation" class="level4">
<h4 class="anchored" data-anchor-id="vae-formulation">VAE Formulation</h4>
<p>In the standard VAE approach, we use the <strong>evidence lower bound</strong> <a href="https://borea17.github.io/ML_101/probability_theory/evidence_lower_bound">(ELBO)</a> on <img src="https://latex.codecogs.com/png.latex?%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5CBig(%20%5Ctextbf%7Bx%7D%5CBig)"> as the objective function. This can be derived by applying Jensen’s Inequality on the data log-likelihood:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%0A=%20%5Clog%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A%5Cleft%5B%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20,%20%5Ctextbf%7Bz%7D%0A%5Cright)%7D%20%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A%5Cright%5D%20%5Cge%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A%5Cleft%5B%20%5Clog%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20,%20%5Ctextbf%7Bz%7D%0A%5Cright)%7D%20%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A%5Cright%5D%20=%20%5Cmathcal%7BL%7D%5E%7B%5Ctext%7BELBO%7D%7D%0A"></p>
<p>Using simple algebra, this can be rearranged into</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%5E%7B%5Ctext%7BELBO%7D%7D%5Cleft(%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D;%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20=%0A%5Cunderbrace%7B%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cphi%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A%5Cleft%5B%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5CBig(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D%20%5CBig)%0A%5Cright%5D%7D_%7B%0A%5Ctext%7BReconstruction%20Accuracy%7D%7D%0A-%0A%5Cunderbrace%7B%0AD_%7BKL%7D%20%5Cleft(%20q_%7B%5Cphi%7D%20%5CBig(%20%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5CBig)%20%7C%7C%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5CBig(%20%5Ctextbf%7Bz%7D%20%5CBig)%20%5Cright)%0A%7D_%7B%5Ctext%7BRegularization%7D%7D%0A"></p>
While the regularization term can usually be solved analytically, the reconstruction accuracy in its current formulation poses a problem for backpropagation: Gradients cannot backpropagate through a sampling operation. To circumvent this problem, the standard VAE formulation includes the reparametrization trick:
<center>
Substitute sampling <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D"> by using a deterministic mapping <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%20=%20g_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20(%5Cboldsymbol%7B%5Cepsilon%7D,%20%5Ctextbf%7Bx%7D)"> with the differential transformation <img src="https://latex.codecogs.com/png.latex?g_%7B%5Cboldsymbol%7B%5Cphi%7D%7D"> of an auxiliary noise variable <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cepsilon%7D"> with <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cepsilon%7D%5Csim%20p(%5Cboldsymbol%7B%5Cepsilon%7D)">.
</center>
<p><br> As a result, we can rewrite the EBLO as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%5E%7B%5Ctext%7BELBO%7D%7D%5Cleft(%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D;%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20=%0A%5Cmathbb%7BE%7D_%7B%5Cboldsymbol%7B%5Cepsilon%7D%20%5Csim%20p%20%5Cleft(%20%5Cboldsymbol%7B%5Cepsilon%7D%20%5Cright)%7D%0A%5Cleft%5B%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5CBig(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%0Ag_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Cboldsymbol%7B%5Cepsilon%7D,%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20%5CBig)%0A%5Cright%5D%20-%0AD_%7BKL%7D%20%5Cleft(%20q_%7B%5Cphi%7D%20%5CBig(%20%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5CBig)%20%7C%7C%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5CBig(%20%5Ctextbf%7Bz%7D%20%5CBig)%20%5Cright)%0A"></p>
<p>Lastly, the expectation is approximated using Monte-Carlo integration, leading to the standard VAE objective</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D%5E%7B%5Ctext%7BVAE%7D%7D_k%20%5Cleft(%5Cboldsymbol%7B%5Ctheta%7D,%0A%20%20%5Cboldsymbol%7B%5Cphi%7D;%0A%20%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%20&amp;=%0A%20%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Csum_%7Bl=1%7D%5E%7Bk%7D%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%0A%20%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%7C%20g_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%0A%5Cleft(%20%5Cboldsymbol%7B%5Cepsilon%7D%5E%7B(l)%7D,%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%5Cright)%0A%20%20-D_%7BKL%7D%20%5Cleft(%20%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright),%0A%20%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D)%20%5Cright)%5C%5C%0A%20%20&amp;%5Ctext%7Bwith%7D%20%5Cquad%20%5Cboldsymbol%7B%5Cepsilon%7D%5E%7B(l)%7D%20%5Csim%20p(%5Cboldsymbol%7B%5Cepsilon%7D)%0A%5Cend%7Balign%7D%0A"></p>
<p>Note that commonly <img src="https://latex.codecogs.com/png.latex?k=1"> in VAEs as long as the minibatch size is large enough. As stated by <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a>:</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Quote
</div>
</div>
<div class="callout-body-container callout-body">
<p><em>We found that the number of samples per datapoint can be set to 1 as long as the minibatch size was large enough.</em></p>
</div>
</div>
</section>
<section id="iwae-formulation" class="level4">
<h4 class="anchored" data-anchor-id="iwae-formulation">IWAE Formulation</h4>
<p>Before we introduce the IWAE estimator, remind that the Monte-Carlo estimator of the data likelihood (when the sampling distribution is changed via importance sampling, see <a href="https://borea17.github.io/paper_summaries/iwae#derivation">Derivation</a>) is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bx%7D%20)%20=%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A%5Cleft%5B%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%20,%20%5Ctextbf%7Bz%7D%0A%5Cright)%7D%20%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)%7D%0A%5Cright%5D%20%5Capprox%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Csum_%7Bl=1%7D%5E%7Bk%7D%0A%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%20,%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%0A%5Cright)%7D%20%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%20%7C%20%5Ctextbf%7Bx%7D%0A%5Cright)%7D%20%5Cquad%20%5Ctext%7Bwith%7D%20%5Cquad%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%0A"></p>
<p>As a result, the data log-likelihood estimator for one sample <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> can be stated as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20)%20&amp;%5Capprox%20%5Clog%20%5Cleft%5B%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Csum_%7Bl=1%7D%5E%7Bk%7D%0A%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20,%20%5Ctextbf%7Bz%7D%5E%7B(i,%20l)%7D%0A%5Cright)%7D%20%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(i,%20l)%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%0A%5Cright)%7D%5Cright%5D%20=%20%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D%5E%7B%5Ctext%7BIWAE%7D%7D_k%20%5Cleft(%20%5Cboldsymbol%7B%5Ctheta%7D,%0A%5Cboldsymbol%7B%5Cphi%7D;%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20%5C%5C%0A&amp;%5Ctext%7Bwith%7D%20%5Cquad%20%5Ctextbf%7Bz%7D%5E%7B(i,%20l)%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%0A%5Cend%7Balign%7D%0A"></p>
<p>which leads to an empirical estimate of the IWAE objective. However, <a href="https://arxiv.org/abs/1509.00519">Burda et al.&nbsp;(2016)</a> do not use the data log-likelihood in its plain form as the true IWAE objective. Instead they introduce the IWAE objective as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%5E%7B%5Ctext%7BIWAE%7D%7D_k%20%5Cleft(%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D;%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%0A=%20%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%5E%7B(1)%7D,%20%5Cdots,%20%20%5Ctextbf%7Bz%7D%5E%7B(k)%7D%20%5Csim%20q_%7B%5Cphi%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A%5Cleft%5B%0A%5Clog%20%5Cfrac%20%7B1%7D%7Bk%7D%0A%5Csum_%7Bl=1%7D%5Ek%0A%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%5Cright)%7D%0A%7Bq_%7B%5Cphi%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A%5Cright%5D%0A"></p>
<p>For notation purposes, they denote</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7B(unnormalized)%20importance%20weights:%7D%20%5Cquad%0A%7Bw%7D%5E%7B(i,%20l)%7D%20=%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%5Cright)%7D%0A%7Bq_%7B%5Cphi%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A"></p>
<p>By applying Jensen’s Inequality, we can see that in fact the (true) IWAE estimator is merely a lower-bound on the plain data log-likelihood</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%5E%7B%5Ctext%7BIWAE%7D%7D_k%20%5Cleft(%20%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D;%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%0A=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%20%5Clog%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Csum_%7Bl=1%7D%5E%7Bk%7D%20%7Bw%7D%5E%7B(i,%0Al)%7D%5Cright%5D%20%5Cle%20%5Clog%20%5Cmathbb%7BE%7D%20%5Cleft%5B%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Csum_%7Bl=1%7D%5E%7Bk%7D%0A%7Bw%7D%5E%7B(i,l)%7D%20%5Cright%5D%20=%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%0A"></p>
<p>They could prove that with increasing <img src="https://latex.codecogs.com/png.latex?k"> the lower bound gets strictly tighter and approaches the true data log-likelihood in the limit of <img src="https://latex.codecogs.com/png.latex?k%20%5Crightarrow%20%5Cinfty">. Note that since the empirical IWAE estimator <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D_k%5E%7B%5Ctext%7BIWAE%7D%7D"> can be understood as a Monte-Carlo estimator on the true data log-likelihood, in the empirical case this property can simply be deduced from the properties of Monte-Carlo integration.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
What is motivation of the true IWAE objective?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>A very well explanation is given by <a href="https://arxiv.org/abs/1808.09034">Domke and Sheldon (2018)</a>. Starting from the property</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap(%5Ctextbf%7Bx%7D)%20=%20%5Cmathbb%7BE%7D%20%5CBig%5B%20w%20%5CBig%5D%20=%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%0A%5Cleft%5B%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%20,%20%5Ctextbf%7Bz%7D%0A%5Cright)%7D%20%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)%7D%0A%5Cright%5D%0A"></p>
<p>We derived the ELBO using Jensen’s inequality</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20p(%5Ctextbf%7Bx%7D)%20%5Cge%20%5Cmathbb%7BE%7D%20%5CBig%5B%20%5Clog%20w%20%5CBig%5D%20=%20%5Ctext%7BELBO%7D%20%5CBig%5B%20q%20%7C%7C%0Ap%20%5CBig%5D%0A"></p>
<p>Suppose that we could make <img src="https://latex.codecogs.com/png.latex?w"> more concentrated about its mean <img src="https://latex.codecogs.com/png.latex?p(%5Ctextbf%7Bx%7D)">. Clearly, this would yield a tighter lower bound when applying Jensen’s Inequality.</p>
<p>(rhetorical break)</p>
<p>Can we make <img src="https://latex.codecogs.com/png.latex?w"> more concentrated about its mean? YES, WE CAN.</p>
<p>For example using the sample average <img src="https://latex.codecogs.com/png.latex?w_k%20=%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Csum_%7Bi=1%7D%5Ek%20w%5E%7B(i)%7D">. This leads directly to the true IWAE objective</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20p(%5Ctextbf%7Bx%7D)%20%20%5Cge%20%5Cmathbb%7BE%7D%20%5CBig%5B%20%5Clog%20w_k%20%5CBig%5D%20=%20%5Cmathbb%7BE%7D%20%5Cleft%5B%0A%5Clog%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Csum_%7Bi=1%7D%5E%7Bk%7D%20w%5E%7B(i)%7D%20%5Cright%5D%20=%20%5Cmathcal%7BL%7D%5E%7B%5Ctext%7BIWAE%7D%7D_k%0A"></p>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
IWAE objective and plain log-likelihood lead to the same empirical estimate. How?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Here it gets interesting. A closer analysis on the IWAE bound by <a href="https://openreview.net/forum?id=HyZoi-WRb">Nowozin (2018)</a> revealed the following property</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A&amp;%5Cquad%20%5Cmathcal%7BL%7D_k%5E%7B%5Ctext%7BIWAE%7D%7D%20=%20%5Clog%20p(%5Ctextbf%7Bx%7D)%20-%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Cfrac%0A%7B%5Cmu_2%7D%7B2%5Cmu%5E2%7D%20+%20%5Cfrac%20%7B1%7D%7Bk%5E2%7D%20%5Cleft(%20%5Cfrac%20%7B%5Cmu_3%7D%7B3%5Cmu%5E3%7D%20-%20%5Cfrac%0A%7B3%5Cmu_2%5E2%7D%7B4%5Cmu%5E4%7D%20%5Cright)%20+%20%5Cmathcal%7BO%7D(k%5E%7B-3%7D)%5C%5C%0A&amp;%5Ctext%7Bwith%7D%20%5Cquad%0A%5Cmu%20=%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%7D%20%5Cleft%5B%20%5Cfrac%0A%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%20%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bz%7D%0A%5Cright)%7D%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)%7D%20%5Cright%5D%0A%5Cquad%0A%5Cmu_i%20=%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%7D%20%5Cleft%5B%0A%5Cleft(%20%5Cfrac%0A%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%20%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bz%7D%0A%5Cright)%7D%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)%7D%0A-%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%7D%20%5Cleft%5B%20%5Cfrac%0A%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%20%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bz%7D%0A%5Cright)%7D%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)%7D%20%5Cright%5D%0A%5Cright)%5E2%20%5Cright%5D%0A%5Cend%7Balign%7D%0A"></p>
<p>Thus, the true objective is a <strong>biased</strong> - in the order of <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BO%7D%5Cleft(k%5E%7B-1%7D%5Cright)"> - and <strong>consistent</strong> estimator of the marginal log likelihood <img src="https://latex.codecogs.com/png.latex?%5Clog%20p(%5Ctextbf%7Bx%7D)">. The empirical estimator of the true IWAE objective is basically a special Monte-Carlo estimator (only one sample per <img src="https://latex.codecogs.com/png.latex?k">) on the true IWAE objective. It is more or less luck that we can formulate the same empirical objective and interpret it differently as the Monte-Carlo estimator (with <img src="https://latex.codecogs.com/png.latex?k"> samples) on the data log-likelihood.</p>
</div>
</div>
</div>
<!-- What makes their formulation superior to estimating the true data
 log-likelihood?

- their formulation contains the ELBO as a special case ($k=1$)
 -->
<p>Let us take a closer look on how to compute gradients (fast) for the empirical estimate of the IWAE objective:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D_k%5E%7B%5Ctext%7BIWAE%7D%7D%20%5Cleft(%20%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D;%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20&amp;=%20%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%5Clog%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Csum_%7Bl=1%7D%5Ek%20w%5E%7B(i,l)%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%0A%5Ctextbf%7Bz%7D%5E%7B(i,%20l)%7D_%7B%5Cboldsymbol%7B%5Cphi%7D%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%20%5Cright)%20%5Cquad%0A%5Ctext%7Bwith%7D%20%5Cquad%0A%5Ctextbf%7Bz%7D%5E%7B(i,%20l)%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%5C%5C%0A&amp;%5Cstackrel%7B%5Ctext%7B(*)%7D%7D%7B=%7D%0A%5Csum_%7Bl=1%7D%5E%7Bk%7D%20%5Cfrac%20%7Bw%5E%7B(i,%20l)%7D%7D%7B%5Csum_%7Bm=1%7D%5E%7Bk%7D%20w%5E%7B(i,%0Am)%7D%7D%20%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Clog%20w%5E%7B(i,l)%7D%20=%0A%5Csum_%7Bl=1%7D%5E%7Bk%7D%20%5Cwidetilde%7Bw%7D%5E%7B(i,%20l)%7D%20%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Clog%20w%5E%7B(i,l)%7D,%0A%5Cend%7Balign%7D%0A"></p>
<p>where we introduced the following notation</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7B(normalized)%20importance%20weights:%7D%20%5Cquad%0A%5Cwidetilde%7Bw%7D%5E%7B(i,%20l)%7D%20=%20%5Cfrac%20%7Bw%5E%7B(i,l)%7D%7D%7B%5Csum_%7Bm=1%7D%5Ek%20w%5E%7B(i,%20m)%7D%7D%0A"></p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<img src="https://latex.codecogs.com/png.latex?(*)">: <strong>Gradient Derivation</strong>:
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cfrac%20%7B%5Cpartial%20%5Cleft%5B%20%5Clog%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Csum_i%5E%7Bk%7D%20w_i%20%5Cleft(%20%5Cboldsymbol%7B%5Ctheta%7D%0A%5Cright)%20%5Cright%5D%7D%7B%5Cpartial%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20&amp;%5Cstackrel%7B%5Ctext%7Bchain%20rule%7D%7D%7B=%7D%20%20%5Cfrac%20%7B%5Cpartial%0A%5Clog%20a%7D%7B%5Cpartial%20a%7D%20%5Csum_%7Bi%7D%5E%7Bk%7D%20%5Cfrac%20%7B%5Cpartial%20a%7D%7B%5Cpartial%20w_i%7D%20%5Cfrac%0A%7B%5Cpartial%20w_i%7D%7B%5Cpartial%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cquad%20%5Ctext%7Bwith%7D%0A%5Cquad%20a%20=%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Csum_%7Bi%7D%5Ek%20w_i%20(%5Cboldsymbol%7B%5Ctheta%7D)%5C%5C%0A&amp;=%20%5Cfrac%20%7Bk%7D%7B%5Csum_l%5Ek%20w_l%7D%20%5Csum_%7Bi%7D%5E%7Bk%7D%5Cfrac%20%7B1%7D%7Bk%7D%20%5Cfrac%20%7B%5Cpartial%0Aw_i%20(%5Cboldsymbol%7B%5Ctheta%7D)%7D%7B%5Cpartial%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20=%20%5Cfrac%20%7B1%7D%7B%5Csum_l%5Ek%0Aw_l%7D%20%5Csum_%7Bi%7D%5E%7Bk%7D%20%5Cfrac%20%7B%5Cpartial%0Aw_i%20(%5Cboldsymbol%7B%5Ctheta%7D)%7D%7B%5Cpartial%20%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%5Cend%7Balign%7D%0A"></p>
<p>Lastly, we use the following identity</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%20%7B%5Cpartial%20w_i%20(%5Cboldsymbol%7B%5Ctheta%7D)%7D%7B%5Cpartial%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20=%20w_i%0A(%5Cboldsymbol%7B%5Ctheta%7D)%20%5Ccdot%0A%5Cfrac%20%7B%5Cpartial%20%5Clog%20w_i%20(%5Cboldsymbol%7B%5Ctheta%7D)%7D%7B%5Cpartial%20%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%5Cstackrel%7B%5Ctext%7Bchain%20rule%7D%7D%7B=%7D%20w_i%20(%5Cboldsymbol%7B%5Ctheta%7D)%20%5Ccdot%20%5Cfrac%20%7B1%7D%7Bw_i%0A(%5Cboldsymbol%7B%5Ctheta%7D)%7D%20%5Ccdot%0A%5Cfrac%20%7B%5Cpartial%20w_i%20(%5Cboldsymbol%7B%5Ctheta%7D)%7D%7B%5Cpartial%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20=%0A%5Cfrac%20%7B%5Cpartial%20w_i%20(%5Cboldsymbol%7B%5Ctheta%7D)%7D%7B%5Cpartial%20%5Cboldsymbol%7B%5Ctheta%7D%7D%0A"></p>
</div>
</div>
</div>
<p>Similar to VAEs, this formulation poses a problem for backpropagation due to the sampling operation. We use the same reparametrization trick to circumvent this problem and obtain a low variance update rule:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D_k%5E%7B%5Ctext%7BIWAE%7D%7D%20&amp;=%0A%5Csum_%7Bl=1%7D%5E%7Bk%7D%20%5Cwidetilde%7Bw%7D%5E%7B(i,%20l)%7D%20%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%0A%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Clog%20w%5E%7B(i,l)%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%0A%5Ctextbf%7Bz%7D_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%5E%7B(i,l)%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%20%5Cright)%0A%5Cquad%20%5Ctext%7Bwith%7D%20%5Cquad%0A%5Ctextbf%7Bz%7D%5E%7B(i,l)%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%5C%5C%0A&amp;=%20%5Csum_%7Bl=1%7D%5Ek%20%5Cwidetilde%7Bw%7D%5E%7B(i,l)%7D%20%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%0A%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Clog%20w%5E%7B(i,l)%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%0Ag_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%0A%5Cboldsymbol%7B%5Cepsilon%7D%5E%7B(l)%7D%5Cright),%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright),%20%5Cquad%20%5Cquad%0A%5Cboldsymbol%7B%5Cepsilon%7D%20%5Csim%20p(%5Cboldsymbol%7B%5Cepsilon%7D)%0A%5Cend%7Balign%7D%0A"></p>
<p>To make things clearer for the implementation, let us unpack the log</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20w%5E%7B(i,l)%7D%20=%20%5Clog%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%5Cright)%7D%0A%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%20=%20%5Cunderbrace%7B%5Clog%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft%20(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%0A%5Cright)%7D_%7B%5Ctext%7BNLL%7D%7D%20+%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%0A%5Cright)%20-%20%5Clog%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%0A"></p>
<p>Before, we are going to implement this formulation, let us look whether we can separate out the KL divergence for the true IWAE objective of <a href="https://arxiv.org/abs/1509.00519">Burda et al. (2016)</a>. Therefore, we state the update for the true objective:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%0A%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%5Cmathcal%7BL%7D_k%5E%7B%5Ctext%7BIWAE%7D%7D%20&amp;=%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%0A%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%5E%7B(1)%7D,%20%5Cdots,%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%7D%20%5Cleft%5B%20%5Clog%20%5Cfrac%20%7B1%7D%7Bk%7D%0A%5Csum_%7Bl=1%7D%5E%7Bk%7D%20w%5E%7B(l)%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D,%0A%5Ctextbf%7Bz%7D%5E%7B(l)%7D_%7B%5Cboldsymbol%7B%5Cphi%7D%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%20%5Cright)%20%5Cright%5D%5C%5C%0A&amp;=%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%5E%7B(1)%7D,%20%5Cdots,%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%7D%20%5Cleft%5B%0A%5Csum_%7Bl=1%7D%5E%7Bk%7D%20%5Cwidetilde%7Bw%7D_i%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%0A%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%5Clog%20w%5E%7B(l)%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bz%7D_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%5E%7B(l)%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%20%5Cright)%20%5Cright%5D%5C%5C%0A&amp;=%5Csum_%7Bl=1%7D%5E%7Bk%7D%20%5Cwidetilde%7Bw%7D_i%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%5E%7B(l)%7D%7D%20%5Cleft%5B%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Clog%20w%5E%7B(l)%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D,%0A%5Ctextbf%7Bz%7D_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%5E%7B(l)%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%20%5Cright)%0A%5Cright%5D%5C%5C%0A&amp;%5Cneq%20%5Csum_%7Bl=1%7D%5E%7Bk%7D%20%5Cwidetilde%7Bw%7D_i%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%5E%7B(l)%7D%7D%20%5Cleft%5B%0A%5Clog%20w%5E%7B(l)%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D,%0A%5Ctextbf%7Bz%7D_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%5E%7B(l)%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%20%5Cright)%0A%5Cright%5D%0A%5Cend%7Balign%7D%0A"></p>
<p>Unfortunately, we cannot simply move the gradient outside the expectation. If we could, we could simply rearrange the terms inside the expectation as in the standard VAE case.</p>
<hr>
<p>Let us look, what would happen, if we were to describe the true IWAE estimator as the data log-likelihood <img src="https://latex.codecogs.com/png.latex?%5Clog%20p%20%5Cleft(%20%5Ctextbf%7Bx%7D%20%5Cright)"> in which the sampling distribution is exchanged via importance sampling:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Clog%20p%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20&amp;=%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Clog%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%0Aq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%7D%20%5Cleft%5B%20w%0A(%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%20%5Ctextbf%7Bz%7D,%20%5Cboldsymbol%7B%5Ctheta%7D)%5Cright%5D%5C%5C%0A&amp;%5Cneq%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20%20%5Cmathbb%7BE%7D_%7B%5Ctextbf%7Bz%7D%20%5Csim%0Aq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%7D%20%5Cleft%5B%20%5Clog%20w%0A(%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%20%5Ctextbf%7Bz%7D,%20%5Cboldsymbol%7B%5Ctheta%7D)%5Cright%5D%0A%5Cend%7Balign%7D%0A"></p>
<p>Here, we also cannot separate the KL divergence out, since we cannot simply move the log inside the expectation.</p>
</section>
</section>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>Let’s put this into practice and compare the standard VAE with an IWAE. We are going to perform a very similar experiment to the density estimation experiment by <a href="https://arxiv.org/abs/1509.00519">Burda et al.&nbsp;(2016)</a>, i.e., we are going to train both a VAE and IWAE with different number of samples <img src="https://latex.codecogs.com/png.latex?k%5Cin%20%5C%7B1,%2010%5C%7D"> on the binarized MNIST dataset.</p>
<section id="dataset" class="level3">
<h3 class="anchored" data-anchor-id="dataset">Dataset</h3>
<p>Let’s first build a binarized version of the MNIST dataset. As noted by <a href="https://arxiv.org/abs/1509.00519">Burda et al.&nbsp;(2016)</a>, <code>the generative modeling literature is inconsistent about the method of binarization</code>. We employ the same procedure as <a href="https://arxiv.org/abs/1509.00519">Burda et al.&nbsp;(2016)</a>: <code>binary-valued observations are sampled with expectations equal to the real values in the training set</code>:</p>
<div class="cell" data-execution_count="1">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.distributions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dists</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets, transforms</span>
<span id="cb1-4"></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Binarized_MNIST(datasets.MNIST):</span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, root, train, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, target_transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb1-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(Binarized_MNIST, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(root, train, transform, target_transform, download)</span>
<span id="cb1-9"></span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb1-11">        img, target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(idx)</span>
<span id="cb1-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> dists.Bernoulli(img).sample().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.float32)</span></code></pre></div>
</details>
</div>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/iwae/img/binarized_MNIST.png" title="Binarized MNIST Dataset" class="img-fluid" alt="Binarized MNIST Dataset"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>Binarized MNIST Dataset</strong></td>
</tr>
</tbody>
</table>
</section>
<section id="model-implementation" class="level3">
<h3 class="anchored" data-anchor-id="model-implementation">Model Implementation</h3>
<ul>
<li><p><strong>VAE Implementation</strong></p>
<p>The VAE implementation is straightforward. For later evaluation, I added <code>create_latent_traversal</code> and <code>compute_marginal_log_likelihood</code>. The ladder computes the marginal log-likelihood <img src="https://latex.codecogs.com/png.latex?%5Clog%20p(%5Ctextbf%7Bx%7D)"> in which the sampling distribution is exchanged to the approximated posterior <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5Cright%20)"> using the standard Monte-Carlo estimator, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Clog%20p(%5Ctextbf%7Bx%7D)%20=%20%5Cmathbb%7BE%7D_%7Bz%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%7D%20%5Cleft%5B%20%5Cfrac%0A%20%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bz%7D%5Cright)%7D%0A%20%20%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)%7D%20%5Cright%5D%0A%20%20%5Capprox%20%5Clog%20%5Cleft%5B%20%5Cfrac%20%7B1%7D%7Bk%7D%20%5Csum_%7Bl=1%7D%5Ek%20w%5E%7B(l)%7D%20%5Cright%5D%20=%0A%20%20%5Cmathcal%7BL%7D%5E%7B%5Ctext%7BIWAE%7D%7D_k%20(%5Ctextbf%7Bx%7D)%0A"></p>
<p>Remind that this formulation equals the empirical IWAE estimator. However, we can only compute the (unnormalized) logarithmic importance weights</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20w%5E%7B(i,l)%7D%20=%20%5Clog%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%5Cright)%7D%0A%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%20=%20%5Clog%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft%20(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%0A%5Cright)%20+%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%0A%5Cright)%20-%20%5Clog%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(l)%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%0A"></p>
<p>Accordingly, we compute the marginal log-likelihood as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D%5E%7B%5Ctext%7BIWAE%7D%7D_k%20%5Cleft(%20%5Cboldsymbol%7B%5Ctheta%7D,%0A%5Cboldsymbol%7B%5Cphi%7D;%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20&amp;=%20%5Cunderbrace%7B%5Clog%201%7D_%7B=0%7D%20-%20%5Clog%0Ak%20+%20%5Clog%20%5Cleft(%20%5Csum_%7Bi=1%7D%5Ek%20w%5E%7B(i,l)%7D%20%5Cright)%20%5C%5C%0A&amp;=%20-%5Clog%20k%20+%20%5Cunderbrace%7B%5Clog%20%5Cleft(%20%5Csum_%7Bi=1%7D%5Ek%20%5Cexp%20%5Cbig%5B%20%5Clog%20w%5E%7B(i,%20l)%7D%20%5Cbig%5D%20%5Cright)%7D_%7B=%5Ctext%7Btorch.logsumexp%7D%7D%0A%5Cend%7Balign%7D%0A"></p></li>
</ul>
<div class="cell" data-execution_count="2">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"></span>
<span id="cb2-4"></span>
<span id="cb2-5">MNIST_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span></span>
<span id="cb2-6">HIDDEN_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span></span>
<span id="cb2-7">LATENT_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> VAE(nn.Module):</span>
<span id="cb2-11"></span>
<span id="cb2-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, k):</span>
<span id="cb2-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(VAE, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> k</span>
<span id="cb2-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-16">            nn.Flatten(),</span>
<span id="cb2-17">            nn.Linear(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, HIDDEN_DIM),</span>
<span id="cb2-18">            nn.ReLU(),</span>
<span id="cb2-19">            nn.Linear(HIDDEN_DIM, HIDDEN_DIM),</span>
<span id="cb2-20">            nn.ReLU(),</span>
<span id="cb2-21">            nn.Linear(HIDDEN_DIM, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>LATENT_DIM)</span>
<span id="cb2-22">        )</span>
<span id="cb2-23">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-24">            nn.Linear(LATENT_DIM, HIDDEN_DIM),</span>
<span id="cb2-25">            nn.ReLU(),</span>
<span id="cb2-26">            nn.Linear(HIDDEN_DIM, HIDDEN_DIM),</span>
<span id="cb2-27">            nn.ReLU(),</span>
<span id="cb2-28">            nn.Linear(HIDDEN_DIM, MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb2-29">            nn.Sigmoid()</span>
<span id="cb2-30">        )</span>
<span id="cb2-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-32"></span>
<span id="cb2-33">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_loss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> k:</span>
<span id="cb2-35">            k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.k</span>
<span id="cb2-36">        [x_tilde, z, mu_z, log_var_z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(x, k)</span>
<span id="cb2-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upsample x</span></span>
<span id="cb2-38">        x_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute negative log-likelihood</span></span>
<span id="cb2-40">        NLL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>dists.Bernoulli(x_tilde).log_prob(x_s).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)).mean()</span>
<span id="cb2-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copmute kl divergence</span></span>
<span id="cb2-42">        KL_Div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> log_var_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu_z.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> log_var_z.exp()).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).mean()</span>
<span id="cb2-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute loss</span></span>
<span id="cb2-44">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> NLL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> KL_Div</span>
<span id="cb2-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> loss</span>
<span id="cb2-46"></span>
<span id="cb2-47">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-48">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""feed image (x) through VAE</span></span>
<span id="cb2-49"></span>
<span id="cb2-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x (torch tensor): input [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb2-52"></span>
<span id="cb2-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x_tilde (torch tensor): [batch, k, img_channels, img_dim, img_dim]</span></span>
<span id="cb2-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z (torch tensor): latent space samples [batch, k, LATENT_DIM]</span></span>
<span id="cb2-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            mu_z (torch tensor): mean latent space [batch, LATENT_DIM]</span></span>
<span id="cb2-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            log_var_z (torch tensor): log var latent space [batch, LATENT_DIM]</span></span>
<span id="cb2-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> k:</span>
<span id="cb2-60">            k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.k</span>
<span id="cb2-61">        z, mu_z, log_var_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(x, k)</span>
<span id="cb2-62">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z, k)</span>
<span id="cb2-63">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [x_tilde, z, mu_z, log_var_z]</span>
<span id="cb2-64"></span>
<span id="cb2-65">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, k):</span>
<span id="cb2-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""computes the approximated posterior distribution parameters and</span></span>
<span id="cb2-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        samples from this distribution</span></span>
<span id="cb2-68"></span>
<span id="cb2-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x (torch tensor): input [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb2-71"></span>
<span id="cb2-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z (torch tensor): latent space samples [batch, k, LATENT_DIM]</span></span>
<span id="cb2-74"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            mu_E (torch tensor): mean latent space [batch, LATENT_DIM]</span></span>
<span id="cb2-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            log_var_E (torch tensor): log var latent space [batch, LATENT_DIM]</span></span>
<span id="cb2-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get encoder distribution parameters</span></span>
<span id="cb2-78">        out_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder(x)</span>
<span id="cb2-79">        mu_E, log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.chunk(out_encoder, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-80">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># increase shape for sampling [batch, samples, latent_dim]</span></span>
<span id="cb2-81">        mu_E_ups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_E.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-82">        log_var_E_ups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_var_E.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-83">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample noise variable for each batch and sample</span></span>
<span id="cb2-84">        epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(log_var_E_ups)</span>
<span id="cb2-85">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get latent variable by reparametrization trick</span></span>
<span id="cb2-86">        z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_E_ups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.exp(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>log_var_E_ups) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> epsilon</span>
<span id="cb2-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> z, mu_E, log_var_E</span>
<span id="cb2-88"></span>
<span id="cb2-89">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z, k):</span>
<span id="cb2-90">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""computes the Bernoulli mean of p(x|z)</span></span>
<span id="cb2-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        note that linear automatically parallelizes computation</span></span>
<span id="cb2-92"></span>
<span id="cb2-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z (torch tensor): latent space samples [batch, k, LATENT_DIM]</span></span>
<span id="cb2-95"></span>
<span id="cb2-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x_tilde (torch tensor): [batch, k, img_channels, img_dim, img_dim]</span></span>
<span id="cb2-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-99">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get decoder distribution parameters</span></span>
<span id="cb2-100">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(z)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch*samples, MNIST_SIZE**2]</span></span>
<span id="cb2-101">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape into [batch, samples, 1, MNIST_SIZE, MNIST_SIZE] (input shape)</span></span>
<span id="cb2-102">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_tilde.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, MNIST_SIZE, MNIST_SIZE)</span>
<span id="cb2-103">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_tilde</span>
<span id="cb2-104"></span>
<span id="cb2-105">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_latent_traversal(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, image_batch, n_pert, pert_min_max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_latents<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>):</span>
<span id="cb2-106">        device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_batch.device</span>
<span id="cb2-107">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize images of latent traversal</span></span>
<span id="cb2-108">        images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(n_latents, n_pert, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>image_batch.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>::])</span>
<span id="cb2-109">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># select the latent_dims with lowest variance (most informative)</span></span>
<span id="cb2-110">        [x_tilde, z, mu_z, log_var_z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(image_batch)</span>
<span id="cb2-111">        i_lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_var_z.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).sort()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][:n_latents]</span>
<span id="cb2-112">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sweep for latent traversal</span></span>
<span id="cb2-113">        sweep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pert_min_max, pert_min_max, n_pert)</span>
<span id="cb2-114">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take first image and encode</span></span>
<span id="cb2-115">        [z, mu_E, log_var_E] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(image_batch[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-116">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> latent_dim, i_lat <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(i_lats):</span>
<span id="cb2-117">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> pertubation_dim, z_replaced <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(sweep):</span>
<span id="cb2-118">                z_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.detach().clone()</span>
<span id="cb2-119">                z_new[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][i_lat] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_replaced</span>
<span id="cb2-120"></span>
<span id="cb2-121">                img_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z_new.to(device), k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-122">                img_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_rec[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].clamp(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).cpu()</span>
<span id="cb2-123"></span>
<span id="cb2-124">                images[latent_dim][pertubation_dim] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_rec</span>
<span id="cb2-125">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> images</span>
<span id="cb2-126"></span>
<span id="cb2-127">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_marginal_log_likelihood(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-128">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""computes the marginal log-likelihood in which the sampling</span></span>
<span id="cb2-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        distribution is exchanged to q_{\phi} (z|x),</span></span>
<span id="cb2-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        this function can also be used for the IWAE loss computation</span></span>
<span id="cb2-131"></span>
<span id="cb2-132"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-133"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x (torch tensor): images [batch, img_channels, img_dim, img_dim]</span></span>
<span id="cb2-134"></span>
<span id="cb2-135"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-136"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            log_marginal_likelihood (torch tensor): scalar</span></span>
<span id="cb2-137"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            log_w (torch tensor): unnormalized log importance weights [batch, k]</span></span>
<span id="cb2-138"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-139">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> k:</span>
<span id="cb2-140">            k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.k</span>
<span id="cb2-141">        [x_tilde, z, mu_z, log_var_z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(x, k)</span>
<span id="cb2-142">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upsample mu_z, std_z, x_s</span></span>
<span id="cb2-143">        mu_z_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_z.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-144">        std_z_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> log_var_z).exp().unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-145">        x_s <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).repeat(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, k, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-146">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute logarithmic unnormalized importance weights [batch, k]</span></span>
<span id="cb2-147">        log_p_x_g_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dists.Bernoulli(x_tilde).log_prob(x_s).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb2-148">        log_prior_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dists.Normal(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).log_prob(z).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-149">        log_q_z_g_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dists.Normal(mu_z_s, std_z_s).log_prob(z).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-150">        log_w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_p_x_g_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> log_prior_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> log_q_z_g_x</span>
<span id="cb2-151">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute marginal log-likelihood</span></span>
<span id="cb2-152">        log_marginal_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (torch.logsumexp(log_w, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>  np.log(k)).mean()</span>
<span id="cb2-153">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> log_marginal_likelihood, log_w</span></code></pre></div>
</details>
</div>
<ul>
<li><p><strong>IWAE Implementation</strong></p>
<p>For the <code>IWAE</code> class implementation, we only need to adapt the loss computation. Everything else can be inherited from the <code>VAE</code> class. In fact, we can simply use <code>compute_marginal_log_likelihood</code> as the loss function computation.</p>
<p>For the interested reader, it might be interesting to understand the original implementation. Therefore, I added to other modes of loss function calculation which are based on the idea of <strong>importance-weighted sample losses</strong>.</p>
<p>As shown in the derivation, we can derive the gradient to be a linear combination of importance-weighted sample losses, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D_k%5E%7B%5Ctext%7BIWAE%7D%7D%20&amp;=%0A%5Csum_%7Bl=1%7D%5E%7Bk%7D%20%5Cwidetilde%7Bw%7D%5E%7B(i,%20l)%7D%20%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%0A%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Clog%20w%5E%7B(i,l)%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%0A%5Ctextbf%7Bz%7D_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%5E%7B(i,l)%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%20%5Cright)%0A%5Cend%7Balign%7D%0A"></p>
<p>However, computing the normalized importance weights <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7Bw%7D%5E%7B(i,l)%7D"> from the unnormalized logarithmic importance weights <img src="https://latex.codecogs.com/png.latex?%5Clog%20w%5E%7B(i,l)%7D"> turns out to be problematic. To understand why, let’s look how the normalized importance weights are defined</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cwidetilde%7Bw%7D%5E%7B(i,l)%7D%20=%20%5Cfrac%20%7Bw%5E%7B(i,%20l)%7D%20%7D%20%7B%5Csum_%7Bl=1%7D%5Ek%20w%5E%7B(i,%20l)%7D%7D%0A"></p>
<p>Note that <img src="https://latex.codecogs.com/png.latex?%5Clog%20w%5E%7B(i,%20l)%7D%20%5Cin%20%5B-%5Cinfty,%200%5D"> may be some big negative number. Simply taken the logs into the exp function and summing them up, is a bad idea for two reasons. Firstly, we might expect some rounding errors. Secondly, dividing by some really small number will likely produce <code>nans</code>. To circumvent this problem, there are two possible strategies:</p>
<ol type="1">
<li><p><em>Original Implementation</em>: While looking through the original implementation, I found that they simply shift the unnormalized logarithmic importance weights, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog%20s%5E%7B(i,%20l)%7D%20=%20%5Clog%20w%5E%7B(i,l)%7D%20-%20%5Cunderbrace%7B%5Cmax_%7Bl%20%5Cin%20%5B1,%20k%5D%7D%20%5Clog%20w%5E%7B(i,l)%7D%7D_%7B=a%7D%0A"></p>
<p>Then, the normalized importance weights can simply be calculated as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cwidetilde%7Bw%7D%5E%7B(i,l)%7D%20=%20%5Cfrac%20%7B%5Cexp%20%5Cleft(%20%5Clog%20s%5E%7B(i,%20l)%7D%20%5Cright)%7D%20%7B%0A%5Csum_%7Bl=1%7D%5Ek%20%5Cexp%20%5Cleft(%20%5Clog%20s%5E%7B(i,l)%7D%20%5Cright)%7D%20=%20%5Cfrac%20%7B%20%5Cfrac%20%7B%5Cexp%20%5Cleft(%20%5Clog%0Aw%5E%7B(i,%20l)%7D%20%5Cright)%7D%7B%5Cexp%20a%7D%20%7D%20%7B%5Csum_%7Bl=1%7D%5Ek%20%5Cfrac%20%7B%5Cexp%20%5Cleft(%20%5Clog%0Aw%5E%7B(i,%20l)%7D%20%5Cright)%7D%7B%5Cexp%20a%7D%20%7D%0A"></p>
<p>The idea behind this approach is to increase numerical stability by shifting the logarithmic unnormalized importance weights into a range where less numerical issues occur (effectively simply increasing them).</p></li>
<li><p><em>Use LogSumExp</em>: Another common trick is to firstly calculate the normalized importance weights in log units. Then, we get</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%20%5Clog%20%5Cwidetilde%7Bw%7D%5E%7B(i,%20l)%7D%20=%20%5Clog%20%5Cfrac%20%7Bw%5E%7B(i,l)%7D%7D%7B%5Csum_%7Bl=1%7D%5Ek%0A%20%20%20w%5E%7B(i,l)%7D%7D%20=%20%5Clog%20w%5E%7B(i,%20l)%7D%20-%20%5Cunderbrace%7B%5Clog%20%5Csum_%7Bl=1%7D%5Ek%20%5Cexp%20%5Cleft(%20w%5E%7B(i,l)%7D%20%5Cright)%7D_%7B=%5Ctext%7Btorch.logsumexp%7D%7D%0A"></p></li>
</ol></li>
</ul>
<div class="cell" data-execution_count="3">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> IWAE(VAE):</span>
<span id="cb3-2"></span>
<span id="cb3-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, k):</span>
<span id="cb3-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(IWAE, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(k)</span>
<span id="cb3-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_loss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fast'</span>):</span>
<span id="cb3-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> k:</span>
<span id="cb3-9">            k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.k</span>
<span id="cb3-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute unnormalized importance weights in log_units</span></span>
<span id="cb3-11">        log_likelihood, log_w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.compute_marginal_log_likelihood(x, k)</span>
<span id="cb3-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># loss computation (several ways possible)</span></span>
<span id="cb3-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'original'</span>:</span>
<span id="cb3-14">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">####################### ORIGINAL IMPLEMENTAION #######################</span></span>
<span id="cb3-15">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numerical stability (found in original implementation)</span></span>
<span id="cb3-16">            log_w_minus_max <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> log_w.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-17">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute normalized importance weights (no gradient)</span></span>
<span id="cb3-18">            w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_w_minus_max.exp()</span>
<span id="cb3-19">            w_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> w.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)).detach()</span>
<span id="cb3-20">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute loss (negative IWAE objective)</span></span>
<span id="cb3-21">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(w_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> log_w).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).mean()</span>
<span id="cb3-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'normalized weights'</span>:</span>
<span id="cb3-23">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">######################## LOG-NORMALIZED TRICK ########################</span></span>
<span id="cb3-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copmute normalized importance weights (no gradient)</span></span>
<span id="cb3-25">            log_w_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> torch.logsumexp(log_w, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-26">            w_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_w_tilde.exp().detach()</span>
<span id="cb3-27">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute loss (negative IWAE objective)</span></span>
<span id="cb3-28">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(w_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> log_w).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).mean()</span>
<span id="cb3-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> mode <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'fast'</span>:</span>
<span id="cb3-30">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">########################## SIMPLE AND FAST ###########################</span></span>
<span id="cb3-31">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>log_likelihood</span>
<span id="cb3-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> loss</span></code></pre></div>
</details>
</div>
<ul>
<li><strong>Training Procedure</strong></li>
</ul>
<div class="cell" data-execution_count="4">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> livelossplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PlotLosses</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span></span>
<span id="cb4-6">LEARNING_RATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span></span>
<span id="cb4-7">WEIGHT_DECAY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-6</span></span>
<span id="cb4-8"></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train(dataset, vae_model, iwae_model, num_epochs):</span>
<span id="cb4-11">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb4-12">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(device))</span>
<span id="cb4-13"></span>
<span id="cb4-14">    data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-15">                             num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb4-16">    vae_model.to(device)</span>
<span id="cb4-17">    iwae_model.to(device)</span>
<span id="cb4-18"></span>
<span id="cb4-19">    optimizer_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(vae_model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LEARNING_RATE,</span>
<span id="cb4-20">                                     weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WEIGHT_DECAY)</span>
<span id="cb4-21">    optimizer_iwae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(iwae_model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>LEARNING_RATE,</span>
<span id="cb4-22">                                     weight_decay<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WEIGHT_DECAY)</span>
<span id="cb4-23">    losses_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotLosses(groups<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Loss'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'VAE (ELBO)'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IWAE (NLL)'</span>]})</span>
<span id="cb4-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb4-25">        avg_NLL_VAE, avg_NLL_IWAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data_loader:</span>
<span id="cb4-27">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.to(device)</span>
<span id="cb4-28">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># IWAE update</span></span>
<span id="cb4-29">            optimizer_iwae.zero_grad()</span>
<span id="cb4-30">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iwae_model.compute_loss(x)</span>
<span id="cb4-31">            loss.backward()</span>
<span id="cb4-32">            optimizer_iwae.step()</span>
<span id="cb4-33">            avg_NLL_IWAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb4-34"></span>
<span id="cb4-35">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># VAE update</span></span>
<span id="cb4-36">            optimizer_vae.zero_grad()</span>
<span id="cb4-37">            loss<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae_model.compute_loss(x)</span>
<span id="cb4-38">            loss.backward()</span>
<span id="cb4-39">            optimizer_vae.step()</span>
<span id="cb4-40"></span>
<span id="cb4-41">            avg_NLL_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb4-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot current losses</span></span>
<span id="cb4-43">        losses_plot.update({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'VAE (ELBO)'</span>: avg_NLL_VAE, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IWAE (NLL)'</span>: avg_NLL_IWAE},</span>
<span id="cb4-44">                           current_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch)</span>
<span id="cb4-45">        losses_plot.send()</span>
<span id="cb4-46">    trained_vae, trained_iwae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae_model, iwae_model</span>
<span id="cb4-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> trained_vae, trained_iwae</span></code></pre></div>
</details>
</div>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>Let’s train both models for <img src="https://latex.codecogs.com/png.latex?k%5Cin%20%5C%7B%201,%2010%20%5C%7D">:</p>
<div class="cell" data-execution_count="5">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">train_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.MNIST(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-2">                          download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.ToTensor())</span>
<span id="cb5-3">num_epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb5-4">list_of_ks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb5-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> list_of_ks:</span>
<span id="cb5-6">    vae_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VAE(k)</span>
<span id="cb5-7">    iwae_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> IWAE(k)</span>
<span id="cb5-8">    trained_vae, trained_iwae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(train_ds, vae_model, iwae_model, num_epochs)</span>
<span id="cb5-9">    torch.save(trained_vae, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'./results/trained_vae_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth'</span>)</span>
<span id="cb5-10">    torch.save(trained_iwae, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'./results/trained_iwae_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth'</span>)</span></code></pre></div>
</details>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bk=1%7D"> <img src="https://borea17.github.io/paper_summaries/iwae/img/k_1.png" title="Training k=1" class="img-fluid" alt="Training k=1"> <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bk=10%7D"> <img src="https://borea17.github.io/paper_summaries/iwae/img/k_10.png" title="Training k=10" class="img-fluid" alt="Training k=10"></p>
<p>Note that during training, we compared the <strong>loss of the VAE (ELBO)</strong> with the <strong>loss of the IWAE (empirical estimate of marginal log-likelihood)</strong>. Clearly, for <img src="https://latex.codecogs.com/png.latex?k=1"> these losses are nearly equal (as expected). For <img src="https://latex.codecogs.com/png.latex?k=10">, the difference is much greater (also expected). Now let’s compare the marginal log-likelihood on the test samples. Since the marginal log-likelihood estimator gets more accurate with increasing <img src="https://latex.codecogs.com/png.latex?k">, we set <img src="https://latex.codecogs.com/png.latex?k=200"> for the evaluation on the test set:</p>
<div class="cell" data-execution_count="6">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> prettytable <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PrettyTable</span>
<span id="cb6-2"></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_test_log_likelihood(test_dataset, trained_vae, trained_iwae, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>):</span>
<span id="cb6-5">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb6-6"></span>
<span id="cb6-7">    data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(test_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>,</span>
<span id="cb6-8">                             shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb6-9">    trained_vae.to(device)</span>
<span id="cb6-10">    trained_iwae.to(device)</span>
<span id="cb6-11"></span>
<span id="cb6-12">    avg_marginal_ll_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-13">    avg_marginal_ll_IWAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data_loader:</span>
<span id="cb6-15">        marginal_ll, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_vae.compute_marginal_log_likelihood(x.to(device), k)</span>
<span id="cb6-16">        avg_marginal_ll_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> marginal_ll.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb6-17"></span>
<span id="cb6-18">        marginal_ll, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_iwae.compute_marginal_log_likelihood(x.to(device), k)</span>
<span id="cb6-19">        avg_marginal_ll_IWAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> marginal_ll.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb6-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> avg_marginal_ll_VAE, avg_marginal_ll_IWAE</span>
<span id="cb6-21"></span>
<span id="cb6-22"></span>
<span id="cb6-23">out_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PrettyTable([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VAE"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IWAE"</span>])</span>
<span id="cb6-24">test_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Binarized_MNIST(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb6-25">                                  transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.ToTensor())</span>
<span id="cb6-26"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> k <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> list_of_ks:</span>
<span id="cb6-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load models</span></span>
<span id="cb6-28">    trained_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'./results/trained_vae_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth'</span>)</span>
<span id="cb6-29">    trained_iwae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'./results/trained_iwae_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth'</span>)</span>
<span id="cb6-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute average marginal log-likelihood on test dataset</span></span>
<span id="cb6-31">    ll_VAE, ll_IWAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_test_log_likelihood(test_ds, trained_vae, trained_iwae)</span>
<span id="cb6-32">    out_table.add_row([k, np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(ll_VAE, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(ll_IWAE, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)])</span>
<span id="cb6-33"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(out_table)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/iwae/img/table.png" title="Results NLL" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Results NLL</figcaption>
</figure>
</div>
<p>Similar to the paper, the IWAE benefits from an increased <img src="https://latex.codecogs.com/png.latex?k"> whereas the VAE performs nearly equal.</p>
</section>
<section id="visualizations" class="level3">
<h3 class="anchored" data-anchor-id="visualizations">Visualizations</h3>
<p>Lastly, let’s make some nice plots. Note that the differences are very subtle and it’s not very helpful to make an argument based on the following visualization. They mainly serve as a verification that both models do something useful.</p>
<ul>
<li><strong>Reconstructions</strong></li>
</ul>
<div class="cell" data-execution_count="7">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.gridspec <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> GridSpec</span>
<span id="cb7-3"></span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_reconstructions(vae_model, iwae_model, dataset, SEED<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb7-6">    np.random.seed(SEED)</span>
<span id="cb7-7">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb7-8"></span>
<span id="cb7-9">    vae_model.to(device)</span>
<span id="cb7-10">    iwae_model.to(device)</span>
<span id="cb7-11"></span>
<span id="cb7-12">    n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb7-13">    i_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)), n_samples, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-14"></span>
<span id="cb7-15">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb7-16">    plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Reconstructions"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold'</span>)</span>
<span id="cb7-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, i_sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(i_samples):</span>
<span id="cb7-18">        orig_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[i_sample]</span>
<span id="cb7-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot original img</span></span>
<span id="cb7-20">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter)</span>
<span id="cb7-21">        plt.imshow(orig_img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb7-22">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb7-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-24">            ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>,</span>
<span id="cb7-25">                        va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb7-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot img reconstruction VAE</span></span>
<span id="cb7-27">        [x_tilde, z, mu_z, log_var_z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae_model(orig_img.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device))</span>
<span id="cb7-28">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_samples)</span>
<span id="cb7-29">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_tilde.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().cpu().numpy()</span>
<span id="cb7-30">        plt.imshow(x_tilde[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb7-31">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb7-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-33">            ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VAE recons"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>,</span>
<span id="cb7-34">                        va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb7-35">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot img reconstruction IWAE</span></span>
<span id="cb7-36">        [x_tilde, z, mu_z, log_var_z] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iwae_model(orig_img.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device))</span>
<span id="cb7-37">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_samples)</span>
<span id="cb7-38">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_tilde.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach().cpu().numpy()</span>
<span id="cb7-39">        plt.imshow(x_tilde[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb7-40">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb7-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-42">            ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IWAE recons"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>,</span>
<span id="cb7-43">                        va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>)</span>
<span id="cb7-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb7-45"></span>
<span id="cb7-46"></span>
<span id="cb7-47">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb7-48">trained_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'./results/trained_vae_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth'</span>)</span>
<span id="cb7-49">trained_iwae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'./results/trained_iwae_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth'</span>)</span>
<span id="cb7-50">plot_reconstructions(trained_vae, trained_iwae , test_ds)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/iwae/img/reconstructions.png" title="Reconstructions k=10" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Reconstructions k=10</figcaption>
</figure>
</div>
<ul>
<li><strong>Latent Traversals</strong></li>
</ul>
<div class="cell" data-execution_count="8">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_latent_traversal(vae_model, iwae_model, dataset, SEED<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb8-2">    np.random.seed(SEED)</span>
<span id="cb8-3">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb8-4"></span>
<span id="cb8-5">    vae_model.to(device)</span>
<span id="cb8-6">    iwae_model.to(device)</span>
<span id="cb8-7"></span>
<span id="cb8-8">    n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span></span>
<span id="cb8-9">    i_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)), n_samples, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb8-10">    img_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat([dataset[i].unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> i_samples], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-11">    img_batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_batch.to(device)</span>
<span id="cb8-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate latent traversals</span></span>
<span id="cb8-13">    n_pert, pert_min_max, n_lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-14">    img_trav_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae_model.create_latent_traversal(img_batch, n_pert, pert_min_max, n_lats)</span>
<span id="cb8-15">    img_trav_iwae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> iwae_model.create_latent_traversal(img_batch, n_pert, pert_min_max, n_lats)</span>
<span id="cb8-16"></span>
<span id="cb8-17">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb8-18">    n_rows, n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n_lats <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_pert <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-19">    gs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> GridSpec(n_rows, n_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-20">    plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Latent Traversals"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, fontweight<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bold'</span>)</span>
<span id="cb8-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> row_index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_lats):</span>
<span id="cb8-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> col_index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_pert):</span>
<span id="cb8-23">            img_rec_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_trav_vae[row_index][col_index]</span>
<span id="cb8-24">            img_rec_IWAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img_trav_iwae[row_index][col_index]</span>
<span id="cb8-25"></span>
<span id="cb8-26">            ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(gs[row_index, col_index])</span>
<span id="cb8-27">            plt.imshow(img_rec_VAE[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-28">            plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-29"></span>
<span id="cb8-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> row_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> col_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n_pert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb8-31">                plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'VAE'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>)</span>
<span id="cb8-32"></span>
<span id="cb8-33">            ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(gs[row_index, col_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_pert <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb8-34">            plt.imshow(img_rec_IWAE[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].detach(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-35">            plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> row_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> col_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n_pert<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>):</span>
<span id="cb8-37">                plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'IWAE'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>)</span>
<span id="cb8-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add pertubation magnitude</span></span>
<span id="cb8-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [plt.subplot(gs[n_lats, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]), plt.subplot(gs[n_lats, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>])]:</span>
<span id="cb8-40">        ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pertubation magnitude"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>,</span>
<span id="cb8-41">                    va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span>
<span id="cb8-42">        ax.set_frame_on(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb8-43">        ax.axes.set_xlim([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.15</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pert_min_max, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.15</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pert_min_max])</span>
<span id="cb8-44">        ax.xaxis.set_ticks([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>pert_min_max, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, pert_min_max])</span>
<span id="cb8-45">        ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"top"</span>)</span>
<span id="cb8-46">        ax.xaxis.set_tick_params(direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inout"</span>, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb8-47">        ax.get_yaxis().set_ticks([])</span>
<span id="cb8-48">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add latent coordinate traversed annotation</span></span>
<span id="cb8-49">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(gs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:n_rows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_cols])</span>
<span id="cb8-50">    ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latent coordinate traversed"</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"axes fraction"</span>,</span>
<span id="cb8-51">                    va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"center"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb8-52">    plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb8-54"></span>
<span id="cb8-55"></span>
<span id="cb8-56">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb8-57">trained_vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'./results/trained_vae_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth'</span>)</span>
<span id="cb8-58">trained_iwae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'./results/trained_iwae_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>k<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth'</span>)</span>
<span id="cb8-59">plot_latent_traversal(trained_vae, trained_iwae , test_ds)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/iwae/img/latent_traversal.png" title="Latent Traversal k=10" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Latent Traversal k=10</figcaption>
</figure>
</div>
<hr>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Since the variance <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bdiag%7D%20%5Cleft(%5Cboldsymbol%7B%5Csigma%7D%5E2_%7B%5Ctext%7BE%7D%7D%5Cright)"> needs to be greater than 0, we typically set the output to the variance in logarithmic units.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>reimplementation</category>
  <category>VAE</category>
  <category>IWAE</category>
  <category>generative</category>
  <guid>https://borea17.github.io/paper_summaries/iwae/index.html</guid>
  <pubDate>Sat, 09 Jan 2021 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Attend, Infer, Repeat: Fast Scene Understanding with Generative Models</title>
  <dc:creator>borea17 </dc:creator>
  <link>https://borea17.github.io/paper_summaries/air/index.html</link>
  <description><![CDATA[ 




<!-- nextjournal_link: "https://nextjournal.com/borea17/attend-infer-repeat/" -->
<p><a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a> introduce the <strong>Attend-Infer-Repeat (AIR)</strong> framework as an end-to-end trainable generative model capable of decomposing multi-object scenes into its constituent objects in an unsupervised learning setting. AIR builds upon the inductive bias that real-world scenes can be understood as a composition of (locally) self-contained objects. Therefore, AIR uses a structured probabilistic model whose parameters are obtained by inference/optimization. As the name suggests, the image decomposition process can be abstracted into three steps:</p>
<ul>
<li><strong>Attend</strong>: Firstly, the model uses a <a href="https://borea17.github.io/paper_summaries/spatial_transformer">Spatial Transformer (ST)</a> to focus on a specific region of the image, i.e., crop the image.</li>
<li><strong>Infer</strong>: Secondly, the cropped image is encoded by a <a href="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes">Variational Auto-Encoder (VAE)</a>. Note the same VAE is used for every cropped image.</li>
<li><strong>Repeat</strong>: Lastly, these steps are repreated until the full image is described or the maximum number of repetitions is reached.</li>
</ul>
<p>Notably, the model can handle a variable number of objects (upper-bounded) by treating inference as an iterative process. As a proof of concept, they show that AIR could successfully learn to decompose multi-object scenes in multiple datasets (multiple MNIST, Sprites, Omniglot, 3D scenes).</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/air/img/paper_results.gif" title="Paper Results" class="img-fluid" alt="Paper Results"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Paper Results</strong>. Taken from <a href="https://www.youtube.com/watch?v=4tc84kKdpY4">this presentation</a>. Note that the aim of unsupervised representation learning is to obtain good representations rather than perfect reconstructions.</td>
</tr>
</tbody>
</table>
<!-- - aim: good representations for downstream tasks -->
<!-- - scheme for efficient variational inference in latent spaces of -->
<!--   variable dimensionality -->
<!-- Motivated by human perception -->
<!-- - produce representations that are more useful for downstream tasks  -->
<!-- - structured models for image understanding -->
<!-- - standard VAEs lack interpretations of latent space (unstructured** -->
<!-- - AIR imposes structure on its representation through the generative -->
<!--   model/process rather than supervision from labels -->
<!-- - aiming to obtain good representations rather than good reconstructions -->
<section id="model-description" class="level2">
<h2 class="anchored" data-anchor-id="model-description">Model Description</h2>
<p>AIR is a rather sophisticated framework with some non-trivial subtleties. For the sake of clarity, the following description is organized as follows: Firstly, a high-level overview of the main ideas is given. Secondly, the transition from these ideas into a mathematical formulation (ignoring difficulties) is described. Lastly, the main difficulties are highlighted and how <a href="https://arxiv.org/abs/1603.08575">Eslami et al. (2016)</a> proposed to tackle them.</p>
<section id="high-level-overview" class="level3">
<h3 class="anchored" data-anchor-id="high-level-overview">High-Level Overview</h3>
<p>In essence, the model can be understood as a special VAE architecture in which an image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> is encoded to some kind of latent distribution from which we sample the latent representation <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D"> which then can be decoded into an reconstructed image <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D">, see image below. The main idea by <a href="https://arxiv.org/abs/1603.08575">Eslami et al. (2016)</a> consists of imposing additional structure in the model using the inductive bias that real-world scenes can often be approximated as multi-object scenes, i.e., compositions of several (variable number) objects. Additionally, they assume that all of these objects live in the same domain, i.e., each object is an instantiation from the same class.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/air/img/standard_VAE.png" title="Standard VAE Architecture" class="img-fluid" alt="Standard VAE Architecture"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Standard VAE Architecture</strong>. AIR can be understood as a modified VAE architecture.</td>
</tr>
</tbody>
</table>
<p>To this end, <a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a> replace the encoder with an recurrent, variable-length inference network to obtain a group-structured latent representation. Each group <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D"> should ideally correspond to one object where the entries can be understood as the compressed attributes of that object (e.g., type, appearance, pose). The main purpose of the inference network is to explain the whole scene by iteratively updating what remains to be explained, i.e., each step is conditioned on the image and on its knowledge of previously explained objects, see image below. Since they assume that each object lives in the same domain, the decoder is applied group-wise, i.e., each vector <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D"> is fed through the same decoder network, see image below.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/air/img/VAE_inference.png" title="VAE with Recurrent Inference Network" class="img-fluid" alt="VAE with Recurrent Inference Network"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>VAE with Recurrent Inference Network</strong>. A group-structured latent representation is obtained by replacing the encoder with a recurrent, variable-length inference network. This network should ideally attend to one object at a time and is conditioned on the image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> and its knowledge of previously epxlained objects <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bh%7D">, <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D">.</td>
</tr>
</tbody>
</table>
<p><a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a> put additional structure to the model by dividing the latent space of each object into <code>what</code>, <code>where</code> and <code>pres</code>. As the names suggest, <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D_%7B%5Ctext%7Bwhat%7D%7D"> corresponds to the objects appearance, while <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D_%7B%5Ctext%7Bwhere%7D%7D"> gives information about the position and scale. <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bz%7D_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D"> is a binary variable describing whether an object is present, it is rather a helper variable to allow for a variable number of objects to be detected (going to be explained in the <a href="https://borea17.github.io/paper_summaries/AIR#difficulties">Difficulties section</a>).</p>
<p>To disentangle <code>what</code>from <code>where</code>, the inference network extracts attentions crops <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D_%7B%5Ctext%7Batt%7D%7D"> of the image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> based on a three-dimensional vector <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D_%7B%5Ctext%7Bwhere%7D%7D%20%5Cleft(%20%5Ctextbf%7Bh%7D%5E%7B(i)%7D%20%5Cright)"> which specifies the affine parameters <img src="https://latex.codecogs.com/png.latex?(s%5E%7B(i)%7D,%20t_x%5E%7B(i)%7D,%20t_y%5E%7B(i)%7D)"> of the attention transformation<sup>1</sup>. These attention crops are then put through a standard VAE to encode the latent <code>what</code>-vector <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D_%7B%5Ctext%7Bwhat%7D%7D">. Note that each attention crop is put through the same VAE, thereby consistency between compressed object attributes is achieved (i.e., each object is an instantiation of the same class).</p>
<p>On the decoder side, the reconstructed attention crop <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%5E%7B(i)%7D_%7B%5Ctext%7Batt%7D%7D"> is transformed to <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%5E%7B(i)%7D"> using the information from <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D_%7B%5Ctext%7Bwhere%7D%7D">. <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%5E%7B(i)%7D"> can be understood as a reconstructed image of the <img src="https://latex.codecogs.com/png.latex?i">-th object in the original image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D">. Note that <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bz%7D%5E%7B(i)%7D_%7B%5Ctext%7Bpres%7D%7D"> is used to decide whether the contribution of <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%5E%7B(i)%7D_%7B%5Ctext%7Batt%7D%7D"> is added to the otherwise empty canvas <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%5E%7B(i)%7D">.</p>
<p>The schematic below summarizes the whole AIR architecture.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/air/img/AIR_model2.png" title="Schematic of AIR" class="img-fluid" alt="Schematic of AIR"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>Schematic of AIR</strong></td>
</tr>
</tbody>
</table>
<p><strong>Creation of Attention Crops and Inverse Transformation</strong>: As stated before, a <a href="https://borea17.github.io/paper_summaries/spatial_transformer">Spatial Transformer (ST)</a> module is used to produce the attention crops using a standard attention transformation. Remind that this means that the regular grid <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BG%7D%20=%20%5C%7B%5Cbegin%7Bbmatrix%7D%20x_k%5Et%20&amp;%20y_k%5Et%20%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D%20%5C%7D"> defined on the output is transformed into a new sampling grid <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7BG%7D%7D%20=%20%5C%7B%5Cbegin%7Bbmatrix%7D%20x_k%5Es%20&amp;%20y_k%5Es%20%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D%20%5C%7D"> defined on the input. The latent vector <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D_%7B%5Ctext%7Bwhere%7D%7D"> can be used to build the attention transformation matrix, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Ctextbf%7BA%7D%5E%7B(i)%7D%20=%20%5Cbegin%7Bbmatrix%7D%20s%5E%7B(i)%7D%20&amp;%200%20&amp;%20t_x%5E%7B(i)%7D%20%5C%5C%0A%20%20%200%20&amp;%20s%5E%7B(i)%7D%20&amp;%20t_y%5E%7B(i)%7D%20%5C%5C%200%20&amp;%200%20&amp;%201%5Cend%7Bbmatrix%7D,%20%5Cquad%20%5Cquad%20%5Cquad%0A%20%20%5Cbegin%7Bbmatrix%7D%20x_k%5Es%20%5C%5C%20y_k%5Es%20%5C%5C%201%20%5Cend%7Bbmatrix%7D%20=%20%5Ctextbf%7BA%7D%5E%7B(i)%7D%0A%20%20%5Cbegin%7Bbmatrix%7D%20x_k%5Et%20%5C%5C%20y_k%5Et%20%5C%5C%201%5Cend%7Bbmatrix%7D%0A"></p>
<p>This is nothing new, but how do we map the reconstructed attention crop <img src="https://latex.codecogs.com/png.latex?%5Ctilde%7B%5Ctextbf%7Bx%7D%7D%5E%7B(i)%7D_%7B%5Ctext%7Batt%7D%7D"> back to the original image space, i.e., how can we produce <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%5E%7B(i)%7D"> from <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%5E%7B(i)%7D_%7B%5Ctext%7Batt%7D%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D_%7B%5Ctext%7Bwhere%7D%7D">? The answer is pretty simple, we use the (pseudo)inverse<sup>2</sup> of the formerly defined attention transformation matrix, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%20x_k%5Es%20%5C%5C%20y_k%5Es%20%5C%5C%201%20%5Cend%7Bbmatrix%7D%20=%20%5Cleft(%5Ctextbf%7BA%7D%5E%7B(i)%7D%5Cright)%5E%7B+%7D%0A%20%20%5Cbegin%7Bbmatrix%7D%20x_k%5Et%20%5C%5C%20y_k%5Et%20%5C%5C%201%5Cend%7Bbmatrix%7D%20%5Cstackrel%7Bs%5Cneq%0A%20%200%7D%7B=%7D%20%5Cbegin%7Bbmatrix%7D%20%5Cfrac%20%7B1%7D%7Bs%5E%7B(i)%7D%7D%20&amp;%200%20&amp;%20-%20%5Cfrac%7Bt_x%5E%7B(i)%7D%7D%7Bs%7D%20%5C%5C%0A%20%20%200%20&amp;%20%5Cfrac%20%7B1%7D%7Bs%5E%7B(i)%7D%7D%20&amp;%20-%5Cfrac%20%7Bt_y%5E%7B(i)%7D%7D%7Bs%7D%20%5C%5C%200%20&amp;%200%20&amp;%0A%20%20%201%5Cend%7Bbmatrix%7D%5Cbegin%7Bbmatrix%7D%20x_k%5Et%20%5C%5C%20y_k%5Et%20%5C%5C%201%5Cend%7Bbmatrix%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cleft(%5Ctextbf%7BA%7D%5E%7B(i)%7D%5Cright)%5E%7B+%7D"> denotes the Moore-Penrose inverse of <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BA%7D%5E%7B(i)%7D">, and the regular grid <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BG%7D%20=%20%5C%7B%5Cbegin%7Bbmatrix%7D%20x_k%5Et%20&amp;%20y_k%5Et%20%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D%20%5C%7D"> is now defined on the original image space<sup>3</sup>. Below is a self-written interactive visualization where <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D%5E%7B(i)%7D_%7B%5Ctext%7Batt%7D%7D%20=%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D_%7B%5Ctext%7Batt%7D%7D">. It shows nicely that the whole process can abstractly be understood as cutting of a crop from the original image and placing the reconstructed version with the inverse scaling and shifting on an otherwise empty (black) canvas. The code and visualization can be found <a href="https://github.com/borea17/InteractiveTransformations">here</a>.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/air/img/transformation.gif" title="Interactive Transformation Visualization" class="img-fluid" alt="Interactive Transformation Visualization"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>Interactive Transformation Visualization</strong></td>
</tr>
</tbody>
</table>
</section>
<section id="mathematical-model" class="level3">
<h3 class="anchored" data-anchor-id="mathematical-model">Mathematical Model</h3>
<p>While the former model description gave an overview about the inner workings and ideas of AIR, the following section introduces the probabilistic model over which AIR operates. Similar to the <a href="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes">VAE paper</a> by <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a>, <a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a> introduce a modeling assumption for the generative process and use a variational approximation for the true posterior of that process to allow for joint optimization of the inference (encoder) and generator (decoder) parameters.</p>
<p>In contrast to standard VAEs, the modeling assumption for the generative process is more structured in AIR, see image below. It assumes that:</p>
<ol type="1">
<li>The number of objects <img src="https://latex.codecogs.com/png.latex?n"> is sampled from some discrete prior distribution <img src="https://latex.codecogs.com/png.latex?p_N"> (e.g., geometric distribution) with maximum value <img src="https://latex.codecogs.com/png.latex?N">.</li>
<li>The latent scene descriptor <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%20=%20%5Cleft(%5Ctextbf%7Bz%7D%5E%7B(1)%7D,%20%5Ctextbf%7Bz%7D%5E%7B(2)%7D,%20%5Cdots,%20%5Ctextbf%7Bz%7D%5E%7B(n)%7D%20%5Cright)"> (length depends on sampled <img src="https://latex.codecogs.com/png.latex?n">) is sampled from a scene model <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%20%5Csim%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5E%7Bz%7D%20%5Cleft(%20%5Ccdot%20%7C%20n%20%5Cright)">, where each vector <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D"> describes the attributes of one object in the scene. Furthermore, <a href="https://arxiv.org/abs/1603.08575">Eslami et al. (2016)</a> assume that <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D"> are independent for each possible <img src="https://latex.codecogs.com/png.latex?n">, i.e., <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5E%7Bz%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20n%20%5Cright)%20=%20%5Cprod_%7Bi=1%7D%5En%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Ez%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(i)%7D%5Cright)">.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> is generated by sampling from the conditional distribution <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5E%7Bx%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bz%7D%20%5Cright)">.</li>
</ol>
<p>As a result, the marginal likelihood of an image given the generative model parameters can be stated as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bx%7D)%20=%20%5Csum_%7Bn=1%7D%5EN%20p_N%20(n)%20%5Cint%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Ez%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20n%20%5Cright)%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Ex%20%5Cleft(%20%5Ctextbf%7Bx%7D%20%7C%20%5Ctextbf%7Bz%7D%5Cright)%20d%20%5Ctextbf%7Bz%7D%0A"></p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/air/img/VAE_vs_AIR.png" title="Generative Model VAE vs AIR" class="img-fluid" alt="Generative Model VAE vs AIR"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Generative Model VAE vs AIR</strong>. Note that for a given dataset <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D%20=%20%5C%7B%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5C%7D_%7Bi=1%7D%5E%7BL%7D"> the marginal likelihood of the whole dataset can be computed via $p_{} ( ) = <em>{i=1}^{L} p</em>{} ( ^{(i)} ) $.</td>
</tr>
</tbody>
</table>
<p><strong>Learning by optimizing the ELBO</strong>: Since the integral is intractable for most models, <a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a> introduce an amortized<sup>4</sup> variational approximation <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5Cright)"> for the true posterior <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%5Ctextbf%7Bz%7D,%20n%20%7C%5Ctextbf%7Bx%7D%5Cright)">. From here on, the steps are very similar to the <a href="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes">VAE paper</a> by <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a>: The objective of minimizing the KL divergence between the parameterized variational approximation (using a neural network) and the true (but unknown) posterior <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%5Ctextbf%7Bz%7D,%20n%20%7C%5Ctextbf%7Bx%7D%5Cright)"> is approximated by maximizing the evidence lower bound (<a href="https://borea17.github.io/ML_101/probability_theory/evidence_lower_bound">ELBO</a>):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathcal%7BL%7D%20%5Cleft(%20%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D;%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20=%20%5Cunderbrace%7B-%20D_%7BKL%7D%20%5Cleft(%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%0A%5Cleft(%20%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%20%7C%7C%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%0A(%5Ctextbf%7Bz%7D,%20n)%5Cright)%7D_%7B%5Ctext%7BRegularization%20Term%7D%7D%20+%20%5Cunderbrace%7B%5Cmathbb%7BE%7D_%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%20%5Cleft%5B%20%5Clog%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D,%20n%0A%5Cright)%20%5Cright%5D%7D_%7B%5Ctext%7BReconstruction%20Accuracy%7D%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D,%20%20n%20%5Cright)"> is a parameterized probabilistic decoder<sup>5</sup> (using a neural network) and <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D,%20n)%20=%20%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%20n%20%5Cright)%20%20p%20%5Cleft(%20n%20%5Cright)"> is prior on the joint probability of <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D"> and <img src="https://latex.codecogs.com/png.latex?n"> that we need to define a priori. As a result, the optimal parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cphi%7D"> can be learnt jointly by optimizing (maximizing) the ELBO.</p>
</section>
<section id="difficulties" class="level3">
<h3 class="anchored" data-anchor-id="difficulties">Difficulties</h3>
<p>In the former explanation, it was assummed that we could easily define some parameterized probabilistic encoder <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)"> and decoder <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D,%20n%20%5Cright)"> using neural networks. However, there are some obstacles in our way:</p>
<ul>
<li><p>How can we infer a variable number of objects <img src="https://latex.codecogs.com/png.latex?n">? Actually, we would need to evaluate <img src="https://latex.codecogs.com/png.latex?p_N%20%5Cleft(n%20%7C%20%5Ctextbf%7Bx%7D%5Cright)%20=%20%5Cint%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%20%5Cright)%20d%20%5Ctextbf%7Bz%7D"> for all <img src="https://latex.codecogs.com/png.latex?n=1,%5Cdots,%20N"> and then sample from the resulting distribution. <!-- Depending on the maximum number of objects --> <!-- $N$, this would quickly become computationally inefficient. --></p></li>
<li><p>The number of objects <img src="https://latex.codecogs.com/png.latex?n"> is clearly a discrete variable. How can we backprograte if we sample from a discrete distribution?</p></li>
<li><p>What priors should we choose? Especially, the prior for the number of objects in a scene <img src="https://latex.codecogs.com/png.latex?n%20%5Csim%20p_N"> is unclear.</p></li>
<li><p>What the <code>first</code> or <code>second</code> object in a scene constitutes is somewhat arbitrary. As a result, object assigments <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%20%5Ctextbf%7Bz%7D%5E%7B(1)%7D%20&amp;%20%5Cdots%20&amp;%20%5Ctextbf%7Bz%7D%5E%7B(n)%7D%20%5Cend%7Bbmatrix%7D%20=%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%20n%20%5Cright)"> should be exchangeable and the decoder <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D,%20n%20%5Cright)"> should be permutation invariant in terms of <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D">. Thus, the latent representation needs to preserve some strong symmetries.</p></li>
</ul>
<p><a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a> tackle these challenges by defining inference as an iterative process using a recurrent neural network (RNN) that is run for <img src="https://latex.codecogs.com/png.latex?N"> steps (maximum number of objects). As a result, the number of objects <img src="https://latex.codecogs.com/png.latex?n"> can be encoded in the latent distribution by defining the approximated posterior as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D,%20%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bpres%7D%7D%20%7C%0A%20%20%5Ctextbf%7Bx%7D%20%5Cright)%20=%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%20%20z_%7B%5Ctext%7Bpres%7D%7D%5E%7B(n+1)%7D%20=%200%20%7C%20%5Ctextbf%7Bz%7D%5E%7B(1:n)%7D%20,%20%5Ctextbf%7Bx%7D%5Cright)%0A%20%20%5Cprod_%7Bi=1%7D%5En%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%5E%7B(i)%7D%20,%0A%20%20z_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D=1%20%7C%20%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bz%7D%5E%7B(1:i-1)%7D%5Cright),%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?z_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D"> is an introduced binary variable sampled from a Bernoulli distribution <img src="https://latex.codecogs.com/png.latex?z_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D%20%5Csim%20%5Ctext%7BBern%7D%20%5Cleft(%20p_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D%20%5Cright)"> whose probability <img src="https://latex.codecogs.com/png.latex?p_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D"> is predicted at each iteration step. Whenever <img src="https://latex.codecogs.com/png.latex?z_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D=0"> the inference process stops and no more objects can be described, i.e., we enforce <img src="https://latex.codecogs.com/png.latex?z_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i+1)%7D=0"> for all subsequent steps such that the vector <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bpres%7D%7D"> looks as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bpres%7D%7D%20=%20%5Cbegin%7Bbmatrix%7D%20%5Csmash%5Bt%5D%7B%5Coverbrace%7B%5Cbegin%7Bmatrix%7D1%20&amp;%201%20&amp;%20%5Cdots%20&amp;%0A1%5Cend%7Bmatrix%7D%7D%5E%7Bn%20%5Ctext%7B%20times%7D%7D%7D%20%20%20&amp;%200%20&amp;%5Cdots%20&amp;%200%20%5Cend%7Bbmatrix%7D%0A"></p>
<p>Thus, <img src="https://latex.codecogs.com/png.latex?z_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D"> may be understood as an <em>interruption variable</em>. Recurrence is required to avoid explaining the same object twice.</p>
<p><strong>Backpropagation for Discrete Variables</strong>: While we can easily draw samples from a Bernoulli distribution <img src="https://latex.codecogs.com/png.latex?z_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D%20%5Csim%20%5Ctext%7BBern%7D%20%5Cleft(%20p_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D%20%5Cright)">, backpropagation turns out to be problematic. Remind that for continuous variables such as Gaussian distributions parameterized by mean and variance (e.g., <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D_%7B%5Ctext%7Bwhat%7D%7D">, <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D_%7B%5Ctext%7Bwhere%7D%7D">) there is the reparameterization trick to circumvent this problem. However, any reparameterization of discrete variables includes discontinuous operations through which we cannot backprograte. Thus, <a href="https://arxiv.org/abs/1603.08575">Eslami et al. (2016)</a> use a variant of the <a href="https://borea17.github.io/ML_101/probability_theory/score_function_estimator">score-function estimator</a> as a gradient estimator. More precisely, the reconstruction accuracy gradient w.r.t. <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bpres%7D%7D"> is approximated by the score-function estimator, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%5Cmathbb%7BE%7D_%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%20%5Cleft%5B%20%5Clog%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D,%20n%0A%5Cright)%20%5Cright%5D%20&amp;=%20%5Cmathbb%7BE%7D_%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%20%5Cleft%5B%20%5Clog%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D,%20n%0A%5Cright)%20%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20%5Cright%5D%20%5C%5C%0A&amp;%5Capprox%20%5Cfrac%20%7B1%7D%7BN%7D%20%5Csum_%7Bk=1%7D%5EN%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Cleft(%5Ctextbf%7Bz%7D,%20n%5Cright)%5E%7B(k)%7D%0A%5Cright)%20%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%5Cleft(%5Ctextbf%7Bz%7D,%20n%5Cright)%5E%7B(k)%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%5C%5C%0A&amp;%5Cquad%20%5Ctext%7Bwith%7D%20%5Cquad%20%5Cleft(%5Ctextbf%7Bz%7D,%20n%5Cright)%5E%7B(k)%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%0A%5Cend%7Balign%7D%0A"></p>
<p><a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a> note that in this raw form the gradient estimate <code>is likely to have high variance</code>. To reduce variance, they use <code>appropriately structured neural baselines</code> citing a paper from <a href="https://arxiv.org/abs/1402.0030">Minh and Gregor, 2014</a>. Without going into too much detail, appropriately structured neural baselines build upon the idea of <a href="https://borea17.github.io/ML_101/probability_theory/better_score_function_estimator">variance reduction in score function estimators</a> by introducing a scalar baseline <img src="https://latex.codecogs.com/png.latex?%5Clambda"> as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A&amp;%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cmathbb%7BE%7D_%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bpres%7D%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%20%5Cleft%5B%20%5Clog%0Ap_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D,%20n%0A%5Cright)%20%5Cright%5D%20=%20%5Cmathbb%7BE%7D_%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%20%5Cleft%5B%20%5CBig(%0Af_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bz%7D%20%5Cright)%20-%20%5Clambda%20%20%5CBig)%0A%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D,%20n%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20%5Cright%5D%5C%5C%0A&amp;%5Ctext%7Bwith%7D%20%5Cquad%20f_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bz%7D%20%5Cright)%0A=%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D,%20n%20%5Cright),%20%5Cquad%0A%5Ctext%7Bsince%7D%20%5Cquad%5Cmathbb%7BE%7D_%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bpres%7D%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%7D%20%5Cleft%5B%20%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D,%20n%20%7C%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20%5Cright%5D%20=%20%5Ctextbf%7B0%7D.%0A%5Cend%7Balign%7D%0A"></p>
<p><a href="https://arxiv.org/abs/1402.0030">Minh and Gregor, 2014</a> propose to use a data-dependent neural baseline <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7B%5Cboldsymbol%7B%5Cpsi%7D%7D%20(%5Ctextbf%7Bx%7D)"> that is trained to match its target <img src="https://latex.codecogs.com/png.latex?f_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D">. For further reading, <a href="https://pyro.ai/examples/svi_part_iii.html#Reducing-Variance-with-Data-Dependent-Baselines">pyro’s SVI part III</a> is a good starting point.</p>
<p><strong>Prior Distributions</strong>: Before we take a closer look on the prior distribution, it will be helpful to rewrite the regularization term</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0AD_%7BKL%7D%20&amp;%20%5Cleft(q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%0A%5Cright)%20%7C%7C%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D,%20n%5Cright)%20%5Cright)%20=%20D_%7BKL%7D%0A%5Cleft(%20%5Cprod_%7Bi=1%7D%5En%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D%5E%7B(i)%7D%7C%20%5Ctextbf%7Bx%7D,%0A%5Ctextbf%7Bz%7D%5E%7B(1:i-1)%7D%20%5Cright)%20%7C%7C%20%5Cprod_%7Bi=1%7D%5En%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D%5E%7B(i)%7D%20%5Cright)%20%5Cright)%5C%5C%0A&amp;%5Cstackrel%7B%5Ctext%7Bindependent%20dists.%7D%7D%7B=%7D%20%5Csum_%7Bi=1%7D%5En%20D_%7BKL%7D%20%5Cleft%5B%0A%5Cprod_%7Bk=1%7D%5E%7B3%7D%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D%5E%7B(i)%7D_k%20%7C%20%20%5Ctextbf%7Bx%7D,%0A%5Ctextbf%7Bz%7D%5E%7B(1:i-1)%7D%20%5Cright)%20%7C%7C%20%5Cprod_%7Bk=1%7D%5E3%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D%5E%7B(i)%7D_k%20%5Cright)%20%20%5Cright%5D%5C%5C%0A&amp;%5Cstackrel%7B%5Ctext%7Bindependent%20dists.%7D%7D%7B=%7D%20%5Csum_%7Bi=1%7D%5En%20%5Csum_%7Bk%5Cin%20%5C%7B%5Ctext%7Bpres%7D,%0A%5Ctext%7Bwhere%7D,%20%5Ctext%7Bwhat%7D%5C%7D%7D%20D_%7BKL%7D%20%5Cleft%5B%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D%5E%7B(i)%7D_k%7C%20%5Ctextbf%7Bx%7D,%0A%5Ctextbf%7Bz%7D%5E%7B(1:i-1)%7D%20%5Cright)%20%7C%7C%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%0A%5Ctextbf%7Bz%7D%5E%7B(i)%7D_k%20%5Cright)%20%20%5Cright%5D%0A%5Cend%7Balign%7D%0A"></p>
<p>Note that we assume that each <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D_k%5E%7B(i)%7D"> is sampled independently from their respective distribution such that products could equally be rewritten as concatenated vectors. Clearly, there are three different prior distributions that we need to define in advance:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bwhat%7D%7D%5E%7B(i)%7D%20%5Cright)%20%5Csim%20%5Cmathcal%7BN%7D%20%5Cleft(%5Ctextbf%7B0%7D,%20%5Ctextbf%7BI%7D%20%5Cright)">: A centerd isotropic Gaussian prior is a typical choice in standard VAEs and has proven to be effective<sup>6</sup>. Remind that the <code>what</code>-VAE should ideally receive patches of standard MNIST digits.</li>
</ul>
<ul>
<li><p><img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bwhere%7D%7D%5E%7B(i)%7D%5Cright)%20%5Csim%20%5Cmathcal%7BN%7D%20%5Cleft(%20%5Cboldsymbol%7B%5Cmu%7D_%7B%5Ctext%7Bw%7D%7D%20,%20%5Cboldsymbol%7B%5Csigma%7D_%7B%5Ctext%7Bw%7D%7D%5E2%20%5Ctextbf%7BI%7D%20%5Cright)">: In this distribution, we can encode prior knowledge about the objects locality, i.e., average size and location of objects and their standard deviations.</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D%5Cright)%20%5Csim%20%5Ctext%7BBern%7D%20(p_%7B%5Ctext%7Bpres%7D%7D)">: <a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a> used an annealing geometric distribution as a prior on the number of objects<sup>7</sup>, i.e., the success probability decreases from a value close to 1 to some small value close to 0 during the course of the training. The intuitive idea behind this process is to encourage the model to explore the use of objects (in the initial phase), and then to constrain the model to use as few objects as possible (trade-off between number of objects and reconstruction accuracy).</p>
<p>For simplicity, we use a fixed Bernoulli distribution for each step as suggested in <a href="https://pyro.ai/examples/air.html#In-practice">the pyro tutorial</a> with <img src="https://latex.codecogs.com/png.latex?p_%7B%5Ctext%7Bpres%7D%7D%20=%200.01">, i.e., we will constrain the number of objects from the beginning. To encourage the model to use objects we initialize the <code>what</code>-decoder to produce empty scenes such that things do not get much worse in terms of reconstruction accuracy when objects are used (also inspired by <a href="https://pyro.ai/examples/air.html#In-practice">pyro</a>).</p></li>
</ul>
</section>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p>The following reimplementation aims to reproduce the results of the multi-MNIST experiment, see image below. We will make some adaptations inspired by <a href="https://pyro.ai/examples/air.html">this pyro tutorial</a> and <a href="https://github.com/addtt/attend-infer-repeat-pytorch">this pytorch reimplementation</a> from Andrea Dittadi. As a result, the following reimplementation receives a huge speed up in terms of convergence time and can be trained in less than 10 minutes on a Nvidia Tesla K80 (compared to 2 days on a Nvidia Quadro K4000 GPU by <a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a>).</p>
<p>As noted by <a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a>, their model successfully learned to count the number of digits and their location in each image (i.e., appropriate attention windows) without any supervision. Furthermore, the scanning policy of the inference network (i.e., object assignment policy) converges to spatially divided regions where the direction of the spatial border seems to be random (dependent on random initialization). Lastly, the model also learned that it never needs to assign a third object (all images in the training dataset contained a maximum of two digits). <!-- This ensures that different regions are --> <!-- assigned as different objects. --></p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/air/img/paper_results.png" title="Multi-MNIST Paper Results" class="img-fluid" alt="Multi-MNIST Paper Results"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Paper Results of Multi-MNIST Experiment</strong>. Taken from <a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a>.</td>
</tr>
</tbody>
</table>
<p><a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a> argue that the the structure of AIR puts an important inductive bias onto explaining multi-object scenes by using two adversaries: * AIR wants to explain the scene, i.e., the reconstruction error should be minimized. * AIR is penalized for each instantiated object due to the KL divergence. Furthermore, the <code>what</code>-VAE puts an additional prior of instantiating similar objects.</p>
<section id="multi-mnist-dataset" class="level3">
<h3 class="anchored" data-anchor-id="multi-mnist-dataset">Multi-MNIST Dataset</h3>
<p>The multi-MNIST datasets consists of <img src="https://latex.codecogs.com/png.latex?50%20%5Ctimes%2050"> gray-scale images containing zero, one or two non-overlapping random MNIST digits with equal probability, see image below. This dataset can easily be generated by taking a blank <img src="https://latex.codecogs.com/png.latex?50%20%5Ctimes%2050"> canvas and positioning a random number of digits (drawn uniformly from MNIST dataset) onto it. To ensure that MNIST digits (<img src="https://latex.codecogs.com/png.latex?28%5Ctimes28">) will not overlap, we scale them to <img src="https://latex.codecogs.com/png.latex?24%5Ctimes%2024"> and then position them such that the centers of two MNIST digits do not overlap. Note that some small overlap may occur which we simply accept. At the same time, we record the number of digits in each generated image to measure the count accuracy during training.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/air/img/multi-MNIST_dataset.png" title="Multi-MNIST Dataset Examples" class="img-fluid" alt="Multi-MNIST Dataset Examples"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>Multi-MNIST Dataset Examples</strong>.</td>
</tr>
</tbody>
</table>
<div class="cell" data-execution_count="2">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets, transforms</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TensorDataset</span>
<span id="cb1-5"></span>
<span id="cb1-6">CANVAS_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># canvas in which 0/1/2 MNIST digits are put</span></span>
<span id="cb1-7">MNIST_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># size of original MNIST digits (resized)</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_dataset(num_images, SEED<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""generates multiple MNIST dataset with 0, 1 or 2 non-overlaping digits</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_images (int): number of images inside dataset</span></span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        multiple_MNIST (torch dataset)</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-18">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros([num_images, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, CANVAS_SIZE, CANVAS_SIZE])</span>
<span id="cb1-19"></span>
<span id="cb1-20">    original_MNIST <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.MNIST(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>, train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-21">        transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.Compose([</span>
<span id="cb1-22">          transforms.Resize(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(MNIST_SIZE, MNIST_SIZE)),</span>
<span id="cb1-23">          transforms.ToTensor()]))</span>
<span id="cb1-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample random digits and positions</span></span>
<span id="cb1-25">    np.random.seed(SEED)</span>
<span id="cb1-26">    pos_positions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),CANVAS_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-27"></span>
<span id="cb1-28">    mnist_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(original_MNIST), size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(num_images, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-29">    num_digits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(num_images))</span>
<span id="cb1-30">    positions_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(pos_positions, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(num_images, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb1-31">                                   replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-32"></span>
<span id="cb1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i_data <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_images):</span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num_digits[i_data] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb1-35">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add random digit at random position</span></span>
<span id="cb1-36">            random_digit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> original_MNIST[mnist_indices[i_data][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-37">            x_0, y_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> positions_0[i_data][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], positions_0[i_data][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb1-38">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), x_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb1-39">            y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), y_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb1-40">            data[i_data,:,y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> random_digit</span>
<span id="cb1-41">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num_digits[i_data] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>:</span>
<span id="cb1-42">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add second non overlaping random digit</span></span>
<span id="cb1-43">                random_digit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> original_MNIST[mnist_indices[i_data][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-44">                impos_x_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(x_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb1-45">                                        x_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-46">                impos_y_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(y_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb1-47">                                        y_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb1-48">                x_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(np.setdiff1d(pos_positions, impos_x_pos),</span>
<span id="cb1-49">                                       size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-50">                y_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(np.setdiff1d(pos_positions, impos_y_pos),</span>
<span id="cb1-51">                                       size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb1-52">                x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), x_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb1-53">                y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [y_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), y_1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(MNIST_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)]</span>
<span id="cb1-54">                data[i_data,:,y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:y[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> random_digit</span>
<span id="cb1-55">    labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.from_numpy(num_digits)</span>
<span id="cb1-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> TensorDataset(data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.float32), labels)</span></code></pre></div>
</details>
</div>
</section>
<section id="model-implementation" class="level3">
<h3 class="anchored" data-anchor-id="model-implementation">Model Implementation</h3>
<p>For the sake of clarity, the model implementation is divided into its constitutive parts:</p>
<ul>
<li><p><code>what</code>-<strong>VAE implementation</strong>: The <code>what</code>-VAE can be implemented as an independent class that receives an image patch (crop) and outputs its reconstruction as well as its latent distribution parameters. Note that we could also compute the KL divergence and reconstruction error within that class, however we will put the whole loss computation in another function to have everything in one place. As shown in a <a href="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes#vae-implementation">previous summary</a>, two fully connected layers with ReLU non-linearity in between suffice for decent reconstructions of MNIST digits.</p>
<p>We have additional prior knowledge about the output distribution: It should only be between 0 and 1. It is always useful to put as much prior knowledge as possible into the architecture, but how to achieve this?</p>
<ul>
<li><p><em>Clamping</em>: The most intuitive idea would be to simply clamp the network outputs, however this is a bad idea as gradients wont propagate if the outputs are outside of the clamped region.</p></li>
<li><p><em>Network Initialization</em>: Another approach would be to simply initialize the weights and biases of the output layer to zero such that further updates push the outputs into the positive direction. However, as the reconstruction of the whole image in AIR is a sum over multiple reconstructions, this turns out to be a bad idea as well. I tried it and the <code>what</code>-VAE produces negative outputs which it compensates with another object that has outputs greater than 1.</p></li>
<li><p><em>Sigmoid Layer</em>: This is a typical choice in classification problems and is commonly used in VAEs when the decoder approximates a Bernoulli distribution. However, it should be noted that using MSE loss (Gaussian decoder distribution) with a sigmoid is generally not advised due to the vanishing/saturating gradients (explained <a href="https://borea17,gitbub.io/ML_101/probability_theory/sigmoid_loss">here</a>).</p>
<p>On the other hand, using a Bernoulli distribution for the reconstruction of the whole image (sum over multiple reconstruction) comes with additional problems, e.g., numerical instabilities due to empty canvas (binary cross entropy can not be computed when probabilties are exactly 0) and due to clamping (as the sum over multiple bernoulli means could easily overshoot 1). While there might be some workarounds, I decided to go an easier path.</p></li>
<li><p><strong>Output Distribution</strong> <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BR%7D_%7B+%7D">: This is motivated by the observations I made during the <em>network initialization</em> approach. By impeding the network to produce negative outputs, we indirectly force outputs between <img src="https://latex.codecogs.com/png.latex?0"> and <img src="https://latex.codecogs.com/png.latex?1">. Thereby, we do not need to get our hands dirty with a Bernoulli distribution or vanishing gradient problems. Furthermore, we use Pytorch’s default initialization<sup>8</sup> to produce mostly empty objects. This encourages the model to try out objects in the beginning of the training.</p></li>
</ul></li>
</ul>
<div class="cell" data-execution_count="3">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nn</span>
<span id="cb2-2"></span>
<span id="cb2-3">WINDOW_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MNIST_SIZE        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># patch size (in one dimension) of what-VAE</span></span>
<span id="cb2-4">Z_WHAT_HIDDEN_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>         <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden dimension of what-VAE</span></span>
<span id="cb2-5">Z_WHAT_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># latent dimension of what-VAE</span></span>
<span id="cb2-6">FIXED_VAR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fixed variance of Gaussian decoder</span></span>
<span id="cb2-7"></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> VAE(nn.Module):</span>
<span id="cb2-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""simple VAE class with a Gaussian encoder (mean and diagonal variance</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    structure) and a Gaussian decoder with fixed variance</span></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        encoder (nn.Sequential): encoder network for mean and log_var</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        decoder (nn.Sequential): decoder network for mean (fixed var)</span></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-17"></span>
<span id="cb2-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(VAE, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-21">            nn.Linear(WINDOW_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, Z_WHAT_HIDDEN_DIM),</span>
<span id="cb2-22">            nn.ReLU(),</span>
<span id="cb2-23">            nn.Linear(Z_WHAT_HIDDEN_DIM, Z_WHAT_DIM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb2-24">        )</span>
<span id="cb2-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-26">            nn.Linear(Z_WHAT_DIM, Z_WHAT_HIDDEN_DIM),</span>
<span id="cb2-27">            nn.ReLU(),</span>
<span id="cb2-28">            nn.Linear(Z_WHAT_HIDDEN_DIM, WINDOW_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb2-29">        )</span>
<span id="cb2-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-31"></span>
<span id="cb2-32">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x_att_i):</span>
<span id="cb2-33">        z_what_i, mu_E_i, log_var_E_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(x_att_i)</span>
<span id="cb2-34">        x_tilde_att_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z_what_i)</span>
<span id="cb2-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_tilde_att_i, z_what_i, mu_E_i, log_var_E_i</span>
<span id="cb2-36"></span>
<span id="cb2-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x_att_i):</span>
<span id="cb2-38">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_att_i.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-39">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get encoder distribution parameters</span></span>
<span id="cb2-40">        out_encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder(x_att_i.view(batch_size, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-41">        mu_E_i, log_var_E_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.chunk(out_encoder, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-42">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample noise variable for each batch</span></span>
<span id="cb2-43">        epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(log_var_E_i)</span>
<span id="cb2-44">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get latent variable by reparametrization trick</span></span>
<span id="cb2-45">        z_what_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_E_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.exp(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>log_var_E_i) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> epsilon</span>
<span id="cb2-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> z_what_i, mu_E_i, log_var_E_i</span>
<span id="cb2-47"></span>
<span id="cb2-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z_what_i):</span>
<span id="cb2-49">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get decoder distribution parameters</span></span>
<span id="cb2-50">        x_tilde_att_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(z_what_i)</span>
<span id="cb2-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># force output to be positive</span></span>
<span id="cb2-52">        x_tilde_att_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_tilde_att_i.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>()</span>
<span id="cb2-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape to [1, WINDOW_SIZE, WINDOW_SIZE] (input shape)</span></span>
<span id="cb2-54">        x_tilde_att_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_tilde_att_i.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, WINDOW_SIZE, WINDOW_SIZE)</span>
<span id="cb2-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_tilde_att_i</span></code></pre></div>
</details>
</div>
<ul>
<li><p><strong>Recurrent Inference Network</strong>: <a href="https://arxiv.org/abs/1603.08575">Eslami et al. (2016)</a> used a standard recurrent neural network (RNN) which in each step <img src="https://latex.codecogs.com/png.latex?i"> computes</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cleft(%5Cunderbrace%7Bp%5E%7B(i)%7D_%7B%5Ctext%7Bpres%7D%7D,%20%5Cboldsymbol%7B%5Cmu%7D_%7B%5Ctext%7Bwhere%7D%7D,%0A%5Cboldsymbol%7B%5Csigma%7D%5E2_%7B%5Ctext%7Bwhere%7D%7D%7D_%7B%5Cboldsymbol%7B%5Comega%7D%5E%7B(i)%7D%7D,%0A%5Ctextbf%7Bh%7D%5E%7B(i)%7D%20%5Cright)%20=%20RNN%20%5Cleft(%5Ctextbf%7Bx%7D,%0A%5Cunderbrace%7B%5Ctext%7Bz%7D_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i-1)%7D,%20%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bwhat%7D%7D%5E%7B(i-1)%7D,%0A%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bwhere%7D%7D%5E%7B(i-1)%7D%7D_%7B%5Ctextbf%7Bz%7D%5E%7B(i-1)%7D%7D,%20%5Ctextbf%7Bh%7D%5E%7B(i-1)%7D%0A%5Cright),%0A"></p>
<p>i.e., the distribution parameters of <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bz%7D_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D%5Csim%20%5Ctext%7BBern%7D%5Cleft(%20p%5E%7B(i)%7D_%7B%5Ctext%7Bpres%7D%7D%20%5Cright)"> and <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bwhere%7D%7D%5E%7B(i)%7D%20%5Csim%20%5Cmathcal%7BN%7D%20%5Cleft(%20%5Cboldsymbol%7B%5Cmu%7D_%7B%5Ctext%7Bwhere%7D%7D,%20%20%5Cboldsymbol%7B%5Csigma%7D%5E2_%7B%5Ctext%7Bwhere%7D%7D%5Ctextbf%7BI%7D%5Cright)">, and the next hidden state <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bh%7D%5E%7B(i)%7D">. They did not provide any specifics about the network architecture, however in my experiments it turned out that a simple 3 layer (fully-connected) network suffices for this task.</p>
<p>To speed up convergence, we initialize useful distribution parameters:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?p_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D%5Capprox%200.8">: This encourages AIR to use objects in the beginning of training.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cmu%7D_%7B%5Ctext%7Bwhere%7D%7D%20=%20%5Cbegin%7Bbmatrix%7D%20-3%20&amp;%200%20&amp;%200%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D">: This leads to a center crop with (approximate) size of the inserted digits.</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Csigma%7D_%7B%5Ctext%7Bwhere%7D%7D%5E2%20%5Capprox%20%5Cbegin%7Bbmatrix%7D%200.05%20&amp;%200.05%20&amp;%200.05%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D">: Start with low variance.</li>
</ul>
<p>Note: We use a very similar recurrent network architecture for the neural baseline model (to predict the negative log-likelihood), see code below.</p></li>
</ul>
<div class="cell" data-execution_count="4">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">Z_PRES_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>                      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># latent dimension of z_pres</span></span>
<span id="cb3-2">Z_WHERE_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>                     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># latent dimension of z_where</span></span>
<span id="cb3-3">RNN_HIDDEN_STATE_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hidden state dimension of RNN</span></span>
<span id="cb3-4">P_PRES_INIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.</span>]                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialization p_pres (sigmoid -&gt; 0.8)</span></span>
<span id="cb3-5">MU_WHERE_INIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>]       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialization z_where mean</span></span>
<span id="cb3-6">LOG_VAR_WHERE_INIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialization z_where log var</span></span>
<span id="cb3-7">Z_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z_PRES_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Z_WHERE_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Z_WHAT_DIM</span>
<span id="cb3-8"></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> RNN(nn.Module):</span>
<span id="cb3-11"></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, baseline_net<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb3-13">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(RNN, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.baseline_net <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> baseline_net</span>
<span id="cb3-15">        INPUT_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (CANVAS_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> RNN_HIDDEN_STATE_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Z_DIM</span>
<span id="cb3-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> baseline_net:</span>
<span id="cb3-17">            OUTPUT_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (RNN_HIDDEN_STATE_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-18">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-19">            OUTPUT_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (RNN_HIDDEN_STATE_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> Z_PRES_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Z_WHERE_DIM)</span>
<span id="cb3-20">        output_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(RNN_HIDDEN_STATE_DIM, OUTPUT_SIZE)</span>
<span id="cb3-21"></span>
<span id="cb3-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc_rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb3-23">            nn.Linear(INPUT_SIZE, RNN_HIDDEN_STATE_DIM),</span>
<span id="cb3-24">            nn.ReLU(),</span>
<span id="cb3-25">            nn.Linear(RNN_HIDDEN_STATE_DIM, RNN_HIDDEN_STATE_DIM),</span>
<span id="cb3-26">            nn.ReLU(),</span>
<span id="cb3-27">            output_layer</span>
<span id="cb3-28">        )</span>
<span id="cb3-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> baseline_net:</span>
<span id="cb3-30">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize distribution parameters</span></span>
<span id="cb3-31">            output_layer.weight.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(</span>
<span id="cb3-32">                torch.zeros(Z_PRES_DIM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Z_WHERE_DIM, RNN_HIDDEN_STATE_DIM)</span>
<span id="cb3-33">            )</span>
<span id="cb3-34">            output_layer.bias.data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(</span>
<span id="cb3-35">                torch.tensor(P_PRES_INIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> MU_WHERE_INIT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> LOG_VAR_WHERE_INIT)</span>
<span id="cb3-36">            )</span>
<span id="cb3-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb3-38"></span>
<span id="cb3-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, z_im1, h_im1):</span>
<span id="cb3-40">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-41">        rnn_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((x.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).view(batch_size, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), z_im1, h_im1), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-42">        rnn_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc_rnn(rnn_input)</span>
<span id="cb3-43">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.baseline_net:</span>
<span id="cb3-44">            baseline_value_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnn_output[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb3-45">            h_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnn_output[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>::]</span>
<span id="cb3-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> baseline_value_i, h_i</span>
<span id="cb3-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-48">            omega_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnn_output[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:(Z_PRES_DIM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Z_WHERE_DIM)]</span>
<span id="cb3-49">            h_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rnn_output[:, (Z_PRES_DIM<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Z_WHERE_DIM)::]</span>
<span id="cb3-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># omega_i[:, 0] corresponds to z_pres probability</span></span>
<span id="cb3-51">            omega_i[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.sigmoid(omega_i[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb3-52">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> omega_i, h_i</span></code></pre></div>
</details>
</div>
<ul>
<li><p><strong>AIR Implementation</strong>: The whole AIR model is obtained by putting everything together. To better understand what’s happening, let’s take a closer look on the two main functions:</p>
<ul>
<li><p><code>forward(x)</code>: This function essentially does what is described in <a href="https://borea17.github.io/paper_summaries/AIR#high-level-overview">High-Level Overview</a>. Its purpose is to obtain a structured latent representation <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D=%5Cbigg%5C%7B%20%5Cleft%5B%20%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D,%20%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bwhere%7D%7D%5E%7B(i)%7D,%20%5Ctextbf%7Bz%7D_%7B%5Ctext%7Bwhat%7D%7D%5E%7B(i)%7D%5Cright%5D_%7Bi=1%7D%5EN%20%5Cbigg%5C%7D"> for a given input (batch of images) <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> and to collect everything needed to compute the loss.</p></li>
<li><p><code>compute_loss(x)</code>: This function is only necessary for training. It computes four loss quantities:</p>
<ol type="1">
<li><p><em>KL Divergence</em>: As noted <a href="https://borea17.github.io/paper_summaries/AIR#difficulties">above</a> the KL divergence term can be computed by summing the KL divergences of each type (<code>pres</code>, <code>what</code>, <code>where</code>) for each step.</p></li>
<li><p><em>NLL</em>: We assume a Gaussian decoder such that the negative log-likelihood can be computed as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BNLL%7D%20=%20%5Cfrac%20%7B1%7D%7B2%20%5Ccdot%20%5Csigma%5E2%7D%5Csum_%7Bi=1%7D%5E%7BW%20%5Ccdot%20H%7D%20%5Cleft(x_i%20-%20%5Cwidetilde%7Bx%7D_i%20%5Cright)%5E2,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?i"> enumerates the pixel space, <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> denotes the original image, <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7Bx%7D%7D"> the reconstructed image and <img src="https://latex.codecogs.com/png.latex?%5Csigma%5E2"> is a the fixed variance of the Gaussian distribution (hyperparameter).</p></li>
<li><p><em>REINFORCE Term</em>: Since the image reconstruction is build by sampling from a discrete distribution, backpropagation stops at the sampling operation. In order to optimize the distribution parameters <img src="https://latex.codecogs.com/png.latex?p_%7B%5Ctext%7Bpres%7D%7D%5E%7B(i)%7D">, we use a score-function estimator with a data-dependent neural baseline.</p></li>
<li><p><em>Baseline Loss</em>: This loss is needed to approximately fit the neural baseline to the true NLL in order to reduce the variance of the REINFORCE estimator.</p></li>
</ol></li>
</ul></li>
</ul>
<div class="cell" data-execution_count="5">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.distributions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Bernoulli</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5">N <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>                                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of inference steps</span></span>
<span id="cb4-6">EPS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-32</span>                           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># numerical stability</span></span>
<span id="cb4-7">PRIOR_MEAN_WHERE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>]       <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prior for mean of z_i_where</span></span>
<span id="cb4-8">PRIOR_VAR_WHERE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>]    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prior for variance of z_i_where</span></span>
<span id="cb4-9">PRIOR_P_PRES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>]                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prior for p_i_pres of z_i_pres</span></span>
<span id="cb4-10">BETA <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>                            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hyperparameter to scale KL div</span></span>
<span id="cb4-11">OMEGA_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Z_PRES_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Z_WHERE_DIM <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>Z_WHAT_DIM</span>
<span id="cb4-12"></span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> AIR(nn.Module):</span>
<span id="cb4-15"></span>
<span id="cb4-16">    PRIOR_MEAN_Z_WHERE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(torch.tensor(PRIOR_MEAN_WHERE),</span>
<span id="cb4-17">                                      requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-18">    PRIOR_VAR_Z_WHERE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(torch.tensor(PRIOR_VAR_WHERE),</span>
<span id="cb4-19">                                     requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-20">    PRIOR_P_Z_PRES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(torch.tensor(PRIOR_P_PRES),</span>
<span id="cb4-21">                                  requires_grad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-22"></span>
<span id="cb4-23">    expansion_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.LongTensor([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb4-24">    target_rectangle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(</span>
<span id="cb4-25">      [[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb4-26">       [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb4-27">       [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>]]</span>
<span id="cb4-28">    ).view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb4-29"></span>
<span id="cb4-30">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-31">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(AIR, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vae <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VAE()</span>
<span id="cb4-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RNN()</span>
<span id="cb4-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.baseline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> RNN(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb4-36"></span>
<span id="cb4-37">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_loss(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb4-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""compute the loss of AIR (essentially a VAE loss)</span></span>
<span id="cb4-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        assuming the following prior distributions for the latent variables</span></span>
<span id="cb4-40"></span>
<span id="cb4-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z_where ~ N(PRIOR_MEAN_WHERE, PRIOR_VAR_WHERE)</span></span>
<span id="cb4-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z_what ~ N([0, 1])</span></span>
<span id="cb4-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            z_pres ~ Bern(p_pres)</span></span>
<span id="cb4-44"></span>
<span id="cb4-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        and a</span></span>
<span id="cb4-46"></span>
<span id="cb4-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Gaussian decoder with fixed diagonal var (FIXED_VAR)</span></span>
<span id="cb4-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-49">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-50">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(x, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kl_div for z_pres (between two Bernoulli distributions)</span></span>
<span id="cb4-52">        q_z_pres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_prob_pres'</span>]</span>
<span id="cb4-53">        P_Z_PRES <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.PRIOR_P_Z_PRES.expand(q_z_pres.shape).to(x.device)</span>
<span id="cb4-54">        kl_div_pres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.bernoulli_kl(q_z_pres, P_Z_PRES).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kl_div for z_what (standard VAE regularization term)</span></span>
<span id="cb4-56">        q_z_what <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_mu_what'</span>], results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_log_var_what'</span>]]</span>
<span id="cb4-57">        P_MU_WHAT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_mu_what'</span>])</span>
<span id="cb4-58">        P_VAR_WHAT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones_like(results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_log_var_what'</span>])</span>
<span id="cb4-59">        P_Z_WHAT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [P_MU_WHAT, P_VAR_WHAT]</span>
<span id="cb4-60">        kl_div_what <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.gaussian_kl(q_z_what, P_Z_WHAT).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kl_div for z_where (between two Gaussian distributions)</span></span>
<span id="cb4-62">        q_z_where <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_mu_where'</span>], results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_log_var_where'</span>]]</span>
<span id="cb4-63">        P_MU_WHERE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>AIR.PRIOR_MEAN_Z_WHERE.expand(results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_mu_where'</span>].shape)</span>
<span id="cb4-64">        P_VAR_WHERE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>AIR.PRIOR_VAR_Z_WHERE.expand(results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_mu_where'</span>].shape)</span>
<span id="cb4-65">        P_Z_WHERE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [P_MU_WHERE.to(x.device), P_VAR_WHERE.to(x.device)]</span>
<span id="cb4-66">        kl_div_where <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.gaussian_kl(q_z_where, P_Z_WHERE).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sum all kl_divs and use delayed mask to zero out irrelevants</span></span>
<span id="cb4-68">        delayed_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mask_delay'</span>]</span>
<span id="cb4-69">        kl_div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (kl_div_pres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kl_div_where <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kl_div_what) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> delayed_mask</span>
<span id="cb4-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># negative log-likelihood for Gaussian decoder (no gradient for z_pres)</span></span>
<span id="cb4-71">        factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>FIXED_VAR)</span>
<span id="cb4-72">        nll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_tilde'</span>])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb4-73">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># REINFORCE estimator for nll (gradient for z_pres)</span></span>
<span id="cb4-74">        baseline_target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nll.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-75">        reinforce_term <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((baseline_target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline_values'</span>]</span>
<span id="cb4-76">                           ).detach()</span>
<span id="cb4-77">                          <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'z_pres_likelihood'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>delayed_mask).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-78"></span>
<span id="cb4-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># baseline model loss</span></span>
<span id="cb4-80">        baseline_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ((results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline_values'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb4-81">                          baseline_target.detach())<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> delayed_mask).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-82">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb4-83">        loss[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kl_div'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BETA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>kl_div.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).mean()</span>
<span id="cb4-84">        loss[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nll'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nll.mean()</span>
<span id="cb4-85">        loss[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reinforce'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> reinforce_term.mean()</span>
<span id="cb4-86">        loss[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> baseline_loss.mean()</span>
<span id="cb4-87">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> loss, results</span>
<span id="cb4-88"></span>
<span id="cb4-89">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, save_attention_rectangle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb4-90">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-91">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initializations</span></span>
<span id="cb4-92">        all_z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty((batch_size, N, Z_DIM), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.device)</span>
<span id="cb4-93">        z_pres_likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty((batch_size, N), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.device)</span>
<span id="cb4-94">        mask_delay <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty((batch_size, N), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.device)</span>
<span id="cb4-95">        all_omega <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty((batch_size, N, OMEGA_DIM), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.device)</span>
<span id="cb4-96">        all_x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty((batch_size, N, CANVAS_SIZE, CANVAS_SIZE),</span>
<span id="cb4-97">                                 device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.device)</span>
<span id="cb4-98">        baseline_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty((batch_size, N), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x.device)</span>
<span id="cb4-99"></span>
<span id="cb4-100">        z_im1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.ones((batch_size, Z_DIM)).to(x.device)</span>
<span id="cb4-101">        h_im1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((batch_size, RNN_HIDDEN_STATE_DIM)).to(x.device)</span>
<span id="cb4-102">        h_im1_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros((batch_size, RNN_HIDDEN_STATE_DIM)).to(x.device)</span>
<span id="cb4-103">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> save_attention_rectangle:</span>
<span id="cb4-104">            attention_rects <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty((batch_size, N, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)).to(x.device)</span>
<span id="cb4-105">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N):</span>
<span id="cb4-106">            z_im1_pres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_im1[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-107">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mask_delay is used to zero out all steps AFTER FIRST z_pres = 0</span></span>
<span id="cb4-108">            mask_delay[:, i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_im1_pres.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-109">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># obtain parameters of sampling distribution and hidden state</span></span>
<span id="cb4-110">            omega_i, h_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rnn(x, z_im1, h_im1)</span>
<span id="cb4-111">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># baseline version</span></span>
<span id="cb4-112">            baseline_i, h_i_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.baseline(x.detach(), z_im1.detach(),</span>
<span id="cb4-113">                                              h_im1_b)</span>
<span id="cb4-114">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set baseline 0 if z_im1_pres = 0</span></span>
<span id="cb4-115">            baseline_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (baseline_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z_im1_pres).squeeze()</span>
<span id="cb4-116">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extract sample distributions parameters from omega_i</span></span>
<span id="cb4-117">            prob_pres_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> omega_i[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-118">            mu_where_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> omega_i[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb4-119">            log_var_where_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> omega_i[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span>
<span id="cb4-120">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample from distributions to obtain z_i_pres and z_i_where</span></span>
<span id="cb4-121">            z_i_pres_post <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Bernoulli(probs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>prob_pres_i)</span>
<span id="cb4-122">            z_i_pres <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_i_pres_post.sample() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z_im1_pres</span>
<span id="cb4-123">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># likelihood of sampled z_i_pres (only if z_im_pres = 1)</span></span>
<span id="cb4-124">            z_pres_likelihood[:, i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (z_i_pres_post.log_prob(z_i_pres) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb4-125">                                       z_im1_pres).squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-126">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get z_i_where by reparametrization trick</span></span>
<span id="cb4-127">            epsilon_w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn_like(log_var_where_i)</span>
<span id="cb4-128">            z_i_where <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_where_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.exp(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>log_var_where_i)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>epsilon_w</span>
<span id="cb4-129">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># use z_where and x to obtain x_att_i</span></span>
<span id="cb4-130">            x_att_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.image_to_window(x, z_i_where)</span>
<span id="cb4-131">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put x_att_i through VAE</span></span>
<span id="cb4-132">            x_tilde_att_i, z_i_what, mu_what_i, log_var_what_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-133">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vae(x_att_i)</span>
<span id="cb4-134">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create image reconstruction</span></span>
<span id="cb4-135">            x_tilde_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.window_to_image(x_tilde_att_i, z_i_where)</span>
<span id="cb4-136">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update im1 with current versions</span></span>
<span id="cb4-137">            z_im1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((z_i_pres, z_i_where, z_i_what), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-138">            h_im1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h_i</span>
<span id="cb4-139">            h_im1_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> h_i_b</span>
<span id="cb4-140">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put all distribution parameters into omega_i</span></span>
<span id="cb4-141">            omega_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((prob_pres_i, mu_where_i, log_var_where_i,</span>
<span id="cb4-142">                                 mu_what_i, log_var_what_i), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-143">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># store intermediate results</span></span>
<span id="cb4-144">            all_z[:, i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_im1.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-145">            all_omega[:, i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> omega_i.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-146">            all_x_tilde[:, i:i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_tilde_i</span>
<span id="cb4-147">            baseline_values[:, i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> baseline_value</span>
<span id="cb4-148">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for nice visualization</span></span>
<span id="cb4-149">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> save_attention_rectangle:</span>
<span id="cb4-150">                attention_rects[:, i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (AIR.get_attention_rectangle(z_i_where)</span>
<span id="cb4-151">                                         <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>z_i_pres.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb4-152">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save results in dict (easy accessibility)</span></span>
<span id="cb4-153">        results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb4-154">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fixes Z_PRES_DIM = 1 and Z_WHERE_DIM = 3</span></span>
<span id="cb4-155">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'z_pres_likelihood'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_pres_likelihood</span>
<span id="cb4-156">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_z_pres'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_z[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-157">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mask_delay'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask_delay</span>
<span id="cb4-158">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_prob_pres'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_omega[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-159">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_z_where'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_z[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb4-160">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_mu_where'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  all_omega[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span>
<span id="cb4-161">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_log_var_where'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_omega[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>]</span>
<span id="cb4-162">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_z_what'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_z[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>::]</span>
<span id="cb4-163">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_mu_what'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  all_omega[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>Z_WHAT_DIM]</span>
<span id="cb4-164">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_log_var_what'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_omega[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>Z_WHAT_DIM::]</span>
<span id="cb4-165">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline_values'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> baseline_values</span>
<span id="cb4-166">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> save_attention_rectangle:</span>
<span id="cb4-167">            results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'attention_rects'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> attention_rects</span>
<span id="cb4-168">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute reconstructed image (take only x_tilde_i with z_i_pres=1)</span></span>
<span id="cb4-169">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_tilde_i'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_x_tilde</span>
<span id="cb4-170">        x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (all_z[:, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> all_x_tilde).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb4-171">                                                              keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-172">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_tilde'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_tilde</span>
<span id="cb4-173">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute counts as identified objects (sum z_i_pres)</span></span>
<span id="cb4-174">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'all_z_pres'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>)</span>
<span id="cb4-175">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> results</span>
<span id="cb4-176"></span>
<span id="cb4-177">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-178">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> image_to_window(x, z_i_where):</span>
<span id="cb4-179">        grid_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (z_i_where.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, WINDOW_SIZE, WINDOW_SIZE)</span>
<span id="cb4-180">        z_i_where_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.invert_z_where(z_i_where)</span>
<span id="cb4-181">        x_att_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.spatial_transform(x, z_i_where_inv, grid_shape)</span>
<span id="cb4-182">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_att_i</span>
<span id="cb4-183"></span>
<span id="cb4-184">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-185">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> window_to_image(x_tilde_att_i, z_i_where):</span>
<span id="cb4-186">        grid_shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (z_i_where.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, CANVAS_SIZE, CANVAS_SIZE)</span>
<span id="cb4-187">        x_tilde_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.spatial_transform(x_tilde_att_i, z_i_where, grid_shape)</span>
<span id="cb4-188">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_tilde_i</span>
<span id="cb4-189"></span>
<span id="cb4-190">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-191">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> spatial_transform(x, z_where, grid_shape):</span>
<span id="cb4-192">        theta_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.z_where_to_transformation_matrix(z_where)</span>
<span id="cb4-193">        grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.affine_grid(theta_matrix, grid_shape, align_corners<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-194">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.grid_sample(x, grid, align_corners<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb4-195">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb4-196"></span>
<span id="cb4-197">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-198">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> z_where_to_transformation_matrix(z_i_where):</span>
<span id="cb4-199">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""taken from</span></span>
<span id="cb4-200"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        https://github.com/pyro-ppl/pyro/blob/dev/examples/air/air.py</span></span>
<span id="cb4-201"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-202">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_i_where.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-203">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((z_i_where.new_zeros(batch_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), z_i_where), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-204">        ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.expansion_indices</span>
<span id="cb4-205">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> z_i_where.is_cuda:</span>
<span id="cb4-206">            ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ix.cuda()</span>
<span id="cb4-207">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.index_select(out, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, ix)</span>
<span id="cb4-208">        theta_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out.view(batch_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb4-209">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> theta_matrix</span>
<span id="cb4-210"></span>
<span id="cb4-211">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-212">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> invert_z_where(z_where):</span>
<span id="cb4-213">        z_where_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(z_where)</span>
<span id="cb4-214">        scale <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_where[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-9</span></span>
<span id="cb4-215">        z_where_inv[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>z_where[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> scale</span>
<span id="cb4-216">        z_where_inv[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> scale</span>
<span id="cb4-217">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> z_where_inv</span>
<span id="cb4-218"></span>
<span id="cb4-219">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-220">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_attention_rectangle(z_i_where):</span>
<span id="cb4-221">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_i_where.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-222">        z_i_where_inv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.invert_z_where(z_i_where)</span>
<span id="cb4-223">        theta_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.z_where_to_transformation_matrix(z_i_where_inv)</span>
<span id="cb4-224">        target_rectangle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR.target_rectangle.expand(batch_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb4-225">                                                       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>).to(z_i_where.device)</span>
<span id="cb4-226">        source_rectangle_normalized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.matmul(theta_matrix,</span>
<span id="cb4-227">                                                   target_rectangle)</span>
<span id="cb4-228">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remap into absolute values</span></span>
<span id="cb4-229">        source_rectangle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (CANVAS_SIZE<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(source_rectangle_normalized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-230">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> source_rectangle</span>
<span id="cb4-231"></span>
<span id="cb4-232">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-233">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> bernoulli_kl(q_probs, p_probs):</span>
<span id="cb4-234">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://github.com/pytorch/pytorch/issues/15288</span></span>
<span id="cb4-235">        p1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p_probs</span>
<span id="cb4-236">        p0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> p1</span>
<span id="cb4-237">        q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> q_probs</span>
<span id="cb4-238">        q0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> q1</span>
<span id="cb4-239"></span>
<span id="cb4-240">        logq1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (q1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> EPS).log()</span>
<span id="cb4-241">        logq0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (q0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> EPS).log()</span>
<span id="cb4-242">        logp1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (p1).log()</span>
<span id="cb4-243">        logp0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (p0).log()</span>
<span id="cb4-244"></span>
<span id="cb4-245">        kl_div_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> q1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(logq1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> logp1)</span>
<span id="cb4-246">        kl_div_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> q0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(logq0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> logp0)</span>
<span id="cb4-247">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> kl_div_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kl_div_0</span>
<span id="cb4-248"></span>
<span id="cb4-249">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-250">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> gaussian_kl(q, p):</span>
<span id="cb4-251">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://pytorch.org/docs/stable/_modules/torch/distributions/kl.html</span></span>
<span id="cb4-252">        mean_q, log_var_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> q[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], q[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-253">        mean_p, var_p <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], p[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-254"></span>
<span id="cb4-255">        var_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_var_q.exp()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>var_p</span>
<span id="cb4-256">        t1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (mean_q <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mean_p).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>var_p</span>
<span id="cb4-257">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> var_ratio.log() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> var_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> t1)</span></code></pre></div>
</details>
</div>
<ul>
<li><strong>Training Procedure</strong>: Lastly, a standard training procedure is implemented. We will use two optimizers, one for the model parameters and one for the neural baseline parameters. Note that the training process is completely unsupervised, i.e., the model only receives a batch of images to compute the losses.</li>
</ul>
<div class="cell" data-execution_count="6">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> livelossplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PlotLosses, outputs</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-4"></span>
<span id="cb5-5"></span>
<span id="cb5-6">EPOCHS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb5-7">BATCH_SIZE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb5-8">LEARNING_RATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-4</span></span>
<span id="cb5-9">BASE_LEARNING_RATE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e-2</span></span>
<span id="cb5-10">EPOCHS_TO_SAVE_MODEL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, EPOCHS]</span>
<span id="cb5-11"></span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train(air, dataset):</span>
<span id="cb5-14">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb5-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(device))</span>
<span id="cb5-16"></span>
<span id="cb5-17">    data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-18">                             num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb5-19">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam([{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'params'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(air.rnn.parameters()) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-20">                                   <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(air.vae.parameters()),</span>
<span id="cb5-21">                                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>: LEARNING_RATE,},</span>
<span id="cb5-22">                                  {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'params'</span>: air.baseline.parameters(),</span>
<span id="cb5-23">                                   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lr'</span>: BASE_LEARNING_RATE}])</span>
<span id="cb5-24">    air.to(device)</span>
<span id="cb5-25"></span>
<span id="cb5-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prettify livelossplot</span></span>
<span id="cb5-27">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> custom(ax: plt.Axes, group: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, x_label: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb5-28">        ax.legend()</span>
<span id="cb5-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>:</span>
<span id="cb5-30">            ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-31">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss base'</span>:</span>
<span id="cb5-32">            ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>)</span>
<span id="cb5-33"></span>
<span id="cb5-34">    matplot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [outputs.MatplotlibPlot(after_subplot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>custom,max_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)]</span>
<span id="cb5-35">    losses_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotLosses(groups<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss model'</span>:[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KL div'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NLL'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'REINFORCE'</span>],</span>
<span id="cb5-36">                                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'loss base'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline'</span>],</span>
<span id="cb5-37">                                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'accuracy'</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count accuracy'</span>]},</span>
<span id="cb5-38">                             outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>matplot)</span>
<span id="cb5-39">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, EPOCHS<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-40">        avg_kl_div, avg_nll, avg_reinforce, avg_base, avg_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb5-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data_loader:</span>
<span id="cb5-42">            air.zero_grad()</span>
<span id="cb5-43"></span>
<span id="cb5-44">            losses, results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> air.compute_loss(x.to(device, non_blocking<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>))</span>
<span id="cb5-45">            loss  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (losses[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kl_div'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> losses[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nll'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> losses[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reinforce'</span>]</span>
<span id="cb5-46">                     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>losses[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline'</span>])</span>
<span id="cb5-47">            loss.backward()</span>
<span id="cb5-48">            optimizer.step()</span>
<span id="cb5-49"></span>
<span id="cb5-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute accuracy</span></span>
<span id="cb5-51">            label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(device)</span>
<span id="cb5-52">            acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>label).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>])</span>
<span id="cb5-53">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># update epoch means</span></span>
<span id="cb5-54">            avg_kl_div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> losses[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kl_div'</span>].item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb5-55">            avg_nll <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> losses[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nll'</span>].item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb5-56">            avg_reinforce <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> losses[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reinforce'</span>].item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb5-57">            avg_base <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> losses[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline'</span>].item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb5-58">            avg_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb5-59"></span>
<span id="cb5-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> EPOCHS_TO_SAVE_MODEL:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save model</span></span>
<span id="cb5-61">            torch.save(air, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'./results/checkpoint_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth'</span>)</span>
<span id="cb5-62">        losses_plot.update({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KL div'</span>: avg_kl_div,</span>
<span id="cb5-63">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NLL'</span>: avg_nll,</span>
<span id="cb5-64">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'REINFORCE'</span>: avg_reinforce,</span>
<span id="cb5-65">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'baseline'</span>: avg_base,</span>
<span id="cb5-66">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count accuracy'</span>: avg_acc}, current_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch)</span>
<span id="cb5-67">        losses_plot.send()</span>
<span id="cb5-68">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Accuracy after Training </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>avg_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (on training dataset)'</span>)</span>
<span id="cb5-69">    torch.save(air, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'./results/checkpoint_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.pth'</span>)</span>
<span id="cb5-70">    trained_air <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> air</span>
<span id="cb5-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> trained_air</span></code></pre></div>
</details>
</div>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>Let’s train our model:</p>
<div class="cell" data-execution_count="7">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">air_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AIR()</span>
<span id="cb6-2">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_dataset(num_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, SEED<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb6-3">trained_air <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(air_model, train_dataset)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/air/img/training_results.png" title="Training Results" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Training Results</figcaption>
</figure>
</div>
<p>This looks pretty awesome! It seems that our model nearly perfectly learns to count the number of digits without even knowing what a digit is.</p>
<p>Let us take a closer look and plot the results of the model at different stages of the training against a test dataset.</p>
<div class="cell" data-execution_count="8">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_results(dataset):</span>
<span id="cb7-2">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb7-3">    n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">    i_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)), n_samples, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-6">    colors_rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yellow'</span>]</span>
<span id="cb7-7">    num_rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(EPOCHS_TO_SAVE_MODEL) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-8"></span>
<span id="cb7-9">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>))</span>
<span id="cb7-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, i_sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(i_samples):</span>
<span id="cb7-11">        orig_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[i_sample][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># data</span></span>
<span id="cb7-13">        ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(num_rows, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter)</span>
<span id="cb7-14">        plt.imshow(orig_img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].numpy(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-15">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb7-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-17">            ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Data'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb7-18">                        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb7-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># outputs after epochs of training</span></span>
<span id="cb7-20">        MODELS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [, , ]</span>
<span id="cb7-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> j, (epoch, model) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(EPOCHS_TO_SAVE_MODEL, MODELS)):</span>
<span id="cb7-22">            trained_air <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.load(model)</span>
<span id="cb7-23">            trained_air.to(device)</span>
<span id="cb7-24"></span>
<span id="cb7-25">            results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_air(orig_img.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device), <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-26"></span>
<span id="cb7-27">            attention_recs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'attention_rects'</span>].squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-28">            x_tilde <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.clamp(results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_tilde'</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> , <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-29"></span>
<span id="cb7-30">            ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(num_rows, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(j<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb7-31">            plt.imshow(x_tilde[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].cpu().detach().numpy(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>,</span>
<span id="cb7-32">                       vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-33">            plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb7-34">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># show attention windows</span></span>
<span id="cb7-35">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> step_counter, step <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(N)):</span>
<span id="cb7-36">                rect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> attention_recs[step].detach().cpu().numpy()</span>
<span id="cb7-37">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> rect.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># valid rectangle</span></span>
<span id="cb7-38">                    plt.plot(rect[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], rect[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb7-39">                             color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>colors_rect[step_counter])</span>
<span id="cb7-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb7-41">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute accuracy</span></span>
<span id="cb7-42">                data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE)</span>
<span id="cb7-43">                avg_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb7-44">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data_loader:</span>
<span id="cb7-45">                    label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).to(device)</span>
<span id="cb7-46">                    r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_air(batch.to(device))</span>
<span id="cb7-47">                    acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>label).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'counts'</span>])</span>
<span id="cb7-48">                    avg_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb7-49">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># annotate plot</span></span>
<span id="cb7-50">                ax.annotate(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Acc </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>avg_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb7-51">                            xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>,</span>
<span id="cb7-52">                            xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>,  ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>,</span>
<span id="cb7-53">                            rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb7-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb7-55"></span>
<span id="cb7-56"></span>
<span id="cb7-57">test_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_dataset(num_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, SEED<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-58">plot_results(test_dataset)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/air/img/test_results.png" title="Test Results" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Test Results</figcaption>
</figure>
</div>
<p>Very neat results, indeed! Note that this looks very similar to Figure 3 in the <a href="https://arxiv.org/abs/1603.08575">AIR paper</a>. The accuracy on the left denotes the count accuracy of the test dataset.</p>
</section>
<section id="closing-notes" class="level3">
<h3 class="anchored" data-anchor-id="closing-notes">Closing Notes</h3>
<p>Alright, time to step down from our high horse. Actually, it took me quite some time to tweak the hyperparameters to obtain such good results. I put a lot of prior knowledge into the model so that <code>completely unsupervised</code> is probably exaggerated. Using a slightly different setup might lead to entirely different results. Furthermore, even in this setup, there may be cases in which the training converges to some local maximum (depending on the random network initializations and random training dataset).</p>
</section>
</section>
<section id="acknowledgements" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h2>
<p>The <a href="http://akosiorek.github.io/ml/2017/09/03/implementing-air.html">blog post</a> by Adam Kosiorek, the <a href="https://pyro.ai/examples/air.html">pyro tutorial on AIR</a> and <a href="https://github.com/addtt/attend-infer-repeat-pytorch">the pytorch implementation</a> by Andrea Dittadi are great resources and helped very much to understand the details of the paper.</p>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Visualization of a standard attention transformation, for more details refer to my <a href="https://borea17.github.io/paper_summaries/spatial_transformer#model-description">Spatial Transformer description</a>.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/air/img/attention_transform.gif" title="Attention Transform" class="img-fluid" alt="Attention Transfrom"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">This transformation is more constrained with only 3-DoF. Therefore it only allows cropping, translation and isotropic scaling to be applied to the input feature map.</td>
</tr>
</tbody>
</table>
↩︎</li>
<li id="fn2"><p>Using the pseudoinverse (or Moore-Penrose inverse) is beneficial to allow inverse mappings even if <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BA%7D%5E%7B(i)%7D"> becomes non-invertible, i.e., if <img src="https://latex.codecogs.com/png.latex?s%5E%7B(i)%7D%20=%200">.↩︎</p></li>
<li id="fn3"><p>Note that we assume normalized coordinates with same resolutions such that the notation is not completely messed up.↩︎</p></li>
<li id="fn4"><p><code>Amortized</code> variational approximation means basically <code>parameterized</code> variational approximation, i.e., we introduce a parameterized function <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5Cright)"> (e.g., neural network parameterized by <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cphi%7D">) that maps from an image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D"> to the distribution parameters for number of objects <img src="https://latex.codecogs.com/png.latex?n"> and their latent representation <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D">, see <a href="https://www.quora.com/What-is-amortized-variational-inference">this excellent answer on variational inference</a>.↩︎</p></li>
<li id="fn5"><p>The probabilistic decoder <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D,%20n%20%5Cright)"> is also just an approximation to the true generative process. However, note that for each <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> we know how the reconstruction should look like. I.e., if <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D,%20n%20%5Cright)"> approximates the true generative process, we can optimize it by maximizing its expectation for given <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D"> and <img src="https://latex.codecogs.com/png.latex?n"> sampled from the approximate true posterior <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D,%20n%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)">.↩︎</p></li>
<li id="fn6"><p>On a standard MNIST dataset, <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a> successfully used the centered isotropic multivariate Gaussian as a prior distribution.↩︎</p></li>
<li id="fn7"><p>That <a href="https://arxiv.org/abs/1603.08575">Eslami et al.&nbsp;(2016)</a> used an anealing geometric distribution is not mentioned in their paper, however Adam Kosiorek emailed the authors and received that information, see <a href="[this blog post](http://akosiorek.github.io/ml/2017/09/03/implementing-air.html)">his blog post</a>.↩︎</p></li>
<li id="fn8"><p>Note that weights and biases of linear layers are <a href="https://discuss.pytorch.org/t/how-are-layer-weights-and-biases-initialized-by-default/13073/2">defaulty initialized</a> by drawing uniformly in the interval <img src="https://latex.codecogs.com/png.latex?%5B-%5Cfrac%20%7B1%7D%7B%5Csqrt%7Bn_o%7D%7D,%20%5Cfrac%20%7B1%7D%7B%5Csqrt%7Bn_o%7D%7D%5D">, where <img src="https://latex.codecogs.com/png.latex?n_o"> denotes the number of outputs of the linear layer.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>reimplementation</category>
  <category>unsupervised</category>
  <category>generative</category>
  <guid>https://borea17.github.io/paper_summaries/air/index.html</guid>
  <pubDate>Sat, 19 Sep 2020 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Spatial Transformer Networks</title>
  <dc:creator>borea17 </dc:creator>
  <link>https://borea17.github.io/paper_summaries/spatial_transformer/index.html</link>
  <description><![CDATA[ 




<!-- nextjournal_link: "https://nextjournal.com/borea17/spatial_transformer_networks/" -->
<p><a href="https://arxiv.org/abs/1506.02025">Jaderberg et al.&nbsp;(2015)</a> introduced the learnable <strong>Spatial Transformer (ST)</strong> module that can be used to empower standard neural networks to actively spatially transform feature maps or input data. In essence, the ST can be understood as a black box that applies some spatial transformation (e.g., crop, scale, rotate) to a given input (or part of it) conditioned on the particular input during a single forward path. In general, STs can also be seen as a learnable attention mechanism (including spatial transformation on the region of interest). Notably, STs can be easily integrated in existing neural network architectures without any supervision or modification to the optimization, i.e., STs are differentiable plug-in modules. The authors could show that STs help the models to learn invariances to translation, scale, rotation and more generic warping which resulted in state-of-the-art performance on several benchmarks, see image below.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/ST_inpractice.gif" title="Spatial Transformer in Practice" class="img-fluid" alt="Spatial Transformer in Practice"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>ST Example</strong>: Results (after training) of using a ST as the first layer of a fully-connected network (<code>ST-FCN Affine</code>, left) or a convolutional neural network (<code>ST-CNN Affine</code>, right) trained for cluttered MNIST digit recognition are shown. Clearly, the output of the ST exhibits much less translation variance and attends to the digit. Taken from <a href="https://arxiv.org/abs/1506.02025">Jaderberg et al.&nbsp;(2015)</a> linked <a href="https://goo.gl/qdEhUu">video</a>.</td>
</tr>
</tbody>
</table>
<section id="model-description" class="level2">
<h2 class="anchored" data-anchor-id="model-description">Model Description</h2>
<p>The aim of STs is to provide neural networks with spatial transformation and attention capabilities in a reasonable and efficient way. Note that standard neural network architectures (e.g., CNNs) are limited in this regard<sup>1</sup>. Therefore, the ST constitutes parametrized transformations <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BT%7D_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D"> that transform the regular input grid to a new sampling grid, see image below. Then, some form of interpolation is used to compute the pixel values in the new sampling grid (i.e., interpolation between values of the old grid).</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/parametrised_sampling_grid.png" title="Parametrized Sampling Grids" class="img-fluid" alt="Parametrized Sampling Grids"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Two examples of applying the parametrised sampling grid to an image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BU%7D"> producing the output <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BV%7D">. The green dots represent the new sampling grid which is obtained by transforming the regular grid <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BG%7D"> (defined on <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BV%7D">) using the transformation <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BT%7D">. <br> (a) The sampling grid is the regular grid <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BG%7D%20=%20%5Cmathcal%7BT%7D_%7B%5Ctextbf%7BI%7D%7D%20(%5Ctextbf%7BG%7D)">, where <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BI%7D"> is the identity transformation matrix. <br> (b) The sampling grid is the result of warping the regular grid with an affine transformation <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BT%7D_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7BG%7D)">. <br> Taken from <a href="https://arxiv.org/abs/1506.02025">Jaderberg et al.&nbsp;(2015)</a>.</td>
</tr>
</tbody>
</table>
<p>To this end, the ST is divided into three consecutive parts:</p>
<ul>
<li><p><strong>Localisation Network</strong>: Its purpose is to retrieve the parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D"> of the spatial transformation <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BT%7D_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D"> taking the current feature map <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BU%7D"> as input, i.e., <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D%20=%20f_%7B%5Ctext%7Bloc%7D%7D%20%5Cleft(%5Ctextbf%7BU%7D%20%5Cright)">. Thereby, the spatial transformation is conditioned on the input. Note that dimensionality of <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D"> depends on the transformation type which needs to be defined beforehand, see some examples below. Furthermore, the localisation network can take any differentiable form, e.g., a CNN or FCN.</p>
<ins>
<p><em>Examples of Spatial Transformations</em></p>
</ins>
<p>The following examples highlight how a regular grid</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctextbf%7BG%7D%20=%20%5Cleft%5C%7B%20%5Cbegin%7Bbmatrix%7D%20x_i%5Et%20%5C%5C%20y_i%5Et%20%5Cend%7Bbmatrix%7D%0A%5Cright%5C%7D_%7Bi=1%7D%5E%7BH%5Et%20%5Ccdot%20W%5Et%7D%0A"></p>
<p>defined on the output/target map <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BV%7D"> (i.e., <img src="https://latex.codecogs.com/png.latex?H%5Et"> and <img src="https://latex.codecogs.com/png.latex?W%5Et"> denote height and width of <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BV%7D">) can be transformed into a new sampling grid</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cwidetilde%7B%5Ctextbf%7BG%7D%7D%20=%20%5Cleft%5C%7B%20%5Cbegin%7Bbmatrix%7D%20x_i%5Es%20%5C%5C%20y_i%5Es%20%5Cend%7Bbmatrix%7D%0A%5Cright%5C%7D_%7Bi=1%7D%5E%7BH%5Es%20%5Ccdot%20W%5Es%7D%0A"></p>
<p>defined on the input/source feature map <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BU%7D"> using a parametrized transformation <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BT%7D_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D">, i.e., <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7BG%7D%20=%20T_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(G)">. Visualizations have bee created by me, interactive versions can be found <a href="https://github.com/borea17/InteractiveTransformations">here</a>.</p>
<!-- * <ins>Affine Transformations</ins> -->
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/affine_transform.gif" class="img-fluid" alt="Affine Transform"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">This transformation allows cropping, translation, rotation, scale and skew to be applied to the input feature map. It has 6 degrees of freedom (DoF).</td>
</tr>
</tbody>
</table>
<!-- * <ins>(Standard) Attention</ins> -->
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/attention_transform.gif" class="img-fluid" alt="Attention Transform"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">This transformation is more constrained with only 3-DoF. Therefore it only allows cropping, translation and isotropic scaling to be applied to the input feature map.</td>
</tr>
</tbody>
</table>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/projective_transform.gif" class="img-fluid" alt="Projective Transform"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">This transformation has 8-DoF and can be seen as an extension to the affine transformation. The main difference is that affine transformations are constrained to preserve parallelism.</td>
</tr>
</tbody>
</table>
<!-- * <ins>Thin Plate Spline (TPS) Transformations</ins> --></li>
<li><p><strong>Grid Generator</strong>: Its purpose to create the new sampling grid <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7BG%7D%7D"> on the input feature map <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BU%7D"> by applying the predefined parametrized transformation using the parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D"> obtained from the localisation network, see examples above. <!-- Note that [Jaderberg et al. --> <!-- (2015)](https://arxiv.org/abs/1506.02025) define normalized --> <!-- coordinates for the target feature map, i.e., $-1 \le x_i^t, y_i^t \le 1$.  --></p></li>
<li><p><strong>Sampler</strong>: Its purpose is to compute the warped version of the input feature map <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BU%7D"> by computing the pixel values in the new sampling grid <img src="https://latex.codecogs.com/png.latex?%5Cwidetilde%7B%5Ctextbf%7BG%7D%7D"> obtained from the grid generator. Note that the new sampling grid does not necessarily align with the input feature map grid, therefore some kind of interpolation is needed. <a href="https://arxiv.org/abs/1506.02025">Jaderberg et al. (2015)</a> formulate this interpolation as the application of a sampling kernel centered at a particular location in the input feature map, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20V_i%5Ec%20=%20%5Csum_%7Bn=1%7D%5E%7BH%5Es%7D%20%5Csum_%7Bm=1%7D%5E%7BW%5Es%7D%20U_%7Bn,m%7D%5Ec%20%5Ccdot%20%5Cunderbrace%7Bk(x_i%5Es%20-%20x_m%5Et;%0A%20%20%5Cboldsymbol%7B%5CPhi%7D_x)%7D_%7Bk_%7B%5Cboldsymbol%7B%5CPhi%7D_x%7D%7D%20%5Ccdot%20%5Cunderbrace%7Bk(y_i%5Es%20-%20y_n%5Et;%20%5Cboldsymbol%7B%5CPhi%7D_y)%7D_%7Bk_%7B%5Cboldsymbol%7B%5CPhi%7D_y%7D%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?V_i%5Ec%20%5Cin%20%5Cmathbb%7BR%7D%5E%7BW%5Et%20%5Ctimes%20H%5Et%7D"> denotes the new pixel value of the <img src="https://latex.codecogs.com/png.latex?c">-th channel at the <img src="https://latex.codecogs.com/png.latex?i">-th position of the new sampling grid coordinates<sup>2</sup> <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Bbmatrix%7D%20x_i%5Es%20&amp;%20y_i%5Es%5Cend%7Bbmatrix%7D%5E%7BT%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5CPhi%7D_x,%20%5Cboldsymbol%7B%5CPhi%7D_y"> are the parameters of a generic sampling kernel <img src="https://latex.codecogs.com/png.latex?k()"> which defines the image interpolation. As the sampling grid coordinates are not channel-dependent, each channel is transformed in the same way resulting in spatial consistency between channels. Note that although in theory we need to sum over all input locations, in practice we can ignore this sum by just looking at the kernel support region for each <img src="https://latex.codecogs.com/png.latex?V_i%5Ec"> (similar to CNNs).</p>
<p>The sampling kernel can be chosen freely as long as (sub-)gradients can be defined with respect to <img src="https://latex.codecogs.com/png.latex?x_i%5Es"> and <img src="https://latex.codecogs.com/png.latex?y_i%5Es">. Some possible choices are shown below.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Cbegin%7Barray%7D%7Blcc%7D%0A%20%20%5Chline%0A%20%20%20%20%5Ctextbf%7BInterpolation%20Method%7D%20&amp;%20k_%7B%5Cboldsymbol%7B%5CPhi%7D_x%7D%20&amp;%0A%20%20k_%7B%5Cboldsymbol%7B%5CPhi%7D_x%7D%20%5C%5C%20%5Chline%0A%20%20%20%20%5Ctext%7BNearest%20Neightbor%7D%20&amp;%20%20%5Cdelta(%20%5Clfloor%20x_i%5Es%20+%200.5%5Crfloor%20-%0A%20%20x_m%5Et)%20&amp;%20%20%5Cdelta(%20%5Clfloor%20y_i%5Es%20+%200.5%5Crfloor%20-%20y_n%5Et)%20%5C%5C%0A%20%20%20%20%5Ctext%7BBilinear%7D%20&amp;%20%20%5Cmax%20%5Cleft(0,%201%20-%20%20%5Cmid%20x_i%5Es%20-%20x_m%5Et%20%5Cmid%0A%20%20%5Cright)%20&amp;%20%20%5Cmax%20(0,%201%20-%20%5Cmid%20y_i%5Es%20-%20y_m%5Et%5Cmid%20)%20%5C%5C%20%5Chline%0A%20%20%5Cend%7Barray%7D%0A"></p></li>
</ul>
<p>The figure below summarizes the ST architecture and shows how the individual parts interact with each other.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/spatial_transformer.png" title="Architecture of Spatial Transformer" class="img-fluid" alt="Architecture of Spatial Transformer"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Architecture of ST Module</strong>. Taken from <a href="https://arxiv.org/abs/1506.02025">Jaderberg et al.&nbsp;(2015)</a>.</td>
</tr>
</tbody>
</table>
<p><strong>Motivation</strong>: With the introduction of GPUs, convolutional layers enabled computationally efficient training of feature detectors on patches due to their weight sharing and local connectivity concepts. Since then, CNNs have proven to be the most powerful framework when it comes to computer vision tasks such as image classification or segmentation.</p>
<p>Despite their success, <a href="https://arxiv.org/abs/1506.02025">Jaderberg et al. (2015)</a> note that CNNs are still lacking mechanisms to be spatially invariant to the input data in a computationally and parameter efficient manner. While convolutional layers are translation-equivariant to the input data and the use of max-pooling layers has helped to allow the network to be somewhat spatially invariant to the position of features, this invariance is limited to the (typically) small spatial support of max-pooling (e.g., <img src="https://latex.codecogs.com/png.latex?2%5Ctimes%202">). As a result, CNNs are typically not invariant to larger transformations, thus need to learn complicated functions to approximate these invariances.</p>
<!-- Data augmentation is a standard trick -->
<!-- to increase the performance of CNNs by  -->
<p>What if we could enable the network to learn transformations of the input data? This is the main idea of STs! Learning spatial invariances is much easier when you have spatial transformation capabilities. The second aim of STs is to be computationally and parameter efficient. This is done by using structured, parameterized transformations which can be seen as a weight sharing scheme.</p>
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p><a href="https://arxiv.org/abs/1506.02025">Jaderberg et al.&nbsp;(2015)</a> performed several supervised learning tasks (distorted MNIST, Street View House Numbers, fine-grained bird classification) to test the performance of a standard architecture (FCN or CNN) against an architecture that includes one or several ST modules. They could emperically validate that including STs results in performance gains, i.e., higher accuracies across multiple tasks.</p>
<p>The following reimplementation aims to reproduce a subset of the distored MNIST experiment (RTS distorted MNIST) comparing a standard CNN with a ST-CNN architecture. A starting point for the implementation was <a href="https://pytorch.org/tutorials/intermediate/spatial_transformer_tutorial.html">this pytorch tutorial by Ghassen Hamrouni</a>.</p>
<section id="rts-distorted-mnist" class="level3">
<h3 class="anchored" data-anchor-id="rts-distorted-mnist">RTS Distorted MNIST</h3>
<p>While <a href="https://arxiv.org/abs/1506.02025">Jaderberg et al.&nbsp;(2015)</a> explored multiple distortions on the MNIST handwriting dataset, this reimplementation focuses on the rotation-translation-scale (RTS) distorted MNIST, see image below. As described in appendix A.4 of <a href="https://arxiv.org/abs/1506.02025">Jaderberg et al.&nbsp;(2015)</a> this dataset can easily be generated by augmenting the standard MNIST dataset as follows: * randomly rotate by sampling the angle uniformly in <img src="https://latex.codecogs.com/png.latex?%5B+45%5E%7B%5Ccirc%7D,%2045%5E%7B%5Ccirc%7D%5D">, * randomly scale by sampling the factor uniformly in <img src="https://latex.codecogs.com/png.latex?%5B0.7,%201.2%5D">, * translate by picking a random location on a <img src="https://latex.codecogs.com/png.latex?42%5Ctimes%2042"> image (MNIST digits are <img src="https://latex.codecogs.com/png.latex?28%20%5Ctimes%2028">).</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/distortedMNIST.png" title="RTS Distorted MNIST Examples" class="img-fluid" alt="RTS Distorted MNIST Examples"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>RTS Distorted MNIST Examples</strong></td>
</tr>
</tbody>
</table>
<p>Note that this transformation could also be used as a data augmentation technique, as the resulting images remain (mostly) valid digit representations (humans could still assign correct labels).</p>
<p>The code below can be used to create this dataset:</p>
<div class="cell" data-execution_count="1">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets, transforms</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> load_data():</span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""loads MNIST datasets with 'RTS' (rotation, translation, scale)</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    transformation</span></span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        train_dataset (torch dataset): training dataset</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        test_dataset (torch dataset): test dataset</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> place_digit_randomly(img):</span>
<span id="cb1-14">        new_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>])</span>
<span id="cb1-15">        x_pos, y_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,))</span>
<span id="cb1-16">        new_img[y_pos:y_pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, x_pos:x_pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img</span>
<span id="cb1-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> new_img</span>
<span id="cb1-18"></span>
<span id="cb1-19">    transform <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.Compose([</span>
<span id="cb1-20">        transforms.RandomAffine(degrees<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>),</span>
<span id="cb1-21">                                scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>)),</span>
<span id="cb1-22">        transforms.ToTensor(),</span>
<span id="cb1-23">        transforms.Lambda(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> img: place_digit_randomly(img)),</span>
<span id="cb1-24">        transforms.Lambda(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> img: img.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb1-25">    ])</span>
<span id="cb1-26">    train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.MNIST(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform,</span>
<span id="cb1-27">                                   train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-28">    test_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.MNIST(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data'</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transform,</span>
<span id="cb1-29">                                   train<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> train_dataset, test_dataset</span>
<span id="cb1-31"></span>
<span id="cb1-32"></span>
<span id="cb1-33">train_dataset, test_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_data()</span></code></pre></div>
</details>
</div>
</section>
<section id="model-implementation" class="level3">
<h3 class="anchored" data-anchor-id="model-implementation">Model Implementation</h3>
<p>The model implementation can be divided into three tasks:</p>
<ul>
<li><p><strong>Network Architectures</strong>: The network architectures are based upon the description in appendix A.4 of <a href="https://arxiv.org/abs/1506.02025">Jaderberg et al. (2015)</a>. Note that there is only one ST at the beginning of the network such that the resulting transformation is only applied over one channel (input channel). For the sake of simplicity, we only implement an affine transformation matrix. Clearly, including an ST increases the networks capacity due to the number of added trainable parameters. To allow for a fair comparison, we therefore increase the capacity of the convolutional and linear layers in the standard CNN.</p>
<p>The code below creates both architectures and counts their trainable parameters.</p>
<div class="cell" data-execution_count="2">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb2-4"></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_number_of_trainable_parameters(model):</span>
<span id="cb2-7">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""taken from</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  discuss.pytorch.org/t/how-do-i-check-the-number-of-parameters-of-a-model/4325</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">  """</span></span>
<span id="cb2-10">  model_parameters <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> p: p.requires_grad, model.parameters())</span>
<span id="cb2-11">  params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([np.prod(p.size()) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> p <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> model_parameters])</span>
<span id="cb2-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> params</span>
<span id="cb2-13"></span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CNN(nn.Module):</span>
<span id="cb2-16"></span>
<span id="cb2-17">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, include_ST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb2-18">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>(CNN, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>).<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-19">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ST <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> include_ST</span>
<span id="cb2-20">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ST-CNN Affine'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> include_ST <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CNN'</span></span>
<span id="cb2-21">      c_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> include_ST <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">36</span></span>
<span id="cb2-22">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.convs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-23">          nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, c_dim, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb2-24">          nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb2-25">          nn.ReLU(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb2-26">          nn.Conv2d(c_dim, c_dim, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb2-27">          nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb2-28">          nn.ReLU(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb2-29">      )</span>
<span id="cb2-30">      out_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-31">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.classification <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-32">          nn.Linear(out_conv<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>c_dim, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>),</span>
<span id="cb2-33">          nn.ReLU(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb2-34">          nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb2-35">          nn.LogSoftmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-36">      )</span>
<span id="cb2-37">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> include_ST:</span>
<span id="cb2-38">          loc_conv_out_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb2-39">          loc_regression_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb2-40">          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initalize final regression layer to identity transform</span></span>
<span id="cb2-41">          loc_regression_layer.weight.data.fill_(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-42">          loc_regression_layer.bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Parameter(</span>
<span id="cb2-43">              torch.tensor([<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.</span>]))</span>
<span id="cb2-44">          <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.localisation_net <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-45">              nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb2-46">              nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb2-47">              nn.ReLU(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb2-48">              nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb2-49">              nn.ReLU(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb2-50">              nn.Flatten(),</span>
<span id="cb2-51">              nn.Linear(loc_conv_out_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>),</span>
<span id="cb2-52">              nn.ReLU(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>),</span>
<span id="cb2-53">              loc_regression_layer</span>
<span id="cb2-54">          )</span>
<span id="cb2-55">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-56"></span>
<span id="cb2-57">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, img):</span>
<span id="cb2-58">      batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-59">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ST:</span>
<span id="cb2-60">          out_ST <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ST_module(img)</span>
<span id="cb2-61">          img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> out_ST</span>
<span id="cb2-62">      out_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.convs(img)</span>
<span id="cb2-63">      out_classification <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.classification(out_conv.view(batch_size, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-64">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out_classification</span>
<span id="cb2-65"></span>
<span id="cb2-66">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ST_module(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp):</span>
<span id="cb2-67">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># act on twice downsampled inp</span></span>
<span id="cb2-68">      down_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.interpolate(inp, scale_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bilinear'</span>,</span>
<span id="cb2-69">                                recompute_scale_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, align_corners<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-70">      theta_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.localisation_net(down_inp)</span>
<span id="cb2-71">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affine transformation</span></span>
<span id="cb2-72">      theta_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta_vector.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-73">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># grid generator</span></span>
<span id="cb2-74">      grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.affine_grid(theta_matrix, inp.size(), align_corners<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-75">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sampler</span></span>
<span id="cb2-76">      out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.grid_sample(inp, grid, align_corners<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-77">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> out</span>
<span id="cb2-78"></span>
<span id="cb2-79">  <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_attention_rectangle(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp):</span>
<span id="cb2-80">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> inp.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch size has to be one'</span></span>
<span id="cb2-81">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># act on twice downsampled inp</span></span>
<span id="cb2-82">      down_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.interpolate(inp, scale_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bilinear'</span>,</span>
<span id="cb2-83">                               recompute_scale_factor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, align_corners<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-84">      theta_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.localisation_net(down_inp)</span>
<span id="cb2-85">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># affine transformation matrix</span></span>
<span id="cb2-86">      theta_matrix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> theta_vector.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>).detach()</span>
<span id="cb2-87">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create normalized target rectangle input image</span></span>
<span id="cb2-88">      target_rectangle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor([</span>
<span id="cb2-89">          [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb2-90">          [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>],</span>
<span id="cb2-91">          [<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span>]]</span>
<span id="cb2-92">      ).to(inp.device)</span>
<span id="cb2-93">      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get source rectangle by transformation</span></span>
<span id="cb2-94">      source_rectangle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.matmul(theta_matrix, target_rectangle)</span>
<span id="cb2-95">      <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> source_rectangle</span>
<span id="cb2-96"></span>
<span id="cb2-97"></span>
<span id="cb2-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># instantiate models</span></span>
<span id="cb2-99">cnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CNN(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, include_ST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-100">st_cnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CNN(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>, include_ST<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print trainable parameters</span></span>
<span id="cb2-102"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> model <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [cnn, st_cnn]:</span>
<span id="cb2-103">  num_trainable_params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_number_of_trainable_parameters(model)</span>
<span id="cb2-104">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> has </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>num_trainable_params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> trainable parameters'</span>)</span></code></pre></div>
</details>
</div>
<img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/trainable_params.png" title="Trainable Paramas" class="img-fluid" alt="Trainable Parameters"></li>
<li><p><strong>Training Procedure</strong>: As described in appendix A.4 of <a href="https://arxiv.org/abs/1506.02025">Jaderberg et al. (2015)</a>, the networks are trained with standard SGD, batch size of <img src="https://latex.codecogs.com/png.latex?256"> and base learning rate of <img src="https://latex.codecogs.com/png.latex?0.01">. To reduce computation time, the number of epochs is limited to <img src="https://latex.codecogs.com/png.latex?50">.</p>
<p>The loss function is the multinomial cross entropy loss, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Ctext%7BLoss%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%20%5Csum_%7Bk=1%7D%5EC%20p_i%5E%7B(k)%7D%20%5Ccdot%20%5Clog%0A%20%20%5Cleft(%20%5Cwidehat%7Bp%7D_i%5E%7B(k)%7D%20%5Cright),%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?k"> enumerates the number of classes, <img src="https://latex.codecogs.com/png.latex?i"> enumerates the number of images, <img src="https://latex.codecogs.com/png.latex?p_i%5E%7B(k)%7D%20%5Cin%20%5C%7B0,%201%5C%7D"> denotes the true probability of image <img src="https://latex.codecogs.com/png.latex?i"> and class <img src="https://latex.codecogs.com/png.latex?k"> and <img src="https://latex.codecogs.com/png.latex?%5Cwidehat%7Bp%7D_i%5E%7B(k)%7D%20%5Cin%20%5B0,%201%5D"> is the probability predicted by the network. Note that the true probability distribution is categorical (hard labels), i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20p_i%5E%7B(k)%7D%20=%201_%7Bk%20=%20y_i%7D%20=%20%5Cbegin%7Bcases%7D1%20&amp;%20%5Ctext%7Bif%20%7D%20k%20=%20y_i%20%5C%5C%200%0A%20%20&amp;%20%5Ctext%7Belse%7D%5Cend%7Bcases%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?y_i%20%5Cin%20%5C%7B0,%201,%20%5Ccdots,%209%20%5C%7D"> is the label assigned to the <img src="https://latex.codecogs.com/png.latex?i">-th image <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D_i">. Thus, we can rewrite the loss as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Ctext%7BLoss%7D%20=%20-%20%5Csum_%7Bi=1%7D%5EN%20%5Clog%20%5Cleft(%20%5Cwidehat%7Bp%7D_%7Bi,%20y_i%7D%0A%20%20%5Cright),%0A"></p>
<p>which is the definition of the negative log likelihood loss (<a href="https://pytorch.org/docs/stable/generated/torch.nn.NLLLoss.html">NLLLoss</a>) in Pytorch, when the logarithmized predictions <img src="https://latex.codecogs.com/png.latex?%5Clog%20%5Cleft(%20%5Cwidehat%7Bp%7D_%7Bi,%20y_i%7D%20%5Cright)"> (matrix of size <img src="https://latex.codecogs.com/png.latex?N%5Ctimes%20C">) and class labels <img src="https://latex.codecogs.com/png.latex?y_i"> (vector of size <img src="https://latex.codecogs.com/png.latex?N">) are given as input.</p>
<p>The code below summarizes the whole training procedure.</p>
<div class="cell" data-execution_count="3">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> livelossplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PlotLosses</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train(model, dataset):</span>
<span id="cb3-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fix hyperparameters</span></span>
<span id="cb3-7">    epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb3-8">    learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span></span>
<span id="cb3-9">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span></span>
<span id="cb3-10">    step_size_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span></span>
<span id="cb3-11">    gamma_scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span></span>
<span id="cb3-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set device</span></span>
<span id="cb3-13">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb3-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>device<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-15"></span>
<span id="cb3-16">    data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-17">                            num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb3-18"></span>
<span id="cb3-19">    model.to(device)</span>
<span id="cb3-20">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.SGD(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>learning_rate)</span>
<span id="cb3-21">    scheduler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.lr_scheduler.StepLR(optimizer, gamma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>gamma_scheduler,</span>
<span id="cb3-22">                                                step_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>step_size_scheduler)</span>
<span id="cb3-23"></span>
<span id="cb3-24">    losses_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotLosses()</span>
<span id="cb3-25">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Start training with </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-27">        avg_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> data, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> data_loader:</span>
<span id="cb3-29">            model.zero_grad()</span>
<span id="cb3-30"></span>
<span id="cb3-31">            log_prop_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(data.to(device))</span>
<span id="cb3-32">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># multinomial cross entropy loss</span></span>
<span id="cb3-33">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.nll_loss(log_prop_pred, label.to(device))</span>
<span id="cb3-34"></span>
<span id="cb3-35">            loss.backward()</span>
<span id="cb3-36">            optimizer.step()</span>
<span id="cb3-37">            scheduler.step()</span>
<span id="cb3-38"></span>
<span id="cb3-39">            avg_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader)</span>
<span id="cb3-40"></span>
<span id="cb3-41">        losses_plot.update({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'log loss'</span>: np.log(avg_loss)})</span>
<span id="cb3-42">        losses_plot.send()</span>
<span id="cb3-43">    trained_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb3-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> trained_model</span></code></pre></div>
</details>
</div></li>
<li><p><strong>Test Procedure</strong>: A very simple test procedure to evaluate both models is shown below. It is basically the same as in <a href="https://pytorch.org/tutorials/intermediate/spatial_transformer_tutorial.html">the pytorch tutorial</a>.</p>
<div class="cell" data-execution_count="4">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test(trained_model, test_dataset):</span>
<span id="cb4-2">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb4-3">    test_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(test_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb4-4">                            num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb4-6">        trained_model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb4-7">        test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-8">        correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> data, label <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> test_loader:</span>
<span id="cb4-10">            data, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.to(device), label.to(device)</span>
<span id="cb4-11"></span>
<span id="cb4-12">            log_prop_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_model(data)</span>
<span id="cb4-13">            class_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_prop_pred.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, keepdim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-14"></span>
<span id="cb4-15">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> F.nll_loss(log_prop_pred, label).item()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_loader)</span>
<span id="cb4-16">            correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> class_pred.eq(label.view_as(class_pred)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb4-17"></span>
<span id="cb4-18">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>trained_model<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">: avg loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(test_loss, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,  '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-19">              <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'avg acc </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>np<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>correct<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_dataset), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span>
<span id="cb4-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>Lastly, the results can also divided into three sections:</p>
<ul>
<li><p><strong>Training Results</strong>: Firstly, we train our models on the training dataset and compare the logarithmized losses:</p>
<div class="cell" data-execution_count="5">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">trained_cnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(cnn, train_dataset)</span></code></pre></div>
</details>
</div>
<img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/train_cnn_results.png" title="Training Results CNN" class="img-fluid" alt="Training Results CNN">
<div class="cell" data-execution_count="6">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">trained_st_cnn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(st_cnn, train_dataset)</span></code></pre></div>
</details>
</div>
<img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/train_st_cnn_results.png" title="Training Results ST-CNN" class="img-fluid" alt="Training Results ST-CNN">
<p>The logarithmized losses already indicate that the ST-CNN performs better than the standard CNN (at least, it decreases the loss faster). However, it can also be noted that training the ST-CNN seems less stable.</p></li>
<li><p><strong>Test Performance</strong>: While the performance on the training dataset may be a good indicator, test set performance is much more meaningful. Let’s compare the losses and accuracies between both trained models:</p>
<div class="cell" data-execution_count="7">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> trained_model <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [trained_cnn, trained_st_cnn]:</span>
<span id="cb7-2">    test(trained_model, test_dataset)</span></code></pre></div>
</details>
</div>
<img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/test_results.png" title="Test Results" class="img-fluid" alt="Test Results">
<p>Clearly, the ST-CNN performs much better than the standard CNN. Note that training for more epochs would probably result in even better accuracies in both models.</p></li>
<li><p><strong>Visualization of Learned Transformations</strong>: Lastly, it might be interesting to see what the ST module actually does after training:</p>
<div class="cell" data-execution_count="8">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.patches <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ConnectionPatch</span>
<span id="cb8-3"></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> visualize_learned_transformations(trained_st_cnn, test_dataset, digit_class<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>):</span>
<span id="cb8-6">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb8-7">    trained_st_cnn.to(device)</span>
<span id="cb8-8">    n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-9"></span>
<span id="cb8-10">    data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(test_dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-11">    batch_img, batch_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">iter</span>(data_loader))</span>
<span id="cb8-12">    i_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(batch_label.numpy() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> digit_class)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:n_samples]</span>
<span id="cb8-13"></span>
<span id="cb8-14">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb8-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, i_sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(i_samples):</span>
<span id="cb8-16">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_img[i_sample]</span>
<span id="cb8-17">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch_label[i_sample]</span>
<span id="cb8-18"></span>
<span id="cb8-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># input image</span></span>
<span id="cb8-20">        ax1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter)</span>
<span id="cb8-21">        plt.imshow(transforms.ToPILImage()(img), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb8-22">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb8-24">            ax1.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Input'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb8-25">                        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb8-26"></span>
<span id="cb8-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># image including border of affine transformation</span></span>
<span id="cb8-28">        img_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device)</span>
<span id="cb8-29">        source_normalized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_st_cnn.get_attention_rectangle(img_inp)</span>
<span id="cb8-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remap into absolute values</span></span>
<span id="cb8-31">        source_absolute <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">20.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(source_normalized.cpu() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-32">        ax2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_samples)</span>
<span id="cb8-33">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb8-34">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb8-35">        X, Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(x, y)</span>
<span id="cb8-36">        plt.pcolor(X, Y, img.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb8-37">        plt.plot(source_absolute[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], source_absolute[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>)</span>
<span id="cb8-38">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-39">        ax2.axes.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb8-40">        ax2.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb8-41">        ax2.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>)</span>
<span id="cb8-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb8-43">            ax2.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ST'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb8-44">                        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb8-45">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add arrow between</span></span>
<span id="cb8-46">        con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConnectionPatch(xyA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>), xyB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), coordsA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>,</span>
<span id="cb8-47">                              coordsB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>, axesA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax1, axesB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax2,</span>
<span id="cb8-48">                              arrowstyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-|&gt;"</span>, shrinkB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb8-49">        ax2.add_artist(con)</span>
<span id="cb8-50"></span>
<span id="cb8-51">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ST module output</span></span>
<span id="cb8-52">        st_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_st_cnn.ST_module(img.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device))</span>
<span id="cb8-53"></span>
<span id="cb8-54">        ax3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_samples)</span>
<span id="cb8-55">        plt.imshow(transforms.ToPILImage()(st_img.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).cpu()), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb8-56">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb8-58">            ax3.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ST Output'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb8-59">                        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb8-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add arrow between</span></span>
<span id="cb8-61">        con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConnectionPatch(xyA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>), xyB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), coordsA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>,</span>
<span id="cb8-62">                              coordsB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>, axesA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax2, axesB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax3,</span>
<span id="cb8-63">                              arrowstyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-|&gt;"</span>, shrinkB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb8-64">        ax3.add_artist(con)</span>
<span id="cb8-65"></span>
<span id="cb8-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># predicted label</span></span>
<span id="cb8-67">        log_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_st_cnn(img.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device))</span>
<span id="cb8-68">        pred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_pred.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].item()</span>
<span id="cb8-69"></span>
<span id="cb8-70">        ax4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_samples)</span>
<span id="cb8-71">        plt.text(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.45</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.43</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(pred_label), fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>)</span>
<span id="cb8-72">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-73">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#plt.title(f'Ground Truth {label.item()}', y=-0.1, fontsize=14)</span></span>
<span id="cb8-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb8-75">            ax4.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Prediction'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb8-76">                        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb8-77">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add arrow between</span></span>
<span id="cb8-78">        con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConnectionPatch(xyA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41</span>), xyB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.65</span>), coordsA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>,</span>
<span id="cb8-79">                              coordsB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>, axesA<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax3, axesB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax4,</span>
<span id="cb8-80">                              arrowstyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-|&gt;"</span>, shrinkB<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb8-81">        ax4.add_artist(con)</span>
<span id="cb8-82">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb8-83"></span>
<span id="cb8-84"></span>
<span id="cb8-85">visualize_learned_transformations(st_cnn, test_dataset, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</details>
</div>
<img src="https://borea17.github.io/paper_summaries/spatial_transformer/img/transformation_visualization.png" title="Transformation Visualization" class="img-fluid" alt="Transformation Visualization">
<p>Clearly, the ST module attends to the digits such that the ST output has much less variation in terms of rotation, translation and scale making the classification task for the follow up CNN easier.</p>
<p>Pretty cool, hugh?</p></li>
</ul>
<hr>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Clearly, convolutional layers are not rotation or scale invariant. Even the translation-equivariance property does not necessarily make CNNs translation-invariant as typically some fully connected layers are added at the end. Max-pooling layers can introduce some translation invariance, however are limited by their size such that often large translation are not captured.↩︎</p></li>
<li id="fn2"><p><a href="https://arxiv.org/abs/1506.02025">Jaderberg et al.&nbsp;(2015)</a> define the transformation with normalized coordinates, i.e., <img src="https://latex.codecogs.com/png.latex?-1%20%5Cle%20x_i%5Es,%20y_i%5Es%20%5Cle%201">. However, in the sampling kernel equations it seems more likely that they assume unnormalized/absolute coordinates, e.g., in equation 4 of the paper normalized coordinates would be nonsensical.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>reimplementation</category>
  <guid>https://borea17.github.io/paper_summaries/spatial_transformer/index.html</guid>
  <pubDate>Sat, 29 Aug 2020 22:00:00 GMT</pubDate>
</item>
<item>
  <title>U-Net: Convolutional Networks for Biomedical Image Segmentation</title>
  <dc:creator>borea17 </dc:creator>
  <link>https://borea17.github.io/paper_summaries/u_net/index.html</link>
  <description><![CDATA[ 




<!-- nextjournal_link: "https://nextjournal.com/borea17/u-net/" -->
<p><a href="https://arxiv.org/abs/1505.04597">Ronneberger et al.&nbsp;(2015)</a> introduced a novel neural network architecture to generate better semantic segmentations (i.e., class label assigend to each pixel) in limited datasets which is a typical challenge in the area of biomedical image processing (see figure below for an example). In essence, their model consists of a U-shaped convolutional neural network (CNN) with skip connections between blocks to capture context information, while allowing for precise localizations. In addition to the network architecture, they describe some data augmentation methods to use available data more efficiently. By the time the paper was published, the proposed architecture won several segmentation challenges in the field of biomedical engineering, outperforming state-of-the-art models by a large margin. Due to its success and efficiency, U-Net has become a standard architecture when it comes to image segmentations tasks even in the non-biomedical area (e.g., <a href="https://arxiv.org/abs/1611.07004">image-to-image translation</a>, <a href="https://arxiv.org/abs/1706.03319">neural style transfer</a>, <a href="https://arxiv.org/abs/1901.11390">Multi-Objetct Network</a>).</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/u_net/img/semantic_segmentation.png" title="Semantic Segmentation Example" class="img-fluid" alt="Semantic Segmentation Example"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Example of a biomedical image segmentation task in which dental x-ray images should be segmented: <br> (<strong>Left</strong>) Raw dental image. <br> (<strong>Right</strong>) Ground truth segmentation, each color represents some class (e.g., red=pulp, blue=caries). <br>Taken from <a href="http://www-o.ntust.edu.tw/~cweiwang/ISBI2015/challenge2/index.html">ISBI 2015 Challenge on Computer-Automated Detection of Caries in Bitewing Radiography</a></td>
</tr>
</tbody>
</table>
<section id="model-description" class="level2">
<h2 class="anchored" data-anchor-id="model-description">Model Description</h2>
<p>U-Net builds upon the ideas of <code>Fully Convolutional Networks (FCNs) for Semantic Segmentation</code> by <a href="https://arxiv.org/abs/1411.4038">Long et al.&nbsp;(2015)</a> who successfully trained FCNs (including convolutional prediction, upsampling layers and skip connections) end-to-end (pixels-to-pixels) on semantic segmentation tasks. U-Net is basically a modified version of the FCN by making the architecture more symmetric, i.e., adding a more powerful expansive path. <a href="https://arxiv.org/abs/1505.04597">Ronneberger et al. (2015)</a> argue that this modification yields more precise segmentations due to its capacity to better propagate context information to higher resolution layers.</p>
<p><strong>FCN architecture</strong>: The main idea of the FCN architecture is to take a standard classification network (such as VGG-16), discard the final classifier layer, convert fully connected layers into convolutions (i.e., prediction layers) and add skip connections to (some) pooling layers, see figure below. The skip connections consist of a prediction (<img src="https://latex.codecogs.com/png.latex?1%20%5Ctimes%201"> convolutional layer with channel dimension equal to number of possible classes) and a deconvolutional (upsampling) layer.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/u_net/img/FCN_example2.png" title="Example FCN Architecture" class="img-fluid" alt="Example FCN Architecture"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Example of FCN Architecture. VGG-16 net is used as feature learning part. Numbers under the cubes indicate the number of output channels. The prediction layer is itself a <img src="https://latex.codecogs.com/png.latex?1%20%5Ctimes%201"> convolutional layer (the final output consists only of 6 possible classes). A final softmax layer is added to output a normalized classification per pixel. Taken from <a href="https://arxiv.org/abs/1610.01732">Tai et al.&nbsp;(2017)</a></td>
</tr>
</tbody>
</table>
<p><strong>U-Net architecture</strong>: The main idea of the U-Net architecture is to build an encoder-decoder FCN with skip connections between corresponding blocks, see figure below. The left side of U-Net, i.e., <em>contractive path</em> or <em>encoder</em>, is very similar to the left side of the FC architecture above. The right side of U-Net, i.e., <em>expansive path</em> or <em>decoder</em>, differs due to its number of feature channels and the convolutional + ReLu layers. Note that the input image size is greater than the output segmentation size, i.e., the network only segments the inner part of the image<sup>1</sup>.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/u_net/img/u_net_architecture.png" title="U-Net Architecture" class="img-fluid" alt="U-Net Architecture"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">U-Net architecture as proposed by <a href="https://arxiv.org/abs/1505.04597">Ronneberger et al.&nbsp;(2015)</a>.</td>
</tr>
</tbody>
</table>
<p><strong>Motivation</strong>: Semantic segmentation of images can be divided into two tasks</p>
<ul>
<li><strong>Context Information Retrieval</strong>: Global information about the different parts of the image, e.g., in a CNN classification network after training there might be some feature representation for <em>nose</em>, <em>eyes</em> and <em>mouth</em>. Depending on the feature combination at hand, the network may classify the image as <em>human</em> or <em>not human</em>.</li>
<li><strong>Localization of Context Information</strong>: In addition to <code>what</code>, localization ensures <code>where</code>. Semantic segmentation is only possible when content information can be localized. Note: In image classification, we are often not interested in <code>where</code><sup>2</sup>.</li>
</ul>
<p><a href="https://arxiv.org/abs/1411.4038">Long et al.&nbsp;(2015)</a> argue that CNNs during classification tasks must learn useful feature representations, i.e., classification nets are capable to solve the <em>context information retrieval</em> task. Fully connected layers are inappropriate for semantic segmentation as they throw away the principle of localization. These two arguments motivate the use of FCNs that take the feature representation part of classification nets and convert fully connected layers into convolutions. During the <em>contractive</em> path, information gets compressed into coarse appearance/context information. However, in this process the dimensionality of the input is reduced massively. Skip connections are introduced to combine coarse, semantic information of deeper layers with finer, appearance information of early layers. Thereby, the <em>localization</em> task is addressed.</p>
<p><a href="https://arxiv.org/abs/1505.04597">Ronneberger et al.&nbsp;(2015)</a> extend these ideas by essentially increasing the capacity of the decoder path. The symmetric architecture allows to combine low level feature maps (left side, fine information) with high level feature maps (right side, coarse information) more effectively such that context information can be better propagated to higher resolution layers (top right). As a result, more precise segmentations can be retrieved even with few training examples, indicating that the optimization problem is better posed in U-Nets.</p>
</section>
<section id="implementatation" class="level2">
<h2 class="anchored" data-anchor-id="implementatation">Implementatation</h2>
<p><a href="https://arxiv.org/abs/1505.04597">Ronneberger et al.&nbsp;(2015)</a> demonstrated U-Net application results for three different segmentation tasks and open-sourced their original <a href="https://lmb.informatik.uni-freiburg.de/people/ronneber/u-net/">U-Net implementation</a> (or rather the ready trained network). The whole training process and data augmentation procedures are not provided (except for overlap-tile segmentation). The following reimplementation aims to give an understanding of the whole paper (data augmentation and training process included), while being as simple as possible. Note that there are lots of open-source U-Net reimplementations out there, however most of them are already modified versions.</p>
<section id="em-dataset" class="level3">
<h3 class="anchored" data-anchor-id="em-dataset">EM Dataset</h3>
<p>Only the first task of the three different U-Net applications is reimplemented: The segmentation of neuronal structures in electron microscopic (EM) recordings. The training data consists of 30 images (<img src="https://latex.codecogs.com/png.latex?512%20%5Ctimes%20512"> pixels with 8-bit grayscale) from the ventral nerve cord of some species of fruit flies together with the corresponding 30 binary segmentation masks (white pixels for segmented objects, black for the rest), see gif below. The dataset formed part of the 2D EM segmentation challenge at the ISBI 2012 conference. Although the workshop competition is done, the challenge remains open for new contributions. Further details about the data can be found at the <a href="http://brainiac2.mit.edu/isbi_challenge/">ISBI Challenge website</a>, where also the training and test data can be downloaded (after registration).</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/u_net/img/EM_dataset.gif" title="EM training data" class="img-fluid" alt="EM training data."></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">EM training data. Taken from <a href="http://brainiac2.mit.edu/isbi_challenge/">ISBI Challenge</a>.</td>
</tr>
</tbody>
</table>
<p>The following function can be used to load the training dataset.</p>
<div class="cell" data-execution_count="2">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb1-4"></span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> load_dataset():</span>
<span id="cb1-7">    num_img, img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span></span>
<span id="cb1-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize</span></span>
<span id="cb1-9">    imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(num_img, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, img_size, img_size)</span>
<span id="cb1-10">    labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(num_img, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, img_size, img_size)</span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># fill tensors with data</span></span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_img):</span>
<span id="cb1-13">        cur_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(index) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'.png'</span></span>
<span id="cb1-14"></span>
<span id="cb1-15">        img_frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./Dataset/train/image/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cur_name)</span>
<span id="cb1-16">        label_frame <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./Dataset/train/label/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> cur_name)</span>
<span id="cb1-17"></span>
<span id="cb1-18">        imgs[index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.ToTensor()(img_frame).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.float32)</span>
<span id="cb1-19">        labels[index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.ToTensor()(label_frame).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.float32)</span>
<span id="cb1-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> imgs, labels</span>
<span id="cb1-21"></span>
<span id="cb1-22"></span>
<span id="cb1-23">imgs, labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_dataset()</span></code></pre></div>
</details>
</div>
</section>
<section id="data-augmentation" class="level3">
<h3 class="anchored" data-anchor-id="data-augmentation">Data Augmentation</h3>
<p>Training neural networks on image data typically requires large amounts of data to make the model robust (i.e., avoid overfitting) and accurate (i.e., avoid underfitting). However, data scarcity is a common problem in biomedical segmentation tasks, since labeling is expensive and time consuming. In such cases, <strong>data augmentation</strong> offers a solution by generating additional data (using plausible transformations) to expand the training dataset. In most image segmentation tasks the function to be learned has some transformation-invariance properties (e.g., translating the input should result in a translated output). The data augmentation applied by <a href="https://arxiv.org/abs/1505.04597">Ronneberger et al.&nbsp;(2015)</a> can be divided into four parts:</p>
<ul>
<li><p><strong>Overlap-tile strategy</strong> is used to divide an arbitrary large image into several overlaping parts (each forming an input and label to the training algorithm). Remind that the input to the neural network is greater than the output, in case of the EM dataset the input is even greater than the whole image. Therefore, <a href="https://arxiv.org/abs/1505.04597">Ronneberger et al. (2015)</a> expand the images by mirroring at the sides. The overlap-tile strategy is shown below. Depending on the <code>stride</code> (i.e., how much the next rectangle is shifted to the right), the training dataset is enlarged by a factor greater than 4.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/u_net/img/overlap_tile_self.png" title="Overlap-Tile Strategy" class="img-fluid" alt="Overlap-Tile Strategy"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Overlap-Tile Strategy for seamless segmentation of arbitrary large images. Blue area depicts input to neural network, yellow area corresponds to the prediction area. Missing input is extrapolated by mirroring (white lines). The number of tiles depends on the <code>stride</code> length (here: <code>stride=124</code>). Image created with <code>visualize_overlap_tile_strategy</code> (code presented at the end of this section).</td>
</tr>
</tbody>
</table></li>
<li><p><strong>Affine transformations</strong> are mathematically defined as geometric transformations preserving lines and parallelisms, e.g., scaling, translation, rotation, reflection or any mix of them. <a href="https://arxiv.org/abs/1505.04597">Ronneberger et al.&nbsp;(2015)</a> state that in case of microscopical image data mainly translation and rotation invariance (as affine transformation invariances) are desired properties of the resulting function. Note that the overlap-tile strategy itself leads to some translation invariance.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/u_net/img/affine_transformation_with_grid.png" title="Affine Transformation Visualization" class="img-fluid" alt="Affine Transformation Visualization"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Affine transformation visualization. Left side shows input and label data before transformation is applied. Right side shows the corresponding data after random affine transformation (random rotation and shifting). The grid is artificially added to emphasize that image and label are transformed in the same way. Image created with <code>visualize_data_augmentation</code> (code presented at the end of this section).</td>
</tr>
</tbody>
</table></li>
<li><p><strong>Elastic deformations</strong> are basically distinct affine transformations for each pixel. The term is probably derived from physics in which an elastic deformation describes a temporary change in shape of an elastic material (due to induced force). The transformation result looks similar to the physics phenomenon, see image below. <a href="https://arxiv.org/abs/1505.04597">Ronneberger et al. (2015)</a> noted that elastic deformations seem to be a key concept for successfully training with few samples. A possible reason may be that the model’s generalization capabilities improve more by elastic deformations since the resulting images have more variability than with coherent affine transformations.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/u_net/img/deformation_with_grid2.png" title="Elastic Deformation Visualization" class="img-fluid" alt="Elastic Deformation Visualization"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Elastic deformation visualization. Left side shows input and label data before deformation is applied. Right side shows the corresponding data after deformation. The grid is artificially added to emphasize that image and label are deformed in the same way. Image created with <code>visualize_data_augmentation</code> (code presented at the end of this section).</td>
</tr>
</tbody>
</table>
<p>Implementing elastic deformations basically consists of generating random displacement fields, convolving these with a Gaussian filter for smoothening, scaling the result by a predefined factor to control the intensity and then computing the new pixel values for each displacement vector (using interpolation within the old grid), see Best Practices for CNNs by <a href="https://www.researchgate.net/publication/220860992_Best_Practices_for_Convolutional_Neural_Networks_Applied_to_Visual_Document_Analysis">Simard et al. (2003)</a> for more details. <!-- Note that [Ronneberger et al. --> <!-- (2015)](https://arxiv.org/abs/1505.04597) use a slightly different --> <!-- method to generate elastic deformations by directly sampling from a Gaussian --> <!-- distribution instead of convolving uniform sampled random vectors --> <!-- with a Gaussian. --></p></li>
<li><p><strong>Color variations</strong> or in this case rather <strong>gray value variations</strong> in the input image should make the network invariant to small color changes. This can easily be implemented by adding Gaussian noise (other distributions may also be possible) to the input image, see image below.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/u_net/img/gray_variation.png" title="Gray Value Variation Visualization" class="img-fluid" alt="Gray Value Variation Visualization"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Gray value variation visualization. Left side shows input image before noise is applied. Right side shows the corresponding data after transformation (segmentation mask does not change). Image created with <code>visualize_data_augmentation</code> (code presented at the end of this section).</td>
</tr>
</tbody>
</table></li>
</ul>
<p>The whole data augmentation process is put into a self written Pytorch <code>Dataset</code> class, see code below. Note that while this class includes all described transformations (<em>affine transformation</em>, <em>elastic deformation</em> and <em>gray value variation</em>), in the <code>__get_item__</code> method only <code>elastic_deform</code> is applied to speed up the training process<sup>3</sup>. However, if you want to create a more sophisticated data augmentation process, you can easily add the other transformations in the <code>__get_item__</code> method.</p>
<div class="cell" data-execution_count="3">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dataset</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.ndimage.interpolation <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> map_coordinates</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.signal <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> convolve2d</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> TF</span>
<span id="cb2-6"></span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EM_Dataset(Dataset):</span>
<span id="cb2-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""EM Dataset (from ISBI 2012) to train U-Net on including data</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    augmentation as proposed by Ronneberger et al. (2015)</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        imgs (tensor): torch tensor containing input images [1, 512, 512]</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        labels (tensor): torch tensor containing segmented images [1, 512, 512]</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        stride (int): stride that is used for overlap-tile strategy,</span></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Note: stride must be chosen such that all labels are retrieved</span></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        transformation (bool): transform should be applied (True) or not (False)</span></span>
<span id="cb2-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ------- transformation related -------</span></span>
<span id="cb2-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        probability (float): probability that transformation is applied</span></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        alpha (float): intensity of elastic deformation</span></span>
<span id="cb2-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sigma (float): std dev. of Gaussian kernel, i.e., smoothing parameter</span></span>
<span id="cb2-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        kernel dim (int): kernel size is [kernel_dim, kernel_dim]</span></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-24"></span>
<span id="cb2-25">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, imgs, labels, stride, transformation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb2-26">                 probability<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, kernel_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb2-27">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(stride, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-29">          <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>stride) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>stride</span>
<span id="cb2-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.orig_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> imgs</span>
<span id="cb2-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EM_Dataset._extrapolate_by_mirroring(imgs)</span>
<span id="cb2-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> labels</span>
<span id="cb2-33">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> stride</span>
<span id="cb2-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transformation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transformation</span>
<span id="cb2-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> transformation:</span>
<span id="cb2-36">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> probability <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-37">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.probability <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> probability</span>
<span id="cb2-38">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha</span>
<span id="cb2-39">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EM_Dataset._create_gaussian_kernel(kernel_dim, sigma)</span>
<span id="cb2-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-41"></span>
<span id="cb2-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, index):</span>
<span id="cb2-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""images and labels are divided into several overlaping parts using the</span></span>
<span id="cb2-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        overlap-tile strategy</span></span>
<span id="cb2-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-46">        number_of_tiles_1D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stride))</span>
<span id="cb2-47">        number_of_tiles_2D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> number_of_tiles_1D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-48"></span>
<span id="cb2-49">        img_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>number_of_tiles_2D)</span>
<span id="cb2-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tile indexes of image</span></span>
<span id="cb2-51">        tile_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> number_of_tiles_2D)</span>
<span id="cb2-52">        tile_index_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tile_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> number_of_tiles_1D) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stride</span>
<span id="cb2-53">        tile_index_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(tile_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> number_of_tiles_1D) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stride</span>
<span id="cb2-54"></span>
<span id="cb2-55">        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.imgs[img_index, :,</span>
<span id="cb2-56">                        tile_index_y:tile_index_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">572</span>,</span>
<span id="cb2-57">                        tile_index_x:tile_index_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">572</span>]</span>
<span id="cb2-58">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.labels[img_index, :,</span>
<span id="cb2-59">                            tile_index_y: tile_index_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>,</span>
<span id="cb2-60">                            tile_index_x: tile_index_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>]</span>
<span id="cb2-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.transformation:</span>
<span id="cb2-62">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> np.random.random() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.probability:</span>
<span id="cb2-63">                img, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EM_Dataset.elastic_deform(img, label, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.alpha,</span>
<span id="cb2-64">                                                       <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.kernel)</span>
<span id="cb2-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (img, label)</span>
<span id="cb2-66"></span>
<span id="cb2-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-68">        number_of_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.imgs)</span>
<span id="cb2-69">        number_of_tiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.stride))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> number_of_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> number_of_tiles</span>
<span id="cb2-71"></span>
<span id="cb2-72">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb2-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> gray_value_variations(image, sigma):</span>
<span id="cb2-74">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""applies gray value variations by adding Gaussian noise</span></span>
<span id="cb2-75"></span>
<span id="cb2-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            image (torch tensor): extrapolated image tensor [1, 572, 572]</span></span>
<span id="cb2-78"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            sigma (float): std. dev. of Gaussian distribution</span></span>
<span id="cb2-79"></span>
<span id="cb2-80"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            image (torch tensor): image tensor w. gray value var. [1, 572, 572]</span></span>
<span id="cb2-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-83">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># see https://stats.stackexchange.com/a/383976</span></span>
<span id="cb2-84">        noise <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(image.shape, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> sigma</span>
<span id="cb2-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> noise</span>
<span id="cb2-86"></span>
<span id="cb2-87">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb2-88">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> affine_transform(image, label, angle, translate):</span>
<span id="cb2-89">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""applies random affine translations and rotation on image and label</span></span>
<span id="cb2-90"></span>
<span id="cb2-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            image (torch tensor): extrapolated image tensor [1, 572, 572]</span></span>
<span id="cb2-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            label (torch tensor): label tensor [1, 388, 388]</span></span>
<span id="cb2-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            angle (float): rotation angle</span></span>
<span id="cb2-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            translate (list): entries correspond to horizontal and vertical shift</span></span>
<span id="cb2-96"></span>
<span id="cb2-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            image (torch tensor): transformed image tensor [1, 572, 572]</span></span>
<span id="cb2-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            label (torch tensor): transformed label tensor [1, 388, 388]</span></span>
<span id="cb2-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-101">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transform to PIL</span></span>
<span id="cb2-102">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.ToPILImage()(image[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-103">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.ToPILImage()(label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb2-104">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply affine transformation</span></span>
<span id="cb2-105">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.affine(image, angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>angle, translate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>translate,</span>
<span id="cb2-106">                          scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, shear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-107">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TF.affine(label, angle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>angle, translate<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>translate,</span>
<span id="cb2-108">                          scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, shear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-109">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transform back to tensor</span></span>
<span id="cb2-110">        image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.ToTensor()(np.array(image))</span>
<span id="cb2-111">        label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> transforms.ToTensor()(np.array(label))</span>
<span id="cb2-112">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> image, label</span>
<span id="cb2-113"></span>
<span id="cb2-114">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb2-115">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> elastic_deform(image, label, alpha, gaussian_kernel):</span>
<span id="cb2-116">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""apply smooth elastic deformation on image and label data as</span></span>
<span id="cb2-117"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        described in</span></span>
<span id="cb2-118"></span>
<span id="cb2-119"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        [Simard2003] "Best Practices for Convolutional Neural Networks applied</span></span>
<span id="cb2-120"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        to Visual Document Analysis"</span></span>
<span id="cb2-121"></span>
<span id="cb2-122"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-123"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            image (torch tensor): extrapolated image tensor [1, 572, 572]</span></span>
<span id="cb2-124"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            label (torch tensor): label tensor [1, 388, 388]</span></span>
<span id="cb2-125"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            alpha (float): intensity of transformation</span></span>
<span id="cb2-126"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            gaussian_kernel (np array): gaussian kernel used for smoothing</span></span>
<span id="cb2-127"></span>
<span id="cb2-128"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-129"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            deformed_img (torch tensor): deformed image tensor [1, 572, 572]</span></span>
<span id="cb2-130"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            deformed_label (torch tensor): deformed label tensor [1, 388, 388]</span></span>
<span id="cb2-131"></span>
<span id="cb2-132"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        code is adapted from https://github.com/vsvinayak/mnist-helper</span></span>
<span id="cb2-133"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-134">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate standard coordinate grids</span></span>
<span id="cb2-135">        x_i, y_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">572</span>), np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">572</span>))</span>
<span id="cb2-136">        x_l, y_l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>), np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>))</span>
<span id="cb2-137">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate random displacement fields (uniform distribution [-1, 1])</span></span>
<span id="cb2-138">        dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.random.rand(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>x_i.shape) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-139">        dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.random.rand(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>y_i.shape) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-140">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># smooth by convolving with gaussian kernel</span></span>
<span id="cb2-141">        dx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> convolve2d(dx, gaussian_kernel, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)</span>
<span id="cb2-142">        dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> convolve2d(dy, gaussian_kernel, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'same'</span>)</span>
<span id="cb2-143">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># one dimensional coordinates (neccessary for map_coordinates)</span></span>
<span id="cb2-144">        x_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.reshape(x_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dx, (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-145">        y_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.reshape(y_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dy, (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-146">        x_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.reshape(x_l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dx[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>], (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-147">        y_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.reshape(y_l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dy[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>], (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-148">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># deformation using map_coordinates interpolation (spline not bicubic)</span></span>
<span id="cb2-149">        deformed_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> map_coordinates(image[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [y_img, x_img], order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-150">                                       mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reflect'</span>)</span>
<span id="cb2-151">        deformed_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> map_coordinates(label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], [y_label, x_label], order<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb2-152">                                         mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reflect'</span>)</span>
<span id="cb2-153">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape into desired shape and cast to tensor</span></span>
<span id="cb2-154">        deformed_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.from_numpy(deformed_img.reshape(image.shape))</span>
<span id="cb2-155">        deformed_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.from_numpy(deformed_label.reshape(label.shape))</span>
<span id="cb2-156">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> deformed_img, deformed_label</span>
<span id="cb2-157"></span>
<span id="cb2-158">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb2-159">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _extrapolate_by_mirroring(data):</span>
<span id="cb2-160">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""increase data by mirroring (needed for overlap-tile strategy)</span></span>
<span id="cb2-161"></span>
<span id="cb2-162"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-163"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            data (torch tensor): shape [num_samples, 1, 512, 512]</span></span>
<span id="cb2-164"></span>
<span id="cb2-165"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-166"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            extrapol_data (torch tensor): shape [num_samples, 1, 696, 696]</span></span>
<span id="cb2-167"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-168">        num_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data)</span>
<span id="cb2-169">        extrapol_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros(num_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">696</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">696</span>)</span>
<span id="cb2-170"></span>
<span id="cb2-171">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put data into center of extrapol data</span></span>
<span id="cb2-172">        extrapol_data[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data</span>
<span id="cb2-173">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mirror left</span></span>
<span id="cb2-174">        extrapol_data[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[:,:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>].flip(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-175">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mirror right</span></span>
<span id="cb2-176">        extrapol_data[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>::] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data[:,:,:,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>::].flip(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb2-177">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mirror top</span></span>
<span id="cb2-178">        extrapol_data[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extrapol_data[:,:,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>,:].flip(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-179">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mirror buttom</span></span>
<span id="cb2-180">        extrapol_data[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>::,:] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extrapol_data[:,:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>,:].flip(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-181">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> extrapol_data</span>
<span id="cb2-182"></span>
<span id="cb2-183">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb2-184">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _create_gaussian_kernel(kernel_dim, sigma):</span>
<span id="cb2-185">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""returns a 2D Gaussian kernel with the standard deviation</span></span>
<span id="cb2-186"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        denoted by sigma</span></span>
<span id="cb2-187"></span>
<span id="cb2-188"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-189"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            kernel_dim (int): kernel size will be [kernel_dim, kernel_dim]</span></span>
<span id="cb2-190"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            sigma (float): std dev of Gaussian (smoothing parameter)</span></span>
<span id="cb2-191"></span>
<span id="cb2-192"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-193"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            gaussian_kernel (numpy array): centered gaussian kernel</span></span>
<span id="cb2-194"></span>
<span id="cb2-195"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        code is adapted from https://github.com/vsvinayak/mnist-helper</span></span>
<span id="cb2-196"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-197">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># check if the dimension is odd</span></span>
<span id="cb2-198">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> kernel_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb2-199">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Kernel dimension should be odd"</span>)</span>
<span id="cb2-200">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize the kernel</span></span>
<span id="cb2-201">        kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((kernel_dim, kernel_dim), dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float16)</span>
<span id="cb2-202">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the center point</span></span>
<span id="cb2-203">        center <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kernel_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-204">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the variance</span></span>
<span id="cb2-205">        variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-206">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate the normalization coefficeint</span></span>
<span id="cb2-207">        coeff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> variance)</span>
<span id="cb2-208">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create the kernel</span></span>
<span id="cb2-209">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, kernel_dim):</span>
<span id="cb2-210">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, kernel_dim):</span>
<span id="cb2-211">                x_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> center)</span>
<span id="cb2-212">                y_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> center)</span>
<span id="cb2-213">                numerator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-214">                denom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>variance</span>
<span id="cb2-215"></span>
<span id="cb2-216">                kernel[x,y] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coeff <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> numerator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>denom)</span>
<span id="cb2-217">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalise it</span></span>
<span id="cb2-218">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> kernel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(kernel))</span>
<span id="cb2-219"></span>
<span id="cb2-220"></span>
<span id="cb2-221"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate datasets</span></span>
<span id="cb2-222">stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124</span></span>
<span id="cb2-223">whole_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EM_Dataset(imgs, labels, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>stride,</span>
<span id="cb2-224">                           transformation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, probability<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb2-225">                           sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, kernel_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span></code></pre></div>
</details>
</div>
<p>The visualization functions used to generate the images in this section are provided below:</p>
<div class="cell" data-execution_count="4">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb3-2"></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> visualize_overlap_tile_strategy(dataset, img_index, tile_indexes):</span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute tiling data</span></span>
<span id="cb3-6">    number_of_tiles_1D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dataset.stride))</span>
<span id="cb3-7">    number_of_tiles_2D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> number_of_tiles_1D<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># original image [1, 512, 512]</span></span>
<span id="cb3-9">    orig_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.orig_imgs[img_index]</span>
<span id="cb3-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extrapolated image [1, 696, 696]</span></span>
<span id="cb3-11">    extrapol_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.imgs[img_index]</span>
<span id="cb3-12"></span>
<span id="cb3-13"></span>
<span id="cb3-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start plotting</span></span>
<span id="cb3-15">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>))</span>
<span id="cb3-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># original image</span></span>
<span id="cb3-17">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tile_indexes) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-18">    plt.imshow(transforms.ToPILImage()(orig_img), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb3-19">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Original Image'</span>)</span>
<span id="cb3-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extrapolated image with bounding boxes and mirror lines for tile_indexes</span></span>
<span id="cb3-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, tile_index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(tile_indexes):</span>
<span id="cb3-22">        plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(tile_indexes) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> index)</span>
<span id="cb3-23">        plt.imshow(transforms.ToPILImage()(extrapol_img), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb3-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate tile index x and y</span></span>
<span id="cb3-25">        tile_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (tile_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> number_of_tiles_1D) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dataset.stride</span>
<span id="cb3-26">        tile_iy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(tile_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> number_of_tiles_1D) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dataset.stride</span>
<span id="cb3-27">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add focus of current input tile</span></span>
<span id="cb3-28">        plt.plot([tile_ix, tile_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">572</span>, tile_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">572</span>, tile_ix, tile_ix],</span>
<span id="cb3-29">                 [tile_iy, tile_iy, tile_iy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">572</span>, tile_iy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">572</span>, tile_iy],</span>
<span id="cb3-30">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add focus of current segmentation mask</span></span>
<span id="cb3-32">        tile_ix, tile_iy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tile_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, tile_iy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span></span>
<span id="cb3-33">        plt.plot([tile_ix, tile_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>, tile_ix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>, tile_ix, tile_ix],</span>
<span id="cb3-34">                 [tile_iy, tile_iy, tile_iy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>, tile_iy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>, tile_iy],</span>
<span id="cb3-35">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yellow'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># add mirror lines</span></span>
<span id="cb3-37">        plt.vlines([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">604</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">696</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-38">        plt.hlines([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">604</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">696</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-39">        plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Extrapolated Image, Tile '</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(tile_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-40">                  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(number_of_tiles_2D))</span>
<span id="cb3-41">        plt.xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">696</span>)</span>
<span id="cb3-42">        plt.ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">696</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb3-44"></span>
<span id="cb3-45"></span>
<span id="cb3-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> visualize_data_augmentation(dataset, index, show_grid, kind):</span>
<span id="cb3-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get untransformed img, label</span></span>
<span id="cb3-48">    dataset.transformation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-49">    img, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[index]</span>
<span id="cb3-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># copy image (since it may be modified)</span></span>
<span id="cb3-51">    cur_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img.clone().numpy()</span>
<span id="cb3-52">    cur_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label.clone().numpy()</span>
<span id="cb3-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> show_grid:</span>
<span id="cb3-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modify image to include outer grid (outside of label)</span></span>
<span id="cb3-55">        cur_img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span>
<span id="cb3-56">        cur_img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span>
<span id="cb3-57">        cur_img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">91</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span>
<span id="cb3-58">        cur_img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.0</span></span>
<span id="cb3-59">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modify image to include label grid</span></span>
<span id="cb3-60">        cur_img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-61">        cur_img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># modify label to include label grid</span></span>
<span id="cb3-63">        cur_label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, ::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-64">        cur_label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, :, ::<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb3-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> kind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elastic deformation'</span>:</span>
<span id="cb3-66">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set transformation</span></span>
<span id="cb3-67">        kernel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.kernel</span>
<span id="cb3-68">        alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.alpha</span>
<span id="cb3-69">        new_img, new_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EM_Dataset.elastic_deform(cur_img, cur_label,</span>
<span id="cb3-70">                                                       alpha, kernel)</span>
<span id="cb3-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> kind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'affine transformation'</span>:</span>
<span id="cb3-72">        angle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-73">        translate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(np.random.randint(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb3-74">        new_img, new_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EM_Dataset.affine_transform(cur_img, cur_label,</span>
<span id="cb3-75">                                                         angle, translate)</span>
<span id="cb3-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> kind <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray value variation'</span>:</span>
<span id="cb3-77">        sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span></span>
<span id="cb3-78">        new_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EM_Dataset.gray_value_variations(img, sigma)</span>
<span id="cb3-79">        new_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label</span>
<span id="cb3-80">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-81">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NameError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Unknown `kind`, can only be `elastic deformation`, '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb3-82">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'`affine transformation` or `gray value variation`'</span>)</span>
<span id="cb3-83">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start plotting</span></span>
<span id="cb3-84">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb3-85">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-86">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Before '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kind)</span>
<span id="cb3-87">    plt.imshow(cur_img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>,</span>
<span id="cb3-88">               interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gaussian'</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-89">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># focus of current segmentation mask</span></span>
<span id="cb3-90">    plt.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>],</span>
<span id="cb3-91">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yellow'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-92">    plt.subplots_adjust(hspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb3-93">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-94">    plt.imshow(cur_label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>,</span>
<span id="cb3-95">               interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gaussian'</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-96">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-97">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'After '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> kind)</span>
<span id="cb3-98">    plt.imshow(new_img[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>,</span>
<span id="cb3-99">               interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gaussian'</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-100">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># focus of current segmentation mask</span></span>
<span id="cb3-101">    plt.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>],</span>
<span id="cb3-102">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yellow'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-103">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb3-104">    plt.imshow(new_label[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>,</span>
<span id="cb3-105">               interpolation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gaussian'</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-106">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb3-107"></span>
<span id="cb3-108"></span>
<span id="cb3-109"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate images in order of appearance</span></span>
<span id="cb3-110">visualize_overlap_tile_strategy(whole_dataset, img_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb3-111">                                tile_indexes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb3-112">visualize_data_augmentation(whole_dataset, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, show_grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-113">                            kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'affine transformation'</span>)</span>
<span id="cb3-114">visualize_data_augmentation(whole_dataset, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, show_grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb3-115">                            kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'elastic deformation'</span>)</span>
<span id="cb3-116">visualize_data_augmentation(whole_dataset, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, show_grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb3-117">                            kind<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray value variation'</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="model-implementation" class="level3">
<h3 class="anchored" data-anchor-id="model-implementation">Model Implementation</h3>
<p>Model implementation can be divided into three tasks:</p>
<ul>
<li><p><strong>Network Architecture</strong>: The model architecture is given in the <a href="https://borea17.github.io/paper_summaries/u_net#model-description">model description</a> in which one can identify several blocks of two <img src="https://latex.codecogs.com/png.latex?3%20%5Ctimes%203"> convolutional layers each followed by a ReLU non-linearity (called <code>_block</code> in the implementation). Note that the output of the last prediction layer can be understood as the unnormalized prediction for each class, i.e., <img src="https://latex.codecogs.com/png.latex?a_%7Bi,j%7D%5E%7B(k)%7D%20%5Cin%20%5D%20-%5Cinfty,%20+%5Cinfty%5B"> where <img src="https://latex.codecogs.com/png.latex?a%5E%7B(k)%7D"> denotes the activation in feature channel <img src="https://latex.codecogs.com/png.latex?k%20%5Cin%20%5C%7B1,%202%5C%7D"> (one channel for each class) and the indices <img src="https://latex.codecogs.com/png.latex?%7Bi,j%7D"> describe the pixel position. In order to get normalized probabilities for each pixel <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bp%7D_%7Bi,j%7D%5E%7B(k)%7D">, a pixel-wise softmax is applied at the end (last operation in <code>forward</code>), i.e., after this operation the sum of the two output channels equals one for each pixel <img src="https://latex.codecogs.com/png.latex?%5Chat%7Bp%7D_%7Bi,j%7D%5E%7B(1)%7D%20+%20%5Chat%7Bp%7D_%7Bi,j%7D%5E%7B(2)%7D%20=%201">.</p>
<div class="cell" data-execution_count="5">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nn</span>
<span id="cb4-2"></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Unet(nn.Module):</span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""original U-Net architecture proposed by Ronneberger et al. (2015)</span></span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        encoder_blocks (list):  four u_net blocks of encoder path</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bottleneck_bock: block that mediates between encoder and decoder</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        decoder_blocks (list):  four u_net blocks of decoder path</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        cropped_img_size (list): cropped images size in order of encoder blocks</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        up_convs (list): upsampling (transposed convolutional) layers (decoder)</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        max_pool: max pool operation used in encoder path</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-15"></span>
<span id="cb4-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.ModuleList([</span>
<span id="cb4-19">            Unet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>),</span>
<span id="cb4-20">            Unet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>),</span>
<span id="cb4-21">            Unet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>),</span>
<span id="cb4-22">            Unet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>)</span>
<span id="cb4-23">        ])</span>
<span id="cb4-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bottleneck_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Unet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>)</span>
<span id="cb4-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder_blocks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.ModuleList([</span>
<span id="cb4-26">            Unet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>),</span>
<span id="cb4-27">            Unet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>),</span>
<span id="cb4-28">            Unet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>),</span>
<span id="cb4-29">            Unet._block(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>)</span>
<span id="cb4-30">        ])</span>
<span id="cb4-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cropped_img_sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">392</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">104</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">56</span>]</span>
<span id="cb4-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.up_convs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.ModuleList([</span>
<span id="cb4-33">            nn.ConvTranspose2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb4-34">            nn.ConvTranspose2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb4-35">            nn.ConvTranspose2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb4-36">            nn.ConvTranspose2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),</span>
<span id="cb4-37">        ])</span>
<span id="cb4-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_pool <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.MaxPool2d(kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb4-39">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-40">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb4-41"></span>
<span id="cb4-42">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb4-43">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># go through encoder path and store cropped images</span></span>
<span id="cb4-44">        cropped_imgs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, encoder_block <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder_blocks):</span>
<span id="cb4-46">            out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_block(x)</span>
<span id="cb4-47">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># center crop and add to cropped image list</span></span>
<span id="cb4-48">            cropped_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Unet._center_crop(out, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.cropped_img_sizes[index])</span>
<span id="cb4-49">            cropped_imgs.append(cropped_img)</span>
<span id="cb4-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max pool output of encoder block</span></span>
<span id="cb4-51">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_pool(out)</span>
<span id="cb4-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bottleneck block (no max pool)</span></span>
<span id="cb4-53">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.bottleneck_block(x)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># [batch_size, 1024, 28, 28]</span></span>
<span id="cb4-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># go through decoder path with stored cropped images</span></span>
<span id="cb4-55">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, decoder_block <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder_blocks):</span>
<span id="cb4-56">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.up_convs[index](x)</span>
<span id="cb4-57">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate x and cropped img along channel dimension</span></span>
<span id="cb4-58">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((cropped_imgs[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>index], x), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-59">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># feed through decoder_block</span></span>
<span id="cb4-60">            x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decoder_block(x)</span>
<span id="cb4-61">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># feed through prediction layer [batch_size, 2, 388, 388]</span></span>
<span id="cb4-62">        x_pred_unnormalized <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.prediction(x)</span>
<span id="cb4-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalize prediction for each pixel</span></span>
<span id="cb4-64">        x_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.softmax(x_pred_unnormalized, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_pred</span>
<span id="cb4-66"></span>
<span id="cb4-67">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-68">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _center_crop(x, new_size):</span>
<span id="cb4-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""center croping of a square input tensor</span></span>
<span id="cb4-70"></span>
<span id="cb4-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb4-72"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x: input tensor shape [batch_size, channels, resolution, resolution]</span></span>
<span id="cb4-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            new_size: the desired output resolution (taking center of input)</span></span>
<span id="cb4-74"></span>
<span id="cb4-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb4-76"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            x_cropped: tensor shape [batch_size, channels, new_size, new_size]</span></span>
<span id="cb4-77"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-78">        img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape[<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb4-79">        i_start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> new_size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-80">        i_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> new_size)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb4-81">        x_cropped <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x[:, :, i_start:i_end, i_start:i_end]</span>
<span id="cb4-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_cropped</span>
<span id="cb4-83"></span>
<span id="cb4-84">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@staticmethod</span></span>
<span id="cb4-85">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _block(in_channels, out_channels):</span>
<span id="cb4-86">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""block for use in U-Net architecture,</span></span>
<span id="cb4-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        consists of two conv 3x3, ReLU layers</span></span>
<span id="cb4-88"></span>
<span id="cb4-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb4-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            in_channels: number of input channels for first convolution</span></span>
<span id="cb4-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            out_channels: number of output channels for both convolutions</span></span>
<span id="cb4-92"></span>
<span id="cb4-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb4-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            u_net_block: Sequential U net block</span></span>
<span id="cb4-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-96">        conv1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(in_channels, out_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-97">        conv2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Conv2d(out_channels, out_channels, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-98"></span>
<span id="cb4-99">        N_1, N_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>in_channels, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>out_channels</span>
<span id="cb4-100">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize by drawing weights from Gaussian distribution</span></span>
<span id="cb4-101">        conv1.weight.data.normal_(mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>N_1))</span>
<span id="cb4-102">        conv2.weight.data.normal_(mean<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, std<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>N_2))</span>
<span id="cb4-103">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define u_net_block</span></span>
<span id="cb4-104">        u_net_block <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb4-105">            conv1,</span>
<span id="cb4-106">            nn.ReLU(),</span>
<span id="cb4-107">            conv2,</span>
<span id="cb4-108">            nn.ReLU()</span>
<span id="cb4-109">        )</span>
<span id="cb4-110">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> u_net_block</span></code></pre></div>
</details>
</div></li>
<li><p><strong>Loss Function</strong>: Since the segmentation labels are clearly imbalanced (much more white pixels than black pixels), <a href="https://arxiv.org/abs/1505.04597">Ronneberger et al. (2015)</a> use the weighted cross entropy as the loss function (which they term <em>energy function</em>)</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%20J%20(%5Ctextbf%7Bx%7D,%20%5Ctextbf%7Bm%7D)%20&amp;=%20-%5Csum_%7Bi=1%7D%5E%7B388%7D%5Csum_%7Bj=1%7D%5E%7B388%7D%0A%20%20%20%5Csum_%7Bk=1%7D%5E2%20w_%7Bi,j%7D%20(%5Ctextbf%7Bm%7D)%20%5Ccdot%0A%20%20%20p_%7Bi,j%7D%5E%7B(k)%7D%20%5Clog%20%5Cleft(%20%5Cwidehat%7Bp%7D_%7Bi,j%7D%5E%7B(k)%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D;%0A%5Cboldsymbol%7B%5Ctheta%7D%20%5Cright)%20%20%5Cright)%20%5C%5C%0A%20%20%20&amp;%5Ctext%7Bwith%7D%20%5Cquad%20p_%7Bi,j%7D%5E%7B(1)%7D%20=%20%5Cbegin%7Bcases%7D%201%20&amp;%20%5Ctext%7Bif%20%7D%0Am_%7Bi,j%7D=1%20%5C%5C%200%20&amp;%5Ctext%7Belse%7D%20%5Cend%7Bcases%7D%20%5Cquad%20%5Ctext%7Band%7D%20%5Cquad%20p_%7Bi,j%7D%5E%7B(2)%7D%20=%0A%5Cbegin%7Bcases%7D%201%20&amp;%20%5Ctext%7Bif%20%7D%20m_%7Bi,%20j%7D%20=%200%20%5C%5C0%20&amp;%20%5Ctext%7Belse%7D,%20%5Cend%7Bcases%7D%0A%5Cend%7Balign%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5Cin%20%5B0,%201%5D%5E%7B572%5Ctimes%20572%7D"> denotes the input image, <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D%20%5Cin%20%5C%7B0,%201%5C%7D%5E%7B388%20%5Ctimes%20388%7D"> the corresponding segmentation mask, <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bp%7D%5E%7B(k)%7D%5Cin%20%5C%7B0,%201%5C%7D%5E%7B388%20%5Ctimes%20388%7D"> the groundtruth probability for each class <img src="https://latex.codecogs.com/png.latex?k">, <img src="https://latex.codecogs.com/png.latex?%5Cwidehat%7B%5Ctextbf%7Bp%7D%7D%5E%7B(k)%7D%20%5Cin%20%5B0,%201%5D%5E%7B388%5Ctimes%20388%7D"> denotes the <img src="https://latex.codecogs.com/png.latex?k">-th channel output of the network parameterized by <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bw%7D%20%5Cleft(%20%5Ctextbf%7Bm%7D%20%5Cright)%20%5Cin%20%5Cmathbb%7BR%7D%5E%7B388%20%5Ctimes%20388%7D"> is a introduced weight map (computed via the segmentation mask <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bm%7D">) to give some pixels more importance during training. Accordingly, the loss function can be interpreted as penalizing the deviation from 1 for each true class output pixel weighted by the corresponding entry of the weight map.</p>
<p><strong>Weight Map</strong>: To compensate for the imbalance between separation borders and segmented object<sup>4</sup>, <a href="https://arxiv.org/abs/1505.04597">Ronneberger et al. (2015)</a> introduce the following weight map</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20w(%5Ctextbf%7Bm%7D)%20=%20%7Bw_c%20(%5Ctextbf%7Bm%7D)%7D%20+%20%7Bw_0%20%5Ccdot%20%5Cexp%20%5Cleft(%20-%20%5Cfrac%0A%20%20%7B%5Cleft(d_1%20(%5Ctextbf%7Bm%7D)%20-%20d_2%20(%5Ctextbf%7Bm%7D)%5Cright)%5E2%7D%7B2%5Csigma%5E2%7D%5Cright)%7D,%0A"></p>
<p>where the first term reweights each pixel of the minority class (i.e., black pixels) to balance the class frequencies. In the second term <img src="https://latex.codecogs.com/png.latex?d_1"> and <img src="https://latex.codecogs.com/png.latex?d_2"> denote the distance to the border of the nearest and second nearest cell, respectively. <img src="https://latex.codecogs.com/png.latex?w_0"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> are predefined hyperparameters. Thus, the second term can be understood as putting additional weight to smaller borders, see code and image below.</p>
<div class="cell" data-execution_count="6">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> mpl_toolkits.axes_grid1 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_axes_locatable</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> measure</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.ndimage.morphology <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> distance_transform_edt</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> skimage.segmentation <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> find_boundaries</span>
<span id="cb5-5"></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> compute_weight_map(label_mask, w_0, sigma, plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb5-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""compute weight map for each ground truth segmentation to compensate</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    for the different class frequencies and to put additional</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    emphasis on small borders as proposed by Ronneberger et al.</span></span>
<span id="cb5-11"></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        label mask (torch tensor): true segmentation masks [batch_size, 1, 388, 388]</span></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        w_0 (float): hyperparameter in second term of weight map</span></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        sigma (float): hyperparameter in second term of weight map</span></span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        weight_map (torch tensor): computed weight map [batch_size, 1, 388, 388]</span></span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    researchgate.net/post/creating_a_weight_map_from_a_binary_image_U-net_paper</span></span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb5-22">    batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_mask.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-23">    weight_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.zeros_like(label_mask)</span>
<span id="cb5-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(batch_size):</span>
<span id="cb5-25">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute w_c to balance class frequencies</span></span>
<span id="cb5-26">        w_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_mask[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].clone()</span>
<span id="cb5-27">        class_freq_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (label_mask[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb5-28">        class_freq_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (label_mask[i]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().item()</span>
<span id="cb5-29">        w_c[label_mask[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_freq_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> class_freq_0</span>
<span id="cb5-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute d_1, d_2, i.e., euclid. dist. to border of (1st/2nd) closest cell</span></span>
<span id="cb5-31">        d_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(label_mask[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape)</span>
<span id="cb5-32">        d_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros(label_mask[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].shape)</span>
<span id="cb5-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># distinguish all cells (connected components of ones)</span></span>
<span id="cb5-34">        all_cells <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> measure.label(label_mask[i][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], background<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, connectivity<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-35">        num_cells <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(all_cells)</span>
<span id="cb5-36">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize distances for all cells</span></span>
<span id="cb5-37">        dists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros([num_cells, d_2.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], d_2.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb5-38">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># iterate over all zero components</span></span>
<span id="cb5-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index, i_cell <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_cells <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)):</span>
<span id="cb5-40">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cell segmentation (segmented cell 1, rest 0)</span></span>
<span id="cb5-41">            cell_segmentation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_cells<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span>i_cell</span>
<span id="cb5-42">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># find boundary (boundary 1, rest 0)</span></span>
<span id="cb5-43">            boundary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> find_boundaries(cell_segmentation, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inner'</span>)</span>
<span id="cb5-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute distance to boundary (set boundary 0, rest -1)</span></span>
<span id="cb5-45">            bound_dists <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> distance_transform_edt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> boundary)</span>
<span id="cb5-46">            dists[index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bound_dists</span>
<span id="cb5-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sort dists along first axis (each pixel)</span></span>
<span id="cb5-48">        dists.sort(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-49">        d_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dists[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-50">        d_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dists[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb5-51">        w <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w_c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.exp(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (d_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d_2)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb5-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save w to weight map</span></span>
<span id="cb5-53">        weight_map[i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> w</span>
<span id="cb5-54"></span>
<span id="cb5-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># visualize weight map</span></span>
<span id="cb5-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> plot <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb5-57">            fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>))</span>
<span id="cb5-58"></span>
<span id="cb5-59">            ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb5-60">            plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Segmenation Mask'</span>)</span>
<span id="cb5-61">            plt.imshow(label_mask[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb5-62">            divider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_axes_locatable(ax)</span>
<span id="cb5-63">            cax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> divider.append_axes(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5%"</span>, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb5-64">            plt.colorbar(cax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cax)</span>
<span id="cb5-65"></span>
<span id="cb5-66">            ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-67">            plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w_c'</span>)</span>
<span id="cb5-68">            plt.imshow(w_c, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jet'</span>)</span>
<span id="cb5-69">            divider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_axes_locatable(ax)</span>
<span id="cb5-70">            cax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> divider.append_axes(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5%"</span>, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb5-71">            plt.colorbar(cax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cax)</span>
<span id="cb5-72"></span>
<span id="cb5-73"></span>
<span id="cb5-74">            ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb5-75">            plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>)</span>
<span id="cb5-76">            plt.imshow(w, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'jet'</span>)</span>
<span id="cb5-77">            divider <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_axes_locatable(ax)</span>
<span id="cb5-78">            cax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> divider.append_axes(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5%"</span>, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb5-79">            plt.colorbar(cax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cax)</span>
<span id="cb5-80">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> weight_map</span>
<span id="cb5-81"></span>
<span id="cb5-82"></span>
<span id="cb5-83">img, label_mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> whole_dataset[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-84">weight_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_weight_map(label_mask.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), w_0<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, plot<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
</details>
</div>
<img src="https://borea17.github.io/paper_summaries/u_net/img/weight_map.png" title="compute_weight_map" class="img-fluid" alt="compute_weight_map"></li>
</ul>
<ul>
<li><p><strong>Training Procedure</strong>: A simple <code>SGD</code> (<em>Stochastic Gradient Descent</em>) optimizer with a high momentum (0.99) and a <code>batch_size</code> of 1 are choosen for training as proposed by <a href="https://arxiv.org/abs/1505.04597">Ronneberger et al. (2015)</a>, see code below. Note that we take the mean instead of the sum in the loss function calculation to avoid overflow (i.e., nans). This will only change the strength of a gradient step (which can be adjusted by the learning rate), but not its direction.</p>
<div class="cell" data-execution_count="7">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> livelossplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PlotLosses</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb6-3"></span>
<span id="cb6-4"></span>
<span id="cb6-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train(u_net, dataset, epochs):</span>
<span id="cb6-6">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb6-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># hyperparameters weight map</span></span>
<span id="cb6-8">    w_0, sigma <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb6-9"></span>
<span id="cb6-10">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(device))</span>
<span id="cb6-11"></span>
<span id="cb6-12">    data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-13"></span>
<span id="cb6-14">    u_net.to(device)</span>
<span id="cb6-15">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.SGD(u_net.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.001</span>, momentum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.99</span>)</span>
<span id="cb6-16"></span>
<span id="cb6-17">    losses_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotLosses()</span>
<span id="cb6-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs):</span>
<span id="cb6-19">        avg_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, (imgs, label_masks) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(data_loader):</span>
<span id="cb6-21">            u_net.zero_grad()</span>
<span id="cb6-22">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># retrieve predictions of u_net [batch, 2, 388, 388]</span></span>
<span id="cb6-23">            pred_masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> u_net(imgs.to(device))</span>
<span id="cb6-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute weight map</span></span>
<span id="cb6-25">            weight_map <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> compute_weight_map(label_masks, w_0, sigma).to(device)</span>
<span id="cb6-26">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put label_masks to device</span></span>
<span id="cb6-27">            label_masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_masks.to(device)</span>
<span id="cb6-28">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute weighted binary cross entropy loss</span></span>
<span id="cb6-29">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(weight_map<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb6-30">                    (pred_masks[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].log() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> label_masks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-31">                      pred_masks[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>].log() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> label_masks))</span>
<span id="cb6-32">                    ).mean()</span>
<span id="cb6-33">            loss.backward()</span>
<span id="cb6-34">            optimizer.step()</span>
<span id="cb6-35"></span>
<span id="cb6-36">            avg_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)</span>
<span id="cb6-37"></span>
<span id="cb6-38">            losses_plot.update({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'current weighted loss'</span>: loss.item()},</span>
<span id="cb6-39">                              current_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader))</span>
<span id="cb6-40">            losses_plot.draw()</span>
<span id="cb6-41">        losses_plot.update({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg weighted loss'</span>: avg_loss},</span>
<span id="cb6-42">                          current_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>epoch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-43">        losses_plot.draw()</span>
<span id="cb6-44">    trained_u_net <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> u_net</span>
<span id="cb6-45">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> trained_u_net</span></code></pre></div>
</details>
</div>
<p><strong>Beware</strong>: Training for 30 epochs (i.e., the code below) takes about 2 hours with a NVIDIA Tesla K80 as GPU. The loss plot (see below <code>avg weighted loss</code>) indicates that training for more epochs might improve the model even more<sup>5</sup>. For people who are interested in using the model without waiting for 2 hours, I stored a trained version on <a href="https://nextjournal.com/borea17/u-net">nextjournal</a>.</p>
<div class="cell" data-execution_count="8">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">u_net <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Unet()</span>
<span id="cb7-2">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># all image indexes</span></span>
<span id="cb7-4">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random inplace shuffling of indexes</span></span>
<span id="cb7-6">np.random.seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-7">np.random.shuffle(idx)</span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># split data into training and test data</span></span>
<span id="cb7-9">train_imgs, train_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> imgs[idx[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>]], labels[idx[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>]]</span>
<span id="cb7-10">test_imgs, test_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> imgs[idx[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>:]], labels[idx[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>:]]</span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate datasets</span></span>
<span id="cb7-12">stride <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">124</span></span>
<span id="cb7-13">train_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EM_Dataset(train_imgs, train_labels, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>stride,</span>
<span id="cb7-14">                          transformation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, probability<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,</span>
<span id="cb7-15">                          sigma<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, kernel_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)</span>
<span id="cb7-16">test_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> EM_Dataset(test_imgs, test_labels, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>stride,</span>
<span id="cb7-17">                          transformation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb7-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start training procedure</span></span>
<span id="cb7-19">trained_u_net <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(u_net, train_dataset, epochs)</span></code></pre></div>
</details>
</div>
<img src="https://borea17.github.io/paper_summaries/u_net/img/loss_plot.png" title="train plot" class="img-fluid" alt="train result"></li>
</ul>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>Let’s look at some image segmentations generated by the trained model on the unseen test set:</p>
<div class="cell" data-execution_count="9">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> visualize_results(trained_u_net, test_dataset, num_test_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb8-2">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb8-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take random tile from each test image</span></span>
<span id="cb8-4">    num_tiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">512</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">388</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>test_dataset.stride))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-5">    num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_dataset) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_tiles)</span>
<span id="cb8-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> num_test_images:</span>
<span id="cb8-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># number of images &lt; number of images in test set</span></span>
<span id="cb8-8">        num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(num_test_images, num_images)</span>
<span id="cb8-9">    random_tile_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_tiles), num_images,</span>
<span id="cb8-10">                                       replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-11"></span>
<span id="cb8-12">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(num_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb8-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># annotation plots</span></span>
<span id="cb8-14">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-15">    ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cell image</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">(input)'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb8-16">                 fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb8-17">    ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb8-18">    ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-19">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-20">    ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true segmentation</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">(label)'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb8-21">                xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb8-22">    ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb8-23">    ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-24">    ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-25">    ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'U-net prediction'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb8-26">                 fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb8-27">    ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb8-28">    ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb8-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># image, label, predicted label plots</span></span>
<span id="cb8-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> index <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_images):</span>
<span id="cb8-31">        img, label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_dataset[index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_tiles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> random_tile_idx[index]]</span>
<span id="cb8-32">        label_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> u_net(img.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device)).squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb8-33"></span>
<span id="cb8-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot original image</span></span>
<span id="cb8-35">        plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-36">        plt.imshow(transforms.ToPILImage()(img), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb8-37">        plt.plot([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">480</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">92</span>],</span>
<span id="cb8-38">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yellow'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-39">        plt.xticks([])</span>
<span id="cb8-40">        plt.yticks([])</span>
<span id="cb8-41">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot original segmentation mask</span></span>
<span id="cb8-42">        plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb8-43">        plt.imshow(transforms.ToPILImage()(label), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb8-44">        plt.xticks([])</span>
<span id="cb8-45">        plt.yticks([])</span>
<span id="cb8-46">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot prediction segmentation mask</span></span>
<span id="cb8-47">        plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-48">        plt.imshow(label_pred.detach().cpu().numpy(), cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray'</span>)</span>
<span id="cb8-49">        plt.xticks([])</span>
<span id="cb8-50">        plt.yticks([])</span>
<span id="cb8-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb8-52"></span>
<span id="cb8-53"></span>
<span id="cb8-54">visualize_results(trained_u_net, test_dataset, num_test_images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</details>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://borea17.github.io/paper_summaries/u_net/img/u_net_prediction.png" title="visualize results" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">visualize results</figcaption>
</figure>
</div>
<p>The predictions are pretty decent, though far from perfect. Bear in mind, that our model had only 25 example images to learn from and that training for more epochs might have led to even better predictions.</p>
<hr>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A greater input image than output segmentation size makes sense since the network has no information about the surrounding of the input image.↩︎</p></li>
<li id="fn2"><p>Actually, CNNs should put more emphasis on the <code>where</code> or rather the local relation between context information, see <a href="https://www.reddit.com/r/MachineLearning/comments/2lmo0l/ama_geoffrey_hinton/clyj4jv/">Geoffrey Hinton’s comment about pooling</a>.↩︎</p></li>
<li id="fn3"><p>The implementation intends to be easily understandable, while keeping the computational resources low. Thus, it is not aimed to generate the best training results or model performance.↩︎</p></li>
<li id="fn4"><p>Since the separation borders are much smaller than the segmented objects, the network could be trapped into merging touching objects without being penalized enough.↩︎</p></li>
<li id="fn5"><p>The implementation intends to be easily understandable, while keeping the computational resources low. Thus, it is not aimed to generate the best training results or model performance.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>reimplementation</category>
  <category>CNN</category>
  <category>segmentation</category>
  <guid>https://borea17.github.io/paper_summaries/u_net/index.html</guid>
  <pubDate>Thu, 20 Aug 2020 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Spatial Broadcast Decoder: A Simple Architecture for Learning Disentangled Representations in VAEs</title>
  <dc:creator>borea17 </dc:creator>
  <link>https://borea17.github.io/paper_summaries/spatial_broadcast_decoder/index.html</link>
  <description><![CDATA[ 





<style>

th {
  border: 10px solid #bfbfbf;
  text-align: center;
}

table th {
  background-color: blue;
}
</style>
<p><a href="https://arxiv.org/abs/1901.07017">Watters et al.&nbsp;(2019)</a> introduce the <em>Spatial Broadcast Decoder (SBD)</em> as an architecture for the decoder in Variational Auto-Encoders <a href="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes">(VAEs)</a> to improve disentanglement in the latent space<sup>1</sup>, reconstruction accuracy and generalization in limited datasets (i.e., held-out regions in data space). Motivated by the limitations of deconvolutional layers in traditional decoders, these upsampling layers are replaced by a tiling operation in the Spatial Broadcast decoder. Furthermore, explicit spatial information (inductive bias) is appended in the form of coordinate channels leading to a simplified optimization problem and improved positional generalization. As a proof of concept, they tested the model on the colored sprites dataset (known factors of variation such as position, size, shape), Chairs and 3D Object-in-Room datasets (no positional variation), a dataset with small objects and a dataset with dependent factors. They could show that the Spatial Broadcast decoder can be used complementary or as an improvement to state-of-the-art disentangling techniques.</p>
<section id="model-description" class="level2">
<h2 class="anchored" data-anchor-id="model-description">Model Description</h2>
<p>As stated in the title, the model architecture of the Spatial Broadcast decoder is very simple: Take a standard VAE decoder and replace all upsampling deconvolutional layers by tiling the latent code <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D"> across the original image space, appending fixed coordinate channels and applying an convolutional network with <img src="https://latex.codecogs.com/png.latex?1%20%5Ctimes%201"> stride, see the figure below.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/spatial_broadcast_decoder/img/sbd.png" title="Schematic of the Spatial Broadcast VAE" class="img-fluid" alt="Schematic of the Spatial Broadcast VAE"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Schematic of the Spatial Broadcast VAE. In the decoder, the latent code <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5Cin%5Cmathbb%7BR%7D%5E%7Bk%7D"> is broadcasted (<em>tiled</em>) to the image width <img src="https://latex.codecogs.com/png.latex?w"> and height <img src="https://latex.codecogs.com/png.latex?h">. Additionally, two “coordinate” channels are appended. The result is fed to an unstrided convolutional decoder. (right) Pseudo-code of the spatial operation. Taken from <a href="https://arxiv.org/abs/1901.07017">Watters et al.&nbsp;(2019)</a>.</td>
</tr>
</tbody>
</table>
<!-- | (left) Schematic of the Spatial Broadcast VAE. In the decoder, we broadcast (tile) the latent code $\textbf{z}$ of size $k$ to the image width $w$ and height $h$, and concatenate two "coordinate" channels. This is then fed to an unstrided convolutional decoder. (right) Pseudo-code of the spatial operation. Taken from [Watters et al. (2019)](https://arxiv.org/abs/1901.07017).| -->
<p><strong>Motivation</strong>: The presented architecture is mainly motivated by two reasons:</p>
<ul>
<li><p><strong>Deconvolution layers cause optimization difficulties</strong>: <a href="https://arxiv.org/abs/1901.07017">Watters et al.&nbsp;(2019)</a> argue that upsampling deconvolutional layers should be avoided, since these are prone to produce checkerboard artifacts, i.e., a checkerboard pattern can be identified on the resulting images (when looking closer), see figure below. These artifacts constrain the reconstruction accuracy and <a href="https://arxiv.org/abs/1901.07017">Watters et al. (2019)</a> hypothesize that the resulting effects may raise problems for learning a disentangled representation in the latent space.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/spatial_broadcast_decoder/img/cherckerboard_artifacts.png" title="Checkerboard Artifacts" class="img-fluid" alt="Checkerboard Artifacts"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">A checkerboard pattern can often be identified in artifically generated images that use deconvolutional layers. <br>Taken from <a href="https://distill.pub/2016/deconv-checkerboard/">Odena et al.&nbsp;(2016)</a> (very worth reading).</td>
</tr>
</tbody>
</table></li>
<li><p><strong>Appended coordinate channels improve positional generalization and optimization</strong>: Previous work by <a href="https://arxiv.org/abs/1807.03247">Liu et al. (2018)</a> showed that standard convolution/deconvolution networks (CNNs) perform badly when trying to learn trivial coordinate transformations (e.g., learning a mapping from Cartesian space into one-hot pixel space or vice versa). This behavior may seem counterintuitive (easy task, small dataset), however the feature of translational equivariance (i.e., shifting an object in the input equally shifts its representation in the output) in CNNs<sup>2</sup> hinders learning this task: The filters have by design no information about their position. Thus, coordinate transformations result in complicated functions which makes optimization difficult. E.g., changing the input coordinate slighlty might push the resulting function in a completelty different direction.</p>
<p><strong>CoordConv Solution</strong>: To overcome this problem, <a href="https://arxiv.org/abs/1807.03247">Liu et al. (2018)</a> propose to append coordinate channels before convolution and term the resulting layer <em>CoordConv</em>, see figure below. In principle, this layer can learn to use or discard translational equivariance and keeps the other advantages of convolutional layers (fast computations, few parameters). Under this modification learning coordinate transformation problems works out of the box with perfect generalization in less time (150 times faster) and less memory (10-100 times fewer parameters). As coordinate transformations are implicitely needed in a variaty of tasks (such as producing bounding boxes in object detection) using CoordConv instead of standard convolutions might increase the performance of several other models.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/spatial_broadcast_decoder/img/CoordConv.png" title="CoordConv Layer" class="img-fluid" alt="CoordConv Layer"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Comparison of 2D convolutional and CoordConv layers. <br>Taken from <a href="https://arxiv.org/abs/1807.03247">Liu et al.&nbsp;(2018)</a>.</td>
</tr>
</tbody>
</table>
<p><strong>Positional Generalization</strong>: Appending fixed coordinate channels is mainly beneficial in datasets in which same objects may appear at distinct positions (i.e., there is positional variation). The main idea is that rendering an object at a specific position without spatial information (i.e., standard convolution/deconvolution) results in a very complicated function. In contrast,the Spatial Broadcast decoder architecture can leverage the spatial information to reveal objects easily: E.g., by convolving the positions in the latent space with the fixed coordinate channels and applying a threshold operation. Thus, <a href="https://arxiv.org/abs/1901.07017">Watters et al.&nbsp;(2019)</a> argue that the Spatial Broadcast decoder architecture puts a prior on dissociating positional from non-positional features in the latent distribution. Datasets without positional variation in turn seem unlikely to benefit from this architecture. However, <a href="https://arxiv.org/abs/1901.07017">Watters et al. (2019)</a> showed that the Spatial Broadcast decoder could still help in these datasets and attribute this to the replacement of deconvolutional layers.</p></li>
</ul>
<!-- ## Learning the Model -->
<!-- Basically, the Spatial Broadcast decoder is a function approximator for -->
<!-- probabilistic decoder in a VAE. Thus, learning the model works exactly -->
<!-- as in VAEs (see my -->
<!-- [post](https://borea17.github.io/blog/auto-encoding_variational_bayes)): -->
<!-- The optimal parameters are learned jointly  -->
<!-- by training the VAE using the AEVB algorithm ([Kingma and Welling, -->
<!-- 2013](https://arxiv.org/abs/1312.6114)). The remaining  -->
<!-- part of this post aims to reproduce some of results -->
<!-- by [Watters et al. (2019)](https://arxiv.org/abs/1901.07017), i.e., -->
<!-- comparing the Spatial Broadcast decoder with a standard -->
<!-- deconvolutional decoder.  -->
</section>
<section id="implementation" class="level2">
<h2 class="anchored" data-anchor-id="implementation">Implementation</h2>
<p><a href="https://arxiv.org/abs/1901.07017">Watters et al.&nbsp;(2019)</a> conducted experiments with several datasets and could show that incorporating the Spatial Broadcast decoder into state-of-the-art VAE architectures consistently increased their perfomance. While this is impressive, it is always frustrating to not being able to reproduce results due to missing implementation details, less computing resources or simply not having enough time to work on a reimplementation.</p>
<p>The following reimplementation intends to eliminate that frustration by reproducing some of their experiments on much smaller datasets with similar characteristics such that training will take less time (less than 30 minutes with a NVIDIA Tesla K80 GPU).</p>
<section id="data-generation" class="level3">
<h3 class="anchored" data-anchor-id="data-generation">Data Generation</h3>
<p>A dataset that is similar in spirit to the <em>colored sprites dataset</em> will be generated, i.e., procedurally generated objects from known factors of variation. <a href="https://arxiv.org/abs/1901.07017">Watters et al. (2019)</a> use a binary <a href="https://github.com/deepmind/dsprites-dataset">dsprites dataset</a> consisting of 737,280 images and transform these during training into colored images by uniformly sampling from a predefined HSV space (see Appendix A.3). As a result, the dataset has 8 factors of variation (<img src="https://latex.codecogs.com/png.latex?x">-position, <img src="https://latex.codecogs.com/png.latex?y">-position, size, shape, angle, 3D-color) with infinite samples (due to sampling of color). They used <img src="https://latex.codecogs.com/png.latex?1.5%20%5Ccdot%2010%5E6"> training steps.</p>
<p>To reduce training time, we are going to generate a much simpler dataset consisting of <img src="https://latex.codecogs.com/png.latex?3675"> images with a circle (fixed size) inside generated from a predefined set of possible colors and positions such that there are only 3 factors of variation (<img src="https://latex.codecogs.com/png.latex?x">-position, <img src="https://latex.codecogs.com/png.latex?y">-position, discretized color). In this case <img src="https://latex.codecogs.com/png.latex?3.4%20%5Ccdot%2010%5E2"> training steps suffice for approximate convergence.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/spatial_broadcast_decoder/img/dataset.png" title="Examples of Dataset" class="img-fluid" alt="Examples of Dataset"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>Visualization of self-written Dataset</strong></td>
</tr>
</tbody>
</table>
<p>The code below creates the dataset. Note that it is kept more generic than necessary to allow the creation of several variations of this dataset, i.e., more dedicated experiments can be conducted.</p>
<!-- Two datasets will be generated that are similar in spirit to  -->
<!-- * the *colored sprites dataset*, i.e., procedurally generated objects from -->
<!--   known factors of variation. -->
<!-- * a *dataset with small objects*. Note that [Watters et al. -->
<!--   (2019)](https://arxiv.org/abs/1901.07017) stated that in this case -->
<!--   the use of the Spatial Broadcast decoder `provides a particularly -->
<!--   dramatic benefit`. -->
<div class="cell" data-execution_count="2">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image, ImageDraw</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torchvision.transforms <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> transforms</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TensorDataset</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_img(x_position, y_position, shape, color, img_size, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>):</span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Generate an RGB image from the provided latent factors</span></span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        x_position (float): normalized x position</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        y_position (float): normalized y position</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        shape (string): can only be 'circle' or 'square'</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        color (string): color name or rgb string</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_size (int): describing the image size (img_size, img_size)</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        size (int): size of shape</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        torch tensor [3, img_size, img_size] (dtype=torch.float32)</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creation of image</span></span>
<span id="cb1-23">    img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.new(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'RGB'</span>, (img_size, img_size), color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>)</span>
<span id="cb1-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># map (x, y) position to pixel coordinates</span></span>
<span id="cb1-25">    x_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_position</span>
<span id="cb1-26">    y_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> size) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y_position</span>
<span id="cb1-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define coordinates</span></span>
<span id="cb1-28">    x_0, y_0 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_position, y_position</span>
<span id="cb1-29">    x_1, y_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size, y_position <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> size</span>
<span id="cb1-30">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># draw shapes</span></span>
<span id="cb1-31">    img1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ImageDraw.Draw(img)</span>
<span id="cb1-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'square'</span>:</span>
<span id="cb1-33">        img1.rectangle([(x_0, y_0), (x_1, y_1)], fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color)</span>
<span id="cb1-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'circle'</span>:</span>
<span id="cb1-35">        img1.ellipse([(x_0, y_0), (x_1, y_1)], fill<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>color)</span>
<span id="cb1-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> transforms.ToTensor()(img).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.float32)</span>
<span id="cb1-37"></span>
<span id="cb1-38"></span>
<span id="cb1-39"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_dataset(img_size, shape_sizes, num_pos, shapes, colors):</span>
<span id="cb1-40">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""procedurally generated from 4 ground truth independent latent factors,</span></span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       these factors are/can be</span></span>
<span id="cb1-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           Position X: num_pos values in [0, 1]</span></span>
<span id="cb1-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           Poistion Y: num_pos values in [0, 1]</span></span>
<span id="cb1-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           Shape: square, circle</span></span>
<span id="cb1-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           Color: standard HTML color name or 'rgb(x, y, z)'</span></span>
<span id="cb1-46"></span>
<span id="cb1-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           img_size (int): describing the image size (img_size, img_size)</span></span>
<span id="cb1-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           shape_sizes (list): sizes of shapes</span></span>
<span id="cb1-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           num_pos (int): discretized positions</span></span>
<span id="cb1-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           shapes (list): shapes (can only be 'circle', 'square')</span></span>
<span id="cb1-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           colors (list): colors</span></span>
<span id="cb1-53"></span>
<span id="cb1-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb1-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           data: torch tensor [n_samples, 3, img_size, img_size]</span></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           latents: each entry describes the latents of corresp. data entry</span></span>
<span id="cb1-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-58">    num_shapes, num_colors, sizes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(shapes), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(colors), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(shape_sizes)</span>
<span id="cb1-59"></span>
<span id="cb1-60">    n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_shapes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>num_colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>sizes</span>
<span id="cb1-61">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty([n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, img_size, img_size])</span>
<span id="cb1-62">    latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.empty([n_samples], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>)</span>
<span id="cb1-63"></span>
<span id="cb1-64">    index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x_pos <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_pos):</span>
<span id="cb1-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> y_pos <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, num_pos):</span>
<span id="cb1-67">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> shape <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shapes:</span>
<span id="cb1-68">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> size <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> shape_sizes:</span>
<span id="cb1-69">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> color <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> colors:</span>
<span id="cb1-70">                        img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_img(x_pos, y_pos, shape, color,</span>
<span id="cb1-71">                                           img_size, size)</span>
<span id="cb1-72">                        data[index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> img</span>
<span id="cb1-73">                        latents[index] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x_pos, y_pos, shape, color]</span>
<span id="cb1-74"></span>
<span id="cb1-75">                        index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-76">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> data, latents</span>
<span id="cb1-77"></span>
<span id="cb1-78"></span>
<span id="cb1-79">circles_data, latents <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_dataset(img_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, shape_sizes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>],</span>
<span id="cb1-80">                                         num_pos<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">35</span>,</span>
<span id="cb1-81">                                         shapes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'circle'</span>],</span>
<span id="cb1-82">                                         colors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'green'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>])</span>
<span id="cb1-83">sprites_dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TensorDataset(circles_data)</span></code></pre></div>
</details>
</div>
</section>
<section id="model-implementation" class="level3">
<h3 class="anchored" data-anchor-id="model-implementation">Model Implementation</h3>
<p>Although in principle implementing a VAE is fairly simple (see <a href="https://borea17.github.io/blog/auto-encoding_variational_bayes">my post</a> for details), in practice one must choose lots of hyperparmeters. These can be divided into three broader categories:</p>
<ul>
<li><p><strong>Encoder/Decoder and Prior Distribution</strong>: As suggested by <a href="https://arxiv.org/abs/1901.07017">Watters et al. (2019)</a> in Appendix A, we use a Gaussian decoder distribution with fixed diagonal covariance structure <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%5Cprime%20%7C%20%5Ctextbf%7Bz%7D%5E%7B(i)%7D%5Cright)%20=%20%5Cmathcal%7BN%7D%5Cleft(%20%5Ctextbf%7Bx%7D%5E%5Cprime%20%7C%20%20%5Cboldsymbol%7B%5Cmu%7D_D%5E%7B(i)%7D,%20%5Csigma%5E2%20%5Ctextbf%7BI%7D%20%5Cright)">, hence the reconstruction accuracy can be calculated as follows<sup>3</sup></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Ctext%7BReconstruction%20Acc.%7D%20=%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%0A%20%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D%5E%7B(i)%7D%20%5Cright)%20=%20-%20%5Cfrac%20%7B1%7D%7B2%20%5Csigma%5E2%7D%0A%20%20%5Csum_%7Bk=1%7D%5E%7BD%7D%20%5Cleft(x_k%5E%7B(i)%7D%20-%20%5Cmu_%7BD_k%7D%5E%7B(i)%7D%20%5Cright)%5E2%20+%20%5Ctext%7Bconst%7D.%0A%20%20"></p>
<p>For the encoder distribution a Gaussian with diagonal covariance <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Csim%20%20%5Cmathcal%7BN%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Cboldsymbol%7B%5Cmu%7D_E,%20%20%5Cboldsymbol%7B%5Csigma%7D_D%5E2%20%5Ctextbf%7BI%7D%20%5Cright)"> and as prior a centered multivariate Gaussian <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%20(%5Ctextbf%7Bz%7D)%20=%20%5Cmathcal%7BN%7D%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7B0%7D,%20%5Ctextbf%7BI%7D%20%5Cright)"> are chosen (both typical choices).</p></li>
<li><p><strong>Network Architecture for Encoder/Decoder</strong>: The network architectures for the standard encoder and decoder consist of convolutional and deconvolutional layers (since these perform typically much better on image data). The Spatial Broadcast decoder defines a different kind of architecture, see <a href="https://borea17.github.io/blog/spatial_broadcast_decoder#data-generation">Model Description</a>. The exact architectures are taken from Appendix A.1 of <a href="https://arxiv.org/abs/1901.07017">Watters et al.</a>, see code below<sup>4</sup>:</p>
<div class="cell" data-execution_count="3">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nn</span>
<span id="cb2-2"></span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Encoder(nn.Module):</span>
<span id="cb2-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">""""Encoder class for use in convolutional VAE</span></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        latent_dim: dimensionality of latent distribution</span></span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        encoder_conv: convolution layers of encoder</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        fc_mu: fully connected layer for mean in latent space</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        fc_log_var: fully connceted layers for log variance in latent space</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-15"></span>
<span id="cb2-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, latent_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>):</span>
<span id="cb2-17">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_dim</span>
<span id="cb2-19"></span>
<span id="cb2-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder_conv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-21">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 3, 64, 64]</span></span>
<span id="cb2-22">            nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-23">            nn.ReLU(),</span>
<span id="cb2-24">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 64, 32, 32]</span></span>
<span id="cb2-25">            nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-26">            nn.ReLU(),</span>
<span id="cb2-27">            nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-28">            nn.ReLU(),</span>
<span id="cb2-29">            nn.Conv2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-30">            nn.ReLU(),</span>
<span id="cb2-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 64, 4, 4],</span></span>
<span id="cb2-32">            nn.Flatten(),</span>
<span id="cb2-33">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 1024]</span></span>
<span id="cb2-34">            nn.Linear(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>),</span>
<span id="cb2-35">            nn.ReLU(),</span>
<span id="cb2-36">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 256]</span></span>
<span id="cb2-37">        )</span>
<span id="cb2-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-39">            nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim),</span>
<span id="cb2-40">        )</span>
<span id="cb2-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc_log_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-42">            nn.Linear(in_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, out_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim),</span>
<span id="cb2-43">        )</span>
<span id="cb2-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-45"></span>
<span id="cb2-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp):</span>
<span id="cb2-47">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder_conv(inp)</span>
<span id="cb2-48">        mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc_mu(out)</span>
<span id="cb2-49">        log_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc_log_var(out)</span>
<span id="cb2-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [mu, log_var]</span>
<span id="cb2-51"></span>
<span id="cb2-52"></span>
<span id="cb2-53"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Decoder(nn.Module):</span>
<span id="cb2-54">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""(standard) Decoder class for use in convolutional VAE,</span></span>
<span id="cb2-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    a Gaussian distribution with fixed variance (identity times fixed variance</span></span>
<span id="cb2-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    as covariance matrix) used as the decoder distribution</span></span>
<span id="cb2-57"></span>
<span id="cb2-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        latent_dim: dimensionality of latent distribution</span></span>
<span id="cb2-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        fixed_variance: variance of distribution</span></span>
<span id="cb2-61"></span>
<span id="cb2-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb2-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        decoder_upsampling: linear upsampling layer(s)</span></span>
<span id="cb2-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        decoder_deconv: deconvolution layers of decoder (also upsampling)</span></span>
<span id="cb2-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-66"></span>
<span id="cb2-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, latent_dim, fixed_variance):</span>
<span id="cb2-68">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_dim</span>
<span id="cb2-70">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian with fixed variance'</span></span>
<span id="cb2-71">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fixed_variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fixed_variance</span>
<span id="cb2-72"></span>
<span id="cb2-73">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder_upsampling <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-74">            nn.Linear(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>),</span>
<span id="cb2-75">            nn.ReLU(),</span>
<span id="cb2-76">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshaped into [batch_size, 64, 2, 2]</span></span>
<span id="cb2-77">        )</span>
<span id="cb2-78">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder_deconv <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-79">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 64, 2, 2]</span></span>
<span id="cb2-80">            nn.ConvTranspose2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-81">            nn.ReLU(),</span>
<span id="cb2-82">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 64, 4, 4]</span></span>
<span id="cb2-83">            nn.ConvTranspose2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-84">            nn.ReLU(),</span>
<span id="cb2-85">            nn.ConvTranspose2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-86">            nn.ReLU(),</span>
<span id="cb2-87">            nn.ConvTranspose2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-88">            nn.ReLU(),</span>
<span id="cb2-89">            nn.ConvTranspose2d(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,  <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-90">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape: [batch_size, 3, 64, 64]</span></span>
<span id="cb2-91">        )</span>
<span id="cb2-92">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-93"></span>
<span id="cb2-94">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp):</span>
<span id="cb2-95">        ups_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder_upsampling(inp)</span>
<span id="cb2-96">        ups_inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ups_inp.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-97">        mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder_deconv(ups_inp)</span>
<span id="cb2-98">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mu</span>
<span id="cb2-99"></span>
<span id="cb2-100"></span>
<span id="cb2-101"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> SpatialBroadcastDecoder(nn.Module):</span>
<span id="cb2-102">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""SBD class for use in convolutional VAE,</span></span>
<span id="cb2-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      a Gaussian distribution with fixed variance (identity times fixed</span></span>
<span id="cb2-104"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      variance as covariance matrix) used as the decoder distribution</span></span>
<span id="cb2-105"></span>
<span id="cb2-106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-107"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        latent_dim: dimensionality of latent distribution</span></span>
<span id="cb2-108"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        fixed_variance: variance of distribution</span></span>
<span id="cb2-109"></span>
<span id="cb2-110"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb2-111"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        img_size: image size (necessary for tiling)</span></span>
<span id="cb2-112"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        decoder_convs: convolution layers of decoder (also upsampling)</span></span>
<span id="cb2-113"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-114"></span>
<span id="cb2-115">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, latent_dim, fixed_variance):</span>
<span id="cb2-116">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-117">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb2-118">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian with fixed variance'</span></span>
<span id="cb2-119">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latent_dim</span>
<span id="cb2-120">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fixed_variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fixed_variance</span>
<span id="cb2-121"></span>
<span id="cb2-122">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_size)</span>
<span id="cb2-123">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_size)</span>
<span id="cb2-124">        x_grid, y_grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.meshgrid(x, y, indexing<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ij"</span>)</span>
<span id="cb2-125">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape into [1, 1, img_size, img_size] and save in state_dict</span></span>
<span id="cb2-126">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x_grid'</span>, x_grid.view((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x_grid.shape))</span>
<span id="cb2-127">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.register_buffer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_grid'</span>, y_grid.view((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y_grid.shape))</span>
<span id="cb2-128"></span>
<span id="cb2-129">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder_convs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="cb2-130">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape [batch_size, latent_dim + 2, 64, 64]</span></span>
<span id="cb2-131">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.latent_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>,</span>
<span id="cb2-132">                      stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-133">            nn.ReLU(),</span>
<span id="cb2-134">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape [batch_size, 64, 64, 64]</span></span>
<span id="cb2-135">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-136">                      kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-137">            nn.ReLU(),</span>
<span id="cb2-138">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape [batch_size, 64, 64, 64]</span></span>
<span id="cb2-139">            nn.Conv2d(in_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, out_channels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, stride<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-140">                      kernel_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb2-141">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># shape [batch_size, 3, 64, 64]</span></span>
<span id="cb2-142">        )</span>
<span id="cb2-143">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-144"></span>
<span id="cb2-145">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z):</span>
<span id="cb2-146">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-147">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reshape z into [batch_size, latent_dim, 1, 1]</span></span>
<span id="cb2-148">        z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.view(z.shape <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-149">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tile across image [batch_size, latent_im, img_size, img_size]</span></span>
<span id="cb2-150">        z_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.expand(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_size, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.img_size)</span>
<span id="cb2-151">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upsample x_grid and y_grid to [batch_size, 1, img_size, img_size]</span></span>
<span id="cb2-152">        x_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x_grid.expand(batch_size, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-153">        y_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.y_grid.expand(batch_size, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-154">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># concatenate vectors [batch_size, latent_dim+2, img_size, img_size]</span></span>
<span id="cb2-155">        z_sb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat((z_b, x_b, y_b), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-156">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply convolutional layers</span></span>
<span id="cb2-157">        mu_D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder_convs(z_sb)</span>
<span id="cb2-158">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mu_D</span></code></pre></div>
</details>
</div>
<p>The VAE implementation below combines the encoder and decoder architectures (slightly modified version of my last <a href="https://borea17.github.io/blog/auto-encoding_variational_bayes#vae-implementation">VAE implementation</a>).</p>
<div class="cell" data-execution_count="4">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.distributions.multivariate_normal <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MultivariateNormal</span>
<span id="cb3-2"></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> VAE(nn.Module):</span>
<span id="cb3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""A simple VAE class</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        vae_tpe: type of VAE either 'Standard' or 'SBD'</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        latent_dim: dimensionality of latent distribution</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        fixed_var: fixed variance of decoder distribution</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-12"></span>
<span id="cb3-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, vae_type, latent_dim, fixed_var):</span>
<span id="cb3-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb3-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vae_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vae_type</span>
<span id="cb3-16"></span>
<span id="cb3-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.vae_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Standard'</span>:</span>
<span id="cb3-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Decoder(latent_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latent_dim,</span>
<span id="cb3-19">                                  fixed_variance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fixed_var)</span>
<span id="cb3-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb3-21">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SpatialBroadcastDecoder(latent_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latent_dim,</span>
<span id="cb3-22">                                                   fixed_variance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fixed_var)</span>
<span id="cb3-23"></span>
<span id="cb3-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Encoder(latent_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latent_dim)</span>
<span id="cb3-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normal_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultivariateNormal(torch.zeros(latent_dim),</span>
<span id="cb3-26">                                              torch.eye(latent_dim))</span>
<span id="cb3-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb3-28"></span>
<span id="cb3-29">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-30">        z, mu_E, log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(x)</span>
<span id="cb3-31">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regularization term per batch, i.e., size: (batch_size)</span></span>
<span id="cb3-32">        regularization_term <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu_E<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-33">                                      <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> torch.exp(log_var_E)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-34"></span>
<span id="cb3-35">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian with fixed variance'</span>:</span>
<span id="cb3-37">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x_rec has shape (batch_size, 3, 64, 64)</span></span>
<span id="cb3-38">            x_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z)</span>
<span id="cb3-39">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reconstruction accuracy per batch, i.e., size: (batch_size)</span></span>
<span id="cb3-40">            factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.fixed_variance)</span>
<span id="cb3-41">            recons_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> factor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((x.view(batch_size, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span></span>
<span id="cb3-42">                                    x_rec.view(batch_size, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb3-43">                                  ).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>regularization_term.mean(), <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>recons_acc.mean()</span>
<span id="cb3-45"></span>
<span id="cb3-46">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reconstruct(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-47">        mu_E, log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder(x)</span>
<span id="cb3-48">        x_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(mu_E)</span>
<span id="cb3-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> x_rec</span>
<span id="cb3-50"></span>
<span id="cb3-51">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb3-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get encoder distribution parameters</span></span>
<span id="cb3-53">        mu_E, log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder(x)</span>
<span id="cb3-54">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample noise variable for each batch</span></span>
<span id="cb3-55">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-56">        epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normal_dist.sample(sample_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(batch_size, )</span>
<span id="cb3-57">                                          ).to(x.device)</span>
<span id="cb3-58">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get latent variable by reparametrization trick</span></span>
<span id="cb3-59">        z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.exp(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>log_var_E) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> epsilon</span>
<span id="cb3-60">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> z, mu_E, log_var_E</span>
<span id="cb3-61"></span>
<span id="cb3-62">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z):</span>
<span id="cb3-63">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get decoder distribution parameters</span></span>
<span id="cb3-64">        mu_D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(z)</span>
<span id="cb3-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mu_D</span></code></pre></div>
</details>
</div></li>
<li><p><strong>Training Parameters</strong>: Lastly, training neural networks itself consists of several hyperparmeters. Again, we are using the same setup as defined in Appendix A.1 of <a href="https://arxiv.org/abs/1901.07017">Watters et al.&nbsp;(2019)</a>, see code below.</p>
<div class="cell" data-execution_count="5">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> livelossplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PlotLosses</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train(dataset, epochs, VAE):</span>
<span id="cb4-6">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb4-7"></span>
<span id="cb4-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Device: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(device))</span>
<span id="cb4-9"></span>
<span id="cb4-10">    data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dataset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-11"></span>
<span id="cb4-12">    VAE.to(device)</span>
<span id="cb4-13">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(VAE.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3e-4</span>)</span>
<span id="cb4-14"></span>
<span id="cb4-15">    losses_plot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PlotLosses(groups<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'avg log loss'</span>:</span>
<span id="cb4-16">                                    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kl loss'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reconstruction loss'</span>]})</span>
<span id="cb4-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Start training with </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> decoder</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(VAE.vae_type))</span>
<span id="cb4-18">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb4-19">        avg_kl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-20">        avg_recons_err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, mini_batch_data <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(data_loader):</span>
<span id="cb4-22">            VAE.zero_grad()</span>
<span id="cb4-23"></span>
<span id="cb4-24">            kl_div, recons_err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VAE(mini_batch_data[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].to(device))</span>
<span id="cb4-25">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kl_div <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> recons_err</span>
<span id="cb4-26">            loss.backward()</span>
<span id="cb4-27">            optimizer.step()</span>
<span id="cb4-28"></span>
<span id="cb4-29">            avg_kl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> kl_div.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)</span>
<span id="cb4-30">            avg_recons_err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> recons_err.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)</span>
<span id="cb4-31"></span>
<span id="cb4-32">        losses_plot.update({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kl loss'</span>: np.log(avg_kl),</span>
<span id="cb4-33">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'reconstruction loss'</span>: np.log(avg_recons_err)})</span>
<span id="cb4-34">        losses_plot.send()</span>
<span id="cb4-35">    trained_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VAE</span>
<span id="cb4-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> trained_VAE</span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="visualization-functions" class="level3">
<h3 class="anchored" data-anchor-id="visualization-functions">Visualization Functions</h3>
<p>Evaluating the representation quality of trained models is a difficult task, since we are not only interested in the reconstruction accuracy but also in the latent space and its properties. Ideally the latent space offers a disentangled representation such that each latent variable represents a factor of variation with perfect reconstruction accuracy (i.e., for evaluation it is very helpful to know in advance how many and what factors of variation exist). Although there are some metrics to quantify disentanglement, <code>many of them have serious shortcomings and there is yet no consensus in the literature which to use</code> (<a href="https://arxiv.org/abs/1901.07017">Watters et al., 2019</a>). Instead of focusing on some metric, we are going to visualize the results by using two approaches:</p>
<ul>
<li><p><strong>Reconstructions and Latent Traversals</strong>: A very popular and helpful plot is to show some (arbitrarly chosen) reconstructions compared to the original input together with a series of latent space traversals. I.e., taking some encoded input and looking at the reconstructions when sweeping each coordinate in the latent space in a predefined interval (here from -2 to +2) while keeping all other coordinates constant. Ideally, each sweep can be associated with a factor of variation. The code below will be used to generate these plots. Note that the reconstructions are clamped into <img src="https://latex.codecogs.com/png.latex?%5B0,%201%5D"> as this is the allowed image range.</p>
<div class="cell" data-execution_count="6">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb5-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb5-3"></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> reconstructions_and_latent_traversals(STD_VAE, SBD_VAE, dataset, SEED<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb5-6">    np.random.seed(SEED)</span>
<span id="cb5-7">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb5-8">    latent_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> STD_VAE.encoder.latent_dim</span>
<span id="cb5-9"></span>
<span id="cb5-10">    n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb5-11">    i_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)), n_samples, replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-12"></span>
<span id="cb5-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># preperation for latent traversal</span></span>
<span id="cb5-14">    i_latent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i_samples[n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb5-15">    lat_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[i_latent][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-16">    sweep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_samples)</span>
<span id="cb5-17"></span>
<span id="cb5-18">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(constrained_layout<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>n_samples, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>latent_dims))</span>
<span id="cb5-19">    grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.GridSpec(latent_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb5-20">                        hspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, wspace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.02</span>, figure<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fig)</span>
<span id="cb5-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># standard VAE</span></span>
<span id="cb5-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, i_sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(i_samples):</span>
<span id="cb5-23">        orig_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[i_sample][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-24">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># original</span></span>
<span id="cb5-25">        main_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb5-26">        main_ax.imshow(transforms.ToPILImage()(orig_image))</span>
<span id="cb5-27">        main_ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-28">        main_ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb5-29"></span>
<span id="cb5-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reconstruction</span></span>
<span id="cb5-31">        x_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> STD_VAE.reconstruct(orig_image.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device))</span>
<span id="cb5-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clamp output into [0, 1] and prepare for plotting</span></span>
<span id="cb5-33">        recons_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  torch.clamp(x_rec, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).cpu()</span>
<span id="cb5-34"></span>
<span id="cb5-35">        main_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb5-36">        main_ax.imshow(transforms.ToPILImage()(recons_image))</span>
<span id="cb5-37">        main_ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-38">        main_ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb5-39">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># latent dimension traversal</span></span>
<span id="cb5-40">    z, mu_E, log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> STD_VAE.encode(lat_image.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device))</span>
<span id="cb5-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> latent_dim <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(latent_dims):</span>
<span id="cb5-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, z_replaced <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(sweep):</span>
<span id="cb5-43">            z_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.detach().clone()</span>
<span id="cb5-44">            z_new[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][latent_dim] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_replaced</span>
<span id="cb5-45"></span>
<span id="cb5-46">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clamp output into [0, 1] and prepare for plotting</span></span>
<span id="cb5-47">            img_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.clamp(STD_VAE.decode(z_new), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).cpu()</span>
<span id="cb5-48"></span>
<span id="cb5-49">            main_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> latent_dim, counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb5-50">            main_ax.imshow(transforms.ToPILImage()(img_rec))</span>
<span id="cb5-51">            main_ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-52">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SBD VAE</span></span>
<span id="cb5-53">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, i_sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(i_samples):</span>
<span id="cb5-54">        orig_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[i_sample][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># original</span></span>
<span id="cb5-56">        main_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb5-57">        main_ax.imshow(transforms.ToPILImage()(orig_image))</span>
<span id="cb5-58">        main_ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-59">        main_ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb5-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reconstruction</span></span>
<span id="cb5-61">        x_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SBD_VAE.reconstruct(orig_image.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device))</span>
<span id="cb5-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clamp output into [0, 1] and prepare for plotting</span></span>
<span id="cb5-63">        recons_image <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.clamp(x_rec, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).cpu()</span>
<span id="cb5-64"></span>
<span id="cb5-65">        main_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb5-66">        main_ax.imshow(transforms.ToPILImage()(recons_image))</span>
<span id="cb5-67">        main_ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-68">        main_ax.set_aspect(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'equal'</span>)</span>
<span id="cb5-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># latent dimension traversal</span></span>
<span id="cb5-70">    z, mu_E, log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SBD_VAE.encode(lat_image.unsqueeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).to(device))</span>
<span id="cb5-71">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> latent_dim <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(latent_dims):</span>
<span id="cb5-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, z_replaced <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(sweep):</span>
<span id="cb5-73">            z_new <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z.detach().clone()</span>
<span id="cb5-74">            z_new[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][latent_dim] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> z_replaced</span>
<span id="cb5-75">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># clamp output into [0, 1] and prepare for plotting</span></span>
<span id="cb5-76">            img_rec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.clamp(SBD_VAE.decode(z_new), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).cpu()</span>
<span id="cb5-77"></span>
<span id="cb5-78">            main_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>latent_dim, counter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb5-79">            main_ax.imshow(transforms.ToPILImage()(img_rec))</span>
<span id="cb5-80">            main_ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-81">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># prettify by adding annotation texts</span></span>
<span id="cb5-82">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prettify_with_annotation_texts(fig, grid, n_samples, latent_dims)</span>
<span id="cb5-83">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fig</span>
<span id="cb5-84"></span>
<span id="cb5-85"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> prettify_with_annotation_texts(fig, grid, n_samples, latent_dims):</span>
<span id="cb5-86">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># figure titles</span></span>
<span id="cb5-87">    titles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Deconv Reconstructions'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spatial Broadcast Reconstructions'</span>,</span>
<span id="cb5-88">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Deconv Traversals'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spatial Broadcast Traversals'</span>]</span>
<span id="cb5-89">    idx_title_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb5-90">                    [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]</span>
<span id="cb5-91">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> title, idx_pos <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(titles, idx_title_pos):</span>
<span id="cb5-92">        fig_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[idx_pos[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], idx_pos[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]:idx_pos[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]])</span>
<span id="cb5-93">        fig_ax.annotate(title, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb5-94">                        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bottom'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>)</span>
<span id="cb5-95">        fig_ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-96">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># left annotations</span></span>
<span id="cb5-97">    fig_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-98">    fig_ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'input'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb5-99">                    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,  va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb5-100">    fig_ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-101">    fig_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-102">    fig_ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'recons'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>), xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb5-103">                    fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'right'</span>)</span>
<span id="cb5-104">    fig_ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-105">    fig_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>:latent_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb5-106">    fig_ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'latent coordinate traversed'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb5-107">                    xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb5-108">                    va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">90</span>)</span>
<span id="cb5-109">    fig_ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-110">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pertubation magnitude</span></span>
<span id="cb5-111">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i_y_grid <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]]:</span>
<span id="cb5-112">        fig_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[latent_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, i_y_grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:i_y_grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]])</span>
<span id="cb5-113">        fig_ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pertubation magnitude'</span>, xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>),</span>
<span id="cb5-114">                        xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,</span>
<span id="cb5-115">                        va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'bottom'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>)</span>
<span id="cb5-116">        fig_ax.set_frame_on(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb5-117">        fig_ax.axes.set_xlim([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5</span>])</span>
<span id="cb5-118">        fig_ax.xaxis.set_ticks([<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb5-119">        fig_ax.xaxis.set_ticks_position(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'top'</span>)</span>
<span id="cb5-120">        fig_ax.xaxis.set_tick_params(direction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'inout'</span>, pad<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb5-121">        fig_ax.get_yaxis().set_ticks([])</span>
<span id="cb5-122">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># latent dim</span></span>
<span id="cb5-123">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> latent_dim <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(latent_dims):</span>
<span id="cb5-124">        fig_ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> latent_dim, n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb5-125">        fig_ax.annotate(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lat dim '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), xy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>),</span>
<span id="cb5-126">                        xycoords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axes fraction'</span>,</span>
<span id="cb5-127">                        fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>, va<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'center'</span>, ha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb5-128">        fig_ax.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb5-129">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span></code></pre></div>
</details>
</div></li>
<li><p><strong>Latent Space Geometry</strong>: While latent traversals may be helpful, <a href="https://arxiv.org/abs/1901.07017">Watters et al. (2019)</a> note that this techniques suffers from two shortcommings:</p>
<ol type="1">
<li>Latent space entanglement might be difficult to perceive by eye.</li>
<li>Traversals are only taken at some point in space. It could be that traversals at some points are more disentangled than at other positions. Thus, judging disentanglement by the aforementioned method might be ultimately dependent to randomness.</li>
</ol>
<p>To overcome these limitations, they propose a new method which they term <em>latent space geometry</em>. The main idea is to visualize a transformation from a 2-dimensional generative factor space (subspace of all generative factors) into the 2-dimensional latent subspace (choosing the two latent components that correspond to the factors of variation). Latent space geometry that preserves the chosen geometry of the generative factor space (while scaling and rotation might be allowed depending on the chosen generative factor space) indicates disentanglement.</p>
<p>To put this into practice, the code below creates circle images by varying <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> positions uniformly and keeping the other generative factors (<em>here</em> only color) constant. Accordingly, the geometry of the generative factor space is a uniform grid (which will be plotted). These images will be encoded into mean and variance of the latent distribution. In order to find the latent components that correspond to the <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> position, we choose the components with smallest mean variance across all reconstructions, i.e., the most informative components<sup>5</sup>. Then, we can plot the latent space geometry by using the latent components of the mean (encoder distribution), see code below.</p>
<div class="cell" data-execution_count="7">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> latent_space_geometry(STD_VAE, SBD_VAE):</span>
<span id="cb6-2">    device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cuda'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> torch.cuda.is_available() <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cpu'</span></span>
<span id="cb6-3">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x,y position grid in [0.2, 0.8] (generative factors)</span></span>
<span id="cb6-5">    equi <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>)</span>
<span id="cb6-6">    equi_without_vert <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.setdiff1d(equi, np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-7"></span>
<span id="cb6-8">    x_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(np.repeat(np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(equi)),</span>
<span id="cb6-9">                      np.tile(equi_without_vert, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb6-10">    y_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(np.tile(equi, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>),</span>
<span id="cb6-11">                      np.repeat(np.linspace(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(equi_without_vert)))</span>
<span id="cb6-12">    labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.append(np.repeat(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">31</span>),</span>
<span id="cb6-13">                      np.repeat(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>))</span>
<span id="cb6-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot generative factor geometry</span></span>
<span id="cb6-15">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-16">    plt.scatter(x_pos, y_pos, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.get_cmap(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rainbow'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb6-17">    plt.gca().set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ground Truth Factors'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb6-18">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X-Position'</span>)</span>
<span id="cb6-19">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Y-Position'</span>)</span>
<span id="cb6-20"></span>
<span id="cb6-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># generate images</span></span>
<span id="cb6-22">    img_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span></span>
<span id="cb6-23">    shape_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb6-24">    images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.empty([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x_pos), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, img_size, img_size]).to(device)</span>
<span id="cb6-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, (x, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(x_pos, y_pos)):</span>
<span id="cb6-26">        images[counter] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_img(x, y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'circle'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>,</span>
<span id="cb6-27">                                      img_size, shape_size)</span>
<span id="cb6-28"></span>
<span id="cb6-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># STD VAE</span></span>
<span id="cb6-30">    [all_mu, all_log_var] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> STD_VAE.encoder(images)</span>
<span id="cb6-31">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># most informative latent variable</span></span>
<span id="cb6-32">    lat_1, lat_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_log_var.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).sort()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb6-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># latent coordinates</span></span>
<span id="cb6-34">    x_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_mu[:, lat_1].detach().cpu().numpy()</span>
<span id="cb6-35">    y_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_mu[:, lat_2].detach().cpu().numpy()</span>
<span id="cb6-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot latent space geometry</span></span>
<span id="cb6-37">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb6-38">    plt.scatter(x_lat, y_lat, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.get_cmap(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rainbow'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb6-39">    plt.gca().set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DeConv'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb6-40">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'latent 1 value'</span>)</span>
<span id="cb6-41">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'latent 2 value'</span>)</span>
<span id="cb6-42"></span>
<span id="cb6-43">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SBD VAE</span></span>
<span id="cb6-44">    [all_mu, all_log_var] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SBD_VAE.encoder(images)</span>
<span id="cb6-45">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># most informative latent variable</span></span>
<span id="cb6-46">    lat_1, lat_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_log_var.mean(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).sort()[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span>
<span id="cb6-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># latent coordinates</span></span>
<span id="cb6-48">    x_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_mu[:, lat_1].detach().cpu().numpy()</span>
<span id="cb6-49">    y_lat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_mu[:, lat_2].detach().cpu().numpy()</span>
<span id="cb6-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># plot latent space geometry</span></span>
<span id="cb6-51">    plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb6-52">    plt.scatter(x_lat, y_lat, c<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>labels, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>plt.cm.get_cmap(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rainbow'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))</span>
<span id="cb6-53">    plt.gca().set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spatial Broadcast'</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb6-54">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'latent 1 value'</span>)</span>
<span id="cb6-55">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'latent 2 value'</span>)</span>
<span id="cb6-56">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span></code></pre></div>
</details>
</div></li>
</ul>
</section>
<section id="results" class="level3">
<h3 class="anchored" data-anchor-id="results">Results</h3>
<p>Lastly, let’s train our models and look at the results:</p>
<div class="cell" data-execution_count="8">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span></span>
<span id="cb7-2">latent_dims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x position, y position, color, extra slots</span></span>
<span id="cb7-3">fixed_variance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">standard_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VAE(vae_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Standard'</span>, latent_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latent_dims,</span>
<span id="cb7-6">                   fixed_var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fixed_variance)</span>
<span id="cb7-7">SBD_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VAE(vae_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'SBD'</span>, latent_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latent_dims,</span>
<span id="cb7-8">              fixed_var<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fixed_variance)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="9">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">trained_standard_VAE  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(sprites_dataset, epochs, standard_VAE)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="10">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">trained_SBD_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(sprites_dataset, epochs, SBD_VAE)</span></code></pre></div>
</details>
</div>
<p>At the log-losses plots, we can already see that using the Spatial Broadcast decoder results in an improved reconstruction accuracy and regularization term. Now let’s compare both models visually by their</p>
<ul>
<li><p><strong>Reconstructions and Latent Traversals</strong>:</p>
<div class="cell" data-execution_count="11">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">reconstructions_and_latent_traversals(trained_standard_VAE,</span>
<span id="cb10-2">                                      trained_SBD_VAE, sprites_dataset)</span></code></pre></div>
</details>
</div>
<p>While the reconstructions within both models look pretty good, the latent space traversal shows an entangled representation in the standard (DeConv) VAE whereas the Spatial Broadcast model seems quite disentangled.</p></li>
<li><p><strong>Latent Space Geometry</strong>:</p>
<div class="cell" data-execution_count="12">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">latent_space_geometry(trained_standard_VAE, trained_SBD_VAE)</span></code></pre></div>
</details>
</div>
<p>The latent space geometry verifies our previous findings: The DeConv decoder has an entangled latent space (transformation is highly non linear) whereas in the Spatial Broadcast decoder the latent space geometry highly resembles the generating factors geometry (affine transformation). The transformation of the Spatial Broadcast decoder indicates very similar behavior in the <img src="https://latex.codecogs.com/png.latex?X-Y"> position subspace (of generative factors) as in the corresponding latent subspace.</p></li>
</ul>
<!-- [^4]: Note that in the Spatial Broadcast decoder the height and width -->
<!--     of the CNN input needs to be both 6 larger than the target -->
<!--     output (image) size to accommodate for the lack of padding. This -->
<!--     is not stated in the paper, however described in the appendix B.1 -->
<!--     of the follow up paper by [Burgess et al. (2019)](https://arxiv.org/abs/1901.11390). -->
</section>
</section>
<section id="drawbacks-of-paper" class="level2">
<h2 class="anchored" data-anchor-id="drawbacks-of-paper">Drawbacks of Paper</h2>
<ul>
<li>although there are fewer parameters in the Spatial Broadcast decoder, it does require more memory (in the implementation about 50% more)</li>
<li>longer training times compared to standard DeConv VAE</li>
<li>appended coordinate channels do not help when there is no positional variation <!-- * mostly applicable in the context of static images with positional --> <!--   variation  --> <!--   => temporal correlations --></li>
</ul>
</section>
<section id="acknowledgement" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgement">Acknowledgement</h2>
<p><a href="https://dfdazac.github.io/">Daniel Daza’s</a> blog was really helpful and the presented code is highly inspired by his <a href="https://github.com/dfdazac/vaesbd">VAE-SBD implementation</a>.</p>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>As outlined by <a href="https://arxiv.org/abs/1901.07017">Watters et al.&nbsp;(2019)</a>, there is “yet no consensus on the definition of a disentangled representation”. However, in their paper they focus on <em>feature compositionality</em> (i.e., composing a scene in terms of independent features such as color and object) and refer to it as <em>disentangled representation</em>.↩︎</p></li>
<li id="fn2"><p>In typical image classification problems, translational equivariance is highly valued since it ensures that if a filter detects an object (e.g., edges), it will detect it irrespective of its position.↩︎</p></li>
<li id="fn3"><p>For simplicity, we are setting the number of (noise variable) samples <img src="https://latex.codecogs.com/png.latex?L"> per datapoint to 1 (see equation for <img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D"> in <a href="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes#model-description"><em>Reparametrization Trick</em></a> paragraph). Note that <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a> stated that in their experiments setting <img src="https://latex.codecogs.com/png.latex?L=1"> sufficed as long as the minibatch size was large enough.↩︎</p></li>
<li id="fn4"><p>The Spatial Broadcast decoder architecture is slightly modified: Kernel size of 3 instead of 4 to get the desired output shapes.↩︎</p></li>
<li id="fn5"><p>An intuitve way to understand why latent compontents with smaller variance within the encoder distribution are more informative than others is to think about the sampled noise and the loss function: If the variance is high, the latent code <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D"> will vary a lot which in turn makes the task for the decoder more difficult. However, the regularization term (KL-divergence) pushes the variances towards 1. Thus, the network will only reduce the variance of its components if it helps to increase the reconstruction accuracy.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>reimplementation</category>
  <category>VAE</category>
  <category>disentanglement</category>
  <guid>https://borea17.github.io/paper_summaries/spatial_broadcast_decoder/index.html</guid>
  <pubDate>Thu, 06 Aug 2020 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Auto-Encoding Variational Bayes</title>
  <dc:creator>borea17 </dc:creator>
  <link>https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes/index.html</link>
  <description><![CDATA[ 




<!-- nextjournal_link: "https://nextjournal.com/borea17/auto-encoding-variational-bayes" -->
<p><a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a> introduced the Variational Auto-Encoder (VAE) to showcase how their Auto-Encoding Variational Bayes (AEVB) algorithm can be used in practice. Assuming i.i.d. datasets and continuous latent variables, the AEVB algorithm learns an approximate probabilistic encoder <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D)"> jointly with the probabilisitc decoder <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bx%7D%7C%5Ctextbf%7Bz%7D)"> (where <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D"> parametrize the corresponding distributions) by learning the optimal model parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D"> through optimizing an objective function with standard gradient ascent methods. In summary, a <strong>VAE is probabilistic autoencoder which uses variational inference to regularize the coding space</strong>. Furthermore, a VAE is a deep generative model as sampling from the coding space is possible, i.e., new observations can be generated.</p>
<section id="model-description" class="level2">
<h2 class="anchored" data-anchor-id="model-description">Model Description</h2>
<p>The AEVB algorithm basically assumes a generative process, introduces a variational approximation (see figure below) and optimizes the model parameters by maximizing an objective function. The objective function consists of the (reparametrized) variational lower bound of each datapoint. Reparametrization is necessary to allow the explicit formulation of gradients with respect to the model parameters.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes/img/DAG.png" title="Generative Process and Variational Approximation" class="img-fluid" alt="Generative Process and Variational Approximation"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">The directed graphical models represent the assumed generative process (a) and the variational approximation of the intractable posterior (b) in the AEVB algorithm.</td>
</tr>
</tbody>
</table>
<p><strong>Objective Function Derivation</strong>: Let <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D=%5C%7B%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5C%7D_%7Bi=1%7D%5E%7BN%7D"> denote the dataset consisting of <img src="https://latex.codecogs.com/png.latex?N"> i.i.d. samples and let <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D"> denote the unobserved continuous random variable (i.e., hidden or code variable). <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a> assume that each observed sample <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> comes from a generative process in which: Firstly, a hidden variable <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D"> is generated from a prior distribution <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D)">. Secondly, <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> is generated from the conditional distribution <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D(%5Ctextbf%7Bx%7D%7C%5Ctextbf%7Bz%7D%5E%7B(i)%7D)">. Note that we do not know <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D"> nor do we have information about <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D">. In order to recover this generative process, they introduce <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D)"> as an approximation to the intractable true posterior<sup>1</sup> <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D)">. The marginal log likelihood of each individual datapoint <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> can then be stated as follows (see <a href="https://blog.evjang.com/2016/08/variational-bayes.html">Eric Jang’s amazing blog post</a> for detailed derivation)</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%20=%0A%20%20%5Cunderbrace%7BD_%7BKL%7D%20%5Cleft(q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%5Cleft(%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%0A%20%20%7C%7C%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%5Cright)%7D_%7B%5Cge%200%7D%20+%0A%20%20%5Cmathcal%7BL%7D%20%5Cleft(%20%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D,%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%20%5Cge%0A%20%20%5Cmathcal%7BL%7D%20%5Cleft(%20%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D,%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright),%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?D_%7BKL%7D(%5Ccdot)"> denotes the KL divergence of the approximate from the true posterior (this quantity remains unknown since the true posterior <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D%5E%7B(i)%7D)"> is intractable). <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BL%7D%20%5Cleft(%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D,%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)"> is called the variational lower bound or evidence lower bound (ELBO). The goal is to optimize <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D"> such that variational lower bound is maximized, thereby we indirectly maximize the marginal log likelihood. The variational lower bound can rewritten such that the objective function is obtained (also derived in <a href="https://blog.evjang.com/2016/08/variational-bayes.html">Eric Jang’s blog post</a>)</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Cmathcal%7BL%7D%20%5Cleft(%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D,%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%20&amp;=%0A%20%20%5Cmathbb%7BE%7D_%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D%5E%7B(i)%7D)%7D%0A%20%20%5Cleft%5B%20-%5Clog%0A%20%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20(%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20)%20+%0A%20%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D)%20+%20%5Clog%0A%20%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%20%20(%5Ctextbf%7Bx%7D%5E%7B(i)%7D%7C%5Ctextbf%7Bz%7D)%20%5Cright%5D%20%5C%5C%0A%20%20&amp;=%20%5Cunderbrace%7B-D_%7BKL%7D%20%5Cleft(%20%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%20%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright),%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%20%20(%5Ctextbf%7Bz%7D)%20%5Cright)%7D_%7B%5Ctext%7BRegularization%20Term%7D%7D%20+%0A%20%20%20%20%5Cunderbrace%7B%0A%20%20%20%20%5Cmathbb%7BE%7D_%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D%5E%7B(i)%7D)%7D%0A%20%20%20%20%5Cleft%5B%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%7C%20%5Ctextbf%7Bz%7D%20%5Cright)%20%5Cright%5D%7D_%7B%5Ctext%7BReconstruction%20Accuracy%7D%7D%0A%20%20%20%20.%0A%5Cend%7Balign%7D%0A"></p>
<p>The two terms have an associated interpretation in autoencoder language:</p>
<ul>
<li><p><em>Reconstruction Accuracy</em> (opposite of <em>Reconstruction Error</em>): The expectation can be interpreted using Monte Carlo integration,i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%20%20%5Cmathbb%7BE%7D_%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D%5E%7B(i)%7D)%7D%0A%20%20%20%20%5Cleft%5B%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%0A%20%20%20%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D%0A%20%20%20%20%5Cright)%20%5Cright%5D%20%5Capprox%20%5Cfrac%20%7B1%7D%7BN%7D%20%5Csum_%7Bk=1%7D%5E%7BN%7D%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%20%20%20%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D%5E%7B(k)%7D%20%5Cright)%20%5Cqquad%20%5Ctextbf%7Bz%7D%5E%7B(k)%7D%20%5Csim%0A%20%20%20%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D%5E%7B(i)%7D),%0A%20%20"></p>
<p>which results in an unbiased estimate. Sampling <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(k)%7D%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D%5E%7B(i)%7D)"> can be understood as encoding the observed input <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> into a code <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(k)%7D"> using the probabilistic encoder <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D">. Clearly, the expectation is maximized when the decoder <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D"> maps the encoded input <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(k)%7D"> back the original input <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D">, i.e., assigns high probability to <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%7C%20%5Ctextbf%7Bz%7D%5E%7B(i)%7D%20%5Cright)">.</p></li>
<li><p><em>Regularization Term</em>: The KL divergence is non-negative and only zero if both distributions are identical. Thus, maximizing this term forces the encoder distribution <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D"> to be close to the prior <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D(%5Ctextbf%7Bz%7D)">. In VAEs, the prior is typically set to be an isotropic normal distribution resulting in a regularized code space, i.e., encouraging a code space that is close to a normal distribution.</p></li>
</ul>
<p><strong>Reparametrization Trick</strong>: While the KL-divergence <img src="https://latex.codecogs.com/png.latex?D_%7BKL%7D%20%5Cleft(%20%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright),%20%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D)%5Cright)"> (i.e., the regularization term) can often be integrated analytically, the second term <img src="https://latex.codecogs.com/png.latex?%5Cmathbb%7BE%7D_%7Bq_%7B%5Cboldsymbol%7B%5Cphi%7D%7D(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D%5E%7B(i)%7D)%7D%20%5Cleft%5B%20%5Clog%20%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%7C%20%5Ctextbf%7Bz%7D%20%5Cright)%20%5Cright%5D"> (i.e., the reconstruction accuracy) requires sampling from <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D">. There are two downsides associated wih sampling from <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D"> approaches:</p>
<ol type="1">
<li>Backpropagation does not work with a sampling operation, i.e., the implementation of VAEs would be more difficult.</li>
<li>The usual Monte Carlo gradient estimator (which relies on sampling from <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D">) w.r.t. <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cphi%7D"> exhibits very high variance.</li>
</ol>
<p>To overcome these problems, <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a> use the <strong>reparametrization trick</strong>:</p>
<center>
Substitute sampling <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%20%5Csim%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D"> by using a deterministic mapping <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%20=%20g_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20(%5Cboldsymbol%7B%5Cepsilon%7D,%20%5Ctextbf%7Bx%7D)"> with the differential transformation <img src="https://latex.codecogs.com/png.latex?g_%7B%5Cboldsymbol%7B%5Cphi%7D%7D"> of an auxiliary noise variable <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cepsilon%7D"> with <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cepsilon%7D%5Csim%20p(%5Cboldsymbol%7B%5Cepsilon%7D)">.
</center>
<p><br> As a result, the reparametrized objective function can be written as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Cmathcal%7BL%7D%20%5Cleft(%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D;%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%20=%0A%20%20-D_%7BKL%7D%20%5Cleft(%20%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright),%0A%20%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D)%20%5Cright)%20+%0A%20%20%5Cmathbb%7BE%7D_%7Bp(%5Cboldsymbol%7B%5Cepsilon%7D)%7D%20%5Cleft%5B%20%5Clog%0A%20%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%20%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%7C%20g_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%20%20%5Cboldsymbol%7B%5Cepsilon%7D,%0A%20%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20%5Cright)%20%5Cright%5D%0A"></p>
<p>in which the second term can be approximated with Monte Carlo integration yielding</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D%20%5Cleft(%5Cboldsymbol%7B%5Ctheta%7D,%0A%20%20%5Cboldsymbol%7B%5Cphi%7D;%0A%20%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)%20=%0A%20%20-D_%7BKL%7D%20%5Cleft(%20%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright),%0A%20%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D)%20%5Cright)%20+%0A%20%20%5Cfrac%20%7B1%7D%7BL%7D%20%5Csum_%7Bl=1%7D%5E%7BL%7D%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%0A%20%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%7C%20g_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%0A%5Cleft(%20%5Cboldsymbol%7B%5Cepsilon%7D%5E%7B(i,%20l)%7D,%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%5Cright)%0A"></p>
<p>with <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cepsilon%7D%20%5Csim%20p(%5Cboldsymbol%7B%5Cepsilon%7D)">. Note that <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling</a> denote this estimator as the second version of the Stochastic Gradient Variational Bayes (SGVB) estimator. Assuming that the KL-divergence can be integrated analytically, the derivatives <img src="https://latex.codecogs.com/png.latex?%5Cnabla_%7B%5Cboldsymbol%7B%5Ctheta%7D,%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cwidetilde%7BL%7D"> can be taken (see figure below), i.e., this estimator can be optimized using standard stochastic gradient methods.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes/img/reparameterization_trick.png" title="Computation Graph under Reparametrization" class="img-fluid" alt="Computation Graph under Reparametrization"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">The computation graphs summarize the difference between the computation of the reconstruction accuracy in the original objective (a) and the reparametrized objective (b). Circles indicate a sampling operation through which backpropagation is not allowed.</td>
</tr>
</tbody>
</table>
<p>To increase stability and performance, <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling</a> introduce a minibatch estimator of the lower bound:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D%5E%7BM%7D%20(%5Cboldsymbol%7B%5Ctheta%7D,%0A%20%20%5Cboldsymbol%7B%5Cphi%7D;%20%5Ctextbf%7BX%7D%5E%7BM%7D)%20%20=%20%20%5Cfrac%20%7BN%7D%7BM%7D%0A%20%20%5Csum_%7Bi=1%7D%5E%7BM%7D%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D%20%5Cleft(%0A%20%20%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D;%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright),%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D%5E%7BM%7D%20=%20%5Cleft%5C%7B%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright%5C%7D_%7Bi=1%7D%5E%7BM%7D"> denotes a minibatch of <img src="https://latex.codecogs.com/png.latex?M"> datapoints from the full dataset <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D"> of <img src="https://latex.codecogs.com/png.latex?N"> datapoints.</p>
</section>
<section id="learning-the-model" class="level2">
<h2 class="anchored" data-anchor-id="learning-the-model">Learning the Model</h2>
<p>Learning the probabilistic encoder <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D"> and decoder <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D"> comes down to learning the optimal model parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D"> using the AEVB algorithm which can be summarized in 5 steps:</p>
<ol type="1">
<li>Initialize model parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D"> randomly.</li>
<li>Sample random minibatch <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D%5E%7BM%7D%20=%20%5Cleft%5C%7B%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright%5C%7D_%7Bi=1%7D%5E%7BM%7D">.</li>
<li>Compute gradients <img src="https://latex.codecogs.com/png.latex?%5Cnabla_%7B%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D%7D%20%20%5Cwidetilde%7B%5Cmathcal%7BL%7D%7D%5E%7BM%7D%20%5Cleft(%5Cboldsymbol%7B%5Ctheta%7D,%20%5Cboldsymbol%7B%5Cphi%7D;%20%5Ctextbf%7BX%7D%5E%7BM%7D%20%5Cright)">.</li>
<li>Update model parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D"> by taking a gradient ascent step.</li>
<li>Repeat steps 2-4 until model parameters converged</li>
</ol>
</section>
<section id="vae-implementation" class="level2">
<h2 class="anchored" data-anchor-id="vae-implementation">VAE Implementation</h2>
<p>A VAE simply uses deep neural networks (DNNs) as function approximators to parametrize the probabilistic encoder <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D"> and decoder <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D">. The optimal parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cphi%7D,%20%5Cboldsymbol%7B%5Ctheta%7D"> are learned jointly by training the VAE using the AEVB algorithm.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes/img/schematic_VAE.png" title="Schematic of a standard VAE" class="img-fluid" alt="Schematic of a standard VAE"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Schematic of a standard VAE</td>
</tr>
</tbody>
</table>
<p><strong>Regularization Term</strong>: Typically, the prior over the latent variables is set to be the centered isotropic Gaussian, i.e., <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D)%20%5Csim%20%5Cmathcal%7BN%7D%20(%5Ctextbf%7B0%7D,%20%5Ctextbf%7BI%7D)">. Note that this prior is needed to compute the regularization term in the objective function. Furthermore, it is commonly assumed that the true posterior <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%5Cright)"> may be approximated by <img src="https://latex.codecogs.com/png.latex?q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright)%20%5Csim%20%5Cmathcal%7BN%7D%5Cleft(%5Cboldsymbol%7B%5Cmu%7D_E%5E%7B(i)%7D,%20%5Cboldsymbol%7B%5Csigma%7D_E%5E%7B2%20(i)%7D%20%5Ctextbf%7BI%7D%20%5Cright)"> (subscripts denote that these parameters come from the <em>encoder network</em>). As a result, the regularization term can be integrated analytically leading to a term that only depends on <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cmu%7D_E%5E%7B(i)%7D,%20%5Cboldsymbol%7B%5Csigma%7D_E%5E%7B2%20(i)%7D"> (see Appendix B of <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling</a>)</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A-D_%7BKL%7D%20%5Cleft(%20%20q_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%0A%20%20%5Ctextbf%7Bz%7D%20%7C%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright),%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%0A%20%20(%5Ctextbf%7Bz%7D)%20%5Cright)%20=%20%5Cfrac%20%7B1%7D%7B2%7D%20%5Csum_%7Bj=1%7D%5E%7BJ%7D%20%5Cleft(%0A%20%201%20+%20%5Clog%20%5Cleft(%20%5Cleft(%20%5Csigma_%7BE_j%7D%5E%7B(i)%7D%20%5Cright)%5E2%20%5Cright)%0A%20%20-%20%5Cleft(%20%5Cmu_%7BE_j%7D%5E%7B(i)%7D%20%20%5Cright)%5E2%20-%20%20%5Cleft(%20%5Csigma_%7BE_j%7D%5E%7B(i)%7D%20%5Cright)%5E2%0A%20%20%5Cright),%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?J"> denotes the latent space dimension.</p>
<p><strong>Encoder/Decoder Network</strong>: <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a> use simple neural networks with only one hidden layer to approximate the parameters of the probabilistic encoder and decoder. As stated above, the encoder network is fixed to compute the parameters <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cmu%7D%5E%7B(i)%7D_E,%20%5Cboldsymbol%7B%5Csigma%7D_E%5E%7B(i)%7D%20%5Cin%20%5Cmathbb%7BR%7D%5E%7BL%7D"> of the Gaussian distribution <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BN%7D%5Cleft(%5Cboldsymbol%7B%5Cmu%7D_E%5E%7B(i)%7D,%20%5Cboldsymbol%7B%5Csigma%7D_E%5E%7B2%20(i)%7D%20%5Ctextbf%7BI%7D%20%5Cright)">. In fact, the encoder network takes a sample <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> and outputs the mean <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cmu%7D_E%5E%7B(i)%7D"> and logarithmized variance, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Bbmatrix%7D%20%5Cboldsymbol%7B%5Cmu%7D_E%5E%7B(i)%7D%20&amp;%20%5Clog%0A%5Cboldsymbol%7B%5Csigma%7D%5E%7B2(i)%7D%20%5Cend%7Bbmatrix%7D%20=%20f_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cright).%0A"></p>
<p>Note that using the logarithmized version of the variance increases stability and simplifies the training<sup>2</sup>.</p>
<p>In principle, the encoder and decoder network are very similar only that the dimension of the input and output are reversed. While the encoder network is fixed to approximate a multivariate Gaussian with diagonal covariance structure, the decoder network can approximate a multivariate Gaussian (real-valued data) or Bernoulli (binary data) distribution.</p>
<p>Below is a simple Python class that can be used to instantiate the encoder or decoder network as described in appendix C of <a href="https://arxiv.org/abs/1312.6114">Kingma and Welling (2013)</a>.</p>
<div class="cell" data-execution_count="2">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> nn</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> OrderedDict</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CoderNetwork(nn.Module):</span>
<span id="cb1-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">r"""Encoder/Decoder for use in VAE based on Kingma and Welling</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        input_dim: input dimension (int)</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        output_dim: output dimension (int)</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        hidden_dim: hidden layer dimension (int)</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        coder_type: encoder/decoder type can be </span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                   'Gaussian'   - Gaussian with diagonal covariance structure</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                   'I-Gaussian' - Gaussian with identity as covariance matrix </span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                   'Bernoulli'  - Bernoulli distribution       </span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-17">    </span>
<span id="cb1-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, input_dim, hidden_dim, output_dim, coder_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian'</span>):</span>
<span id="cb1-19">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb1-20">        </span>
<span id="cb1-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> coder_type <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span>  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I-Gaussian'</span> ,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bernoulli'</span>], <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'unknown coder_type'</span></span>
<span id="cb1-23">        </span>
<span id="cb1-24">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_dim</span>
<span id="cb1-25">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output_dim</span>
<span id="cb1-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> coder_type</span>
<span id="cb1-27">        </span>
<span id="cb1-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(OrderedDict([</span>
<span id="cb1-29">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'h'</span>, nn.Linear(input_dim, hidden_dim)),</span>
<span id="cb1-30">            (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ReLU'</span>, nn.ReLU()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ReLU instead of Tanh proposed by K. and W.       </span></span>
<span id="cb1-31">        ]))</span>
<span id="cb1-32">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_dim, output_dim)</span>
<span id="cb1-33">        </span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian'</span>:</span>
<span id="cb1-35">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc_log_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Linear(hidden_dim, output_dim)</span>
<span id="cb1-36">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bernoulli'</span>:</span>
<span id="cb1-37">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigmoid_mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sigmoid()</span>
<span id="cb1-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb1-39">    </span>
<span id="cb1-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inp):</span>
<span id="cb1-41">        out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coder(inp)</span>
<span id="cb1-42">        mu <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc_mu(out)</span>
<span id="cb1-43">        </span>
<span id="cb1-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian'</span>:</span>
<span id="cb1-45">            log_var <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.fc_log_var(out)</span>
<span id="cb1-46">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [mu, log_var]</span>
<span id="cb1-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I-Gaussian'</span>:</span>
<span id="cb1-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mu</span>
<span id="cb1-49">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bernoulli'</span>:</span>
<span id="cb1-50">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.sigmoid_mu(mu)</span>
<span id="cb1-51">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span></code></pre></div>
</details>
</div>
<p><strong>Reconstruction Accuracy</strong>: Sampling from the encoder distribution is avoided by using the reparameterization trick, i.e., the latent variable <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i)%7D"> is expressed as a deterministic variable</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Ctextbf%7Bz%7D%5E%7B(i,%20l)%7D=g_%7B%5Cboldsymbol%7B%5Cphi%7D%7D%20(%5Ctextbf%7Bx%7D%5E%7B(i)%7D,%0A%20%20%5Cboldsymbol%7B%5Cepsilon%7D)%20=%20%5Cboldsymbol%7B%5Cmu%7D_E%5E%7B(i)%7D%20+%0A%20%20%5Cboldsymbol%7B%5Csigma%7D_E%5E%7B(i)%7D%20%5Codot%20%5Cboldsymbol%7B%5Cepsilon%7D%5E%7B(l)%7D%20%5Cquad%0A%20%20%5Ctext%7Bwhere%7D%0A%20%20%5Cquad%20%5Cboldsymbol%7B%5Cepsilon%7D%20%5Csim%0A%20%20%5Cmathcal%7BN%7D%20(%5Ctextbf%7B0%7D,%20%5Ctextbf%7BI%7D),%0A"></p>
<p>and <img src="https://latex.codecogs.com/png.latex?%5Codot"> denotes element-wise multiplication.</p>
<p>Note that we do not need to sample from the decoder distribution, since during training the reconstruction accuracy in the objective function only sums the log-likelihood of each sample <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bz%7D%5E%7B(i,%20l)%7D"> and during test time we are mostly interested in the reconstructed <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B%5Cprime%7D"> with highest probability, i.e., the mean.</p>
<p>The reconstruction accuracy in the reparametrized form is given by</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BReconstruction%20Accuracy%7D%20=%0A%20%20%20%5Cfrac%20%7B1%7D%7BL%7D%0A%5Csum_%7Bl=1%7D%5E%7BL%7D%20%5Clog%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%0A%20%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D%7C%20%5Ctextbf%7Bz%7D%5E%7B(i,l)%7D%5Cright),%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?L"> denotes the number of samples used during the reparameterization trick. Depending on the chosen decoder distribution, the log-likelihood can be stated in terms of the estimated distribution parameters:</p>
<ul>
<li><p><em>Gaussian distribution with diagonal covariance structure</em> <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Csim%20%5Cmathcal%7BN%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%5Cprime%20%7C%20%5Cboldsymbol%7B%5Cmu%7D_D%5E%7B(i)%7D%20,%20%5Ctext%7Bdiag%7D%20%5Cleft(%20%5Cboldsymbol%7B%5Csigma%7D_D%5E%7B2(i)%7D%20%5Cright)%20%5Cright)"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog_e%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%7C%20%5Ctextbf%7Bz%7D%5E%7B(i,l)%7D%5Cright)%20=%20%5Cunderbrace%7B-%20%5Cfrac%20%7BD%7D%7B2%7D%20%5Cln%0A2%5Cpi%7D_%7B%5Ctext%7Bconst%7D%7D%20-%20%5Cfrac%20%7B1%7D%7B2%7D%20%5Cln%20%5Cleft(%20%5Cprod_%7Bk=1%7D%5E%7BD%7D%20%5Csigma_%7BD_k%7D%5E%7B2(i)%7D%20%5Cright)%0A-%20%5Cfrac%20%7B1%7D%7B2%7D%5Csum_%7Bk=1%7D%5E%7BD%7D%20%5Cfrac%20%7B1%7D%7B%5Csigma_%7BD_k%7D%5E%7B2(i)%7D%7D%5Cleft(%20x_k%5E%7B(i)%7D%20%20-%20%5Cmu_%7BD_k%7D%5E%7B(i)%7D%5Cright)%5E2%0A"></p>
<p>with the original observation <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cin%20%5Cmathbb%7BR%7D%5E%7BD%7D">. In this form, the objective function is ill-posed since there are no limitations on the form of the normal distribution. As a result the objective function is unbounded, i.e., the VAE could learn the true mean <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cmu%7D_D%5E%7B(i)%7D%20=%20%5Ctextbf%7Bx%7D%5E%7B(i)%7D"> with arbitrary variance <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Csigma%7D_D%5E%7B2(i)%7D"> or huge variances with arbitrary means to maximize the log-likelihood (see <a href="https://stats.stackexchange.com/questions/373858/is-the-optimization-of-the-gaussian-vae-well-posed">this post</a>). Note that in the encoder network, the prior <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D(%5Ctextbf%7Bz%7D)"> is used to constrain the encoder distribution (i.e., the mean and variance).</p></li>
<li><p><em>Gaussian distribution with identity as covariance variance</em> <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Csim%20%5Cmathcal%7BN%7D%20%5Cleft(%20%5Ctextbf%7Bx%7D%5E%5Cprime%20%7C%20%5Cboldsymbol%7B%5Cmu%7D_D%5E%7B(i)%7D%20,%20%5Ctextbf%7BI%7D%20%5Cright)"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Clog_e%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%7C%20%5Ctextbf%7Bz%7D%5E%7B(i,l)%7D%5Cright)%20=%0A-%20%5Cfrac%20%7B1%7D%7B2%7D%5Csum_%7Bk=1%7D%5E%7BD%7D%20%5Cleft(%20x_k%5E%7B(i)%7D%20%20-%0A%5Cmu_%7BD_k%7D%5E%7B(i)%7D%5Cright)%5E2%20+%20%5Ctext%7Bconst%7D%0A"></p>
<p>with the original observation <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cin%20%5Cmathbb%7BR%7D%5E%7BD%7D">. In this case the reconstruction accuracy is proportional to the negative mean squarred error which is typically used as the loss function in standard autoencoders.</p>
<!-- https://stats.stackexchange.com/questions/373858/is-the-optimization-of-the-gaussian-vae-well-posed  --></li>
<li><p><em>Bernoulli distribution</em> <img src="https://latex.codecogs.com/png.latex?p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20%5Csim%5Ctext%7BBern%7D%20%5Cleft(%5Ctextbf%7Bx%7D%5E%5Cprime%20%7C%20%5Cboldsymbol%7B%5Cmu%7D_D%5E%7B(i)%7D%20%5Cright)%20=%20%5Cprod_%7Bk=1%7D%5E%7BD%7D%20%5Cleft(%20%5Cmu_%7BD_k%7D%5E%7B(i)%7D%5Cright)%5E%7Bx_k%5E%5Cprime%7D%20%5Cleft(%201%20-%20%5Cmu_%7BD_k%7D%5E%7B(i)%7D%5Cright)%5E%7B1%20-%20x_k%5E%5Cprime%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%20%5Clog_e%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%5Cleft(%0A%5Ctextbf%7Bx%7D%5E%7B(i)%7D%7C%20%5Ctextbf%7Bz%7D%5E%7B(i,l)%7D%5Cright)%20=%20%5Csum_%7Bk=1%7D%5E%7BD%7D%20%5Cleft(%0A%20%20%20x_k%5E%7B(i)%7D%20%5Cln%20%5Cleft(%20%5Cmu_%7BD_k%7D%5E%7B(i)%7D%20%5Cright)%20+%20%5Cleft(1%20-%20x_k%5E%7B(i)%7D%0A%20%20%20%5Cright)%20%5Cln%20%5Cleft(%201%20-%20%5Cmu_%7BD_k%7D%5E%7B(i)%7D%20%5Cright)%20%5Cright)%0A"></p>
<p>with the original observation <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5E%7B(i)%7D%20%5Cin%20%5C%7B0,%201%5C%7D%5E%7BD%7D">. In this case the reconstruction accuracy equals the negative binary cross entropy loss. Note that there are plenty of VAE implementations that use the binary cross entropy loss on non-binary observations, see discussions in <a href="https://stats.stackexchange.com/questions/394582/why-is-binary-cross-entropy-or-log-loss-used-in-autoencoders-for-non-binary-da">this thread</a>.</p></li>
</ul>
<p>To put this into practice, below is a simple VAE Python class which will be used to compare the different decoder distributions.</p>
<div class="cell" data-execution_count="3">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.distributions.multivariate_normal <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MultivariateNormal</span>
<span id="cb2-3"></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> VAE(nn.Module):</span>
<span id="cb2-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">r"""A simple VAE class based on Kingma and Welling</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        encoder_network:  instance of CoderNetwork class</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        decoder_network:  instance of CoderNetwork class</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        L:                number of samples used during reparameterization trick</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-13">    </span>
<span id="cb2-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, encoder_network, decoder_network, L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb2-15">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb2-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_network</span>
<span id="cb2-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> decoder_network</span>
<span id="cb2-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L</span>
<span id="cb2-19">        </span>
<span id="cb2-20">        latent_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoder_network.output_dim</span>
<span id="cb2-21">                </span>
<span id="cb2-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normal_dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MultivariateNormal(torch.zeros(latent_dim), </span>
<span id="cb2-23">                                              torch.eye(latent_dim))</span>
<span id="cb2-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb2-25">    </span>
<span id="cb2-26">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb2-27">        L <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.L</span>
<span id="cb2-28">        </span>
<span id="cb2-29">        z, mu_E, log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encode(x, L)</span>
<span id="cb2-30">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># regularization term per batch, i.e., size: (batch_size)</span></span>
<span id="cb2-31">        regularization_term <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu_E<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-32">                                       <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> torch.exp(log_var_E)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-33">        </span>
<span id="cb2-34">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upsample x and reshape</span></span>
<span id="cb2-35">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-36">        x_ups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.repeat(L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).view(batch_size, L, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)    </span>
<span id="cb2-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian'</span>:</span>
<span id="cb2-38">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mu_D, log_var_D have shape (batch_size, L, output_dim)</span></span>
<span id="cb2-39">            mu_D, log_var_D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z)</span>
<span id="cb2-40">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reconstruction accuracy per batch, i.e., size: (batch_size)</span></span>
<span id="cb2-41">            recons_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>L) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>(log_var_D.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-42">               <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>torch.exp(log_var_D))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>((x_ups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu_D)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-43">                         ).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I-Gaussian'</span>:</span>
<span id="cb2-45">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mu_D has shape (batch_size, L, output_dim)</span></span>
<span id="cb2-46">            mu_D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z)</span>
<span id="cb2-47">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reconstruction accuracy per batch, i.e., size: (batch_size)</span></span>
<span id="cb2-48">            recons_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>L) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> ((x_ups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu_D)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb2-49">                                            ).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb2-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bernoulli'</span>:</span>
<span id="cb2-51">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mu_D has shape (batch_size, L, output_dim)</span></span>
<span id="cb2-52">            mu_D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decode(z)     </span>
<span id="cb2-53">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reconstruction accuracy per batch, i.e., size: (batch_size)</span></span>
<span id="cb2-54">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># corresponds to the negative binary cross entropy loss (BCELoss)</span></span>
<span id="cb2-55">            recons_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>L) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (x_ups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.log(mu_D) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> </span>
<span id="cb2-56">                                  (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> x_ups) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> torch.log(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu_D)</span>
<span id="cb2-57">                                  ).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-58">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> regularization_term.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> recons_acc.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb2-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> loss</span>
<span id="cb2-60">    </span>
<span id="cb2-61">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x, L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb2-62">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get encoder distribution parameters</span></span>
<span id="cb2-63">        mu_E, log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoder(x)</span>
<span id="cb2-64">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample noise variable L times for each batch</span></span>
<span id="cb2-65">        batch_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb2-66">        epsilon <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normal_dist.sample(sample_shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(batch_size, L, ))</span>
<span id="cb2-67">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># upsample mu_E, log_var_E and reshape</span></span>
<span id="cb2-68">        mu_E_ups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_E.repeat(L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).view(batch_size, L, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) </span>
<span id="cb2-69">        log_var_E_ups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> log_var_E.repeat(L, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).view(batch_size, L, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-70">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get latent variable by reparametrization trick</span></span>
<span id="cb2-71">        z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mu_E_ups <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> torch.sqrt(torch.exp(log_var_E_ups)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> epsilon</span>
<span id="cb2-72">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> z, mu_E, log_var_E</span>
<span id="cb2-73">    </span>
<span id="cb2-74">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, z):</span>
<span id="cb2-75">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get decoder distribution parameters</span></span>
<span id="cb2-76">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian'</span>:</span>
<span id="cb2-77">            mu_D, log_var_D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(z)</span>
<span id="cb2-78">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mu_D, log_var_D</span>
<span id="cb2-79">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I-Gaussian'</span>:</span>
<span id="cb2-80">            mu_D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(z)</span>
<span id="cb2-81">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mu_D</span>
<span id="cb2-82">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder.coder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bernoulli'</span>:</span>
<span id="cb2-83">            mu_D <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.decoder(z)</span>
<span id="cb2-84">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> mu_D</span>
<span id="cb2-85">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span></code></pre></div>
</details>
</div>
<p>Let’s train the three different VAEs on the MNIST digits dataset</p>
<div class="cell" data-execution_count="4">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torchvision <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datasets, transforms</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader</span>
<span id="cb3-3"></span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train(decoder_type, dataset, x_dim, hid_dim, z_dim, batch_size, L, epochs):</span>
<span id="cb3-6">    encoder_network <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CoderNetwork(input_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_dim, </span>
<span id="cb3-7">                                   hidden_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hid_dim, </span>
<span id="cb3-8">                                   output_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>z_dim,</span>
<span id="cb3-9">                                   coder_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian'</span>)</span>
<span id="cb3-10">    decoder_network <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CoderNetwork(input_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>z_dim, </span>
<span id="cb3-11">                                   hidden_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hid_dim, </span>
<span id="cb3-12">                                   output_dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_dim,</span>
<span id="cb3-13">                                   coder_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>decoder_type)</span>
<span id="cb3-14">    </span>
<span id="cb3-15">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> VAE(encoder_network, decoder_network, L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>L)</span>
<span id="cb3-16">    data_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dataset, batch_size, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-17">    optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>)</span>
<span id="cb3-18">    </span>
<span id="cb3-19">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Start training with </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> decoder distribution</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(decoder_type))</span>
<span id="cb3-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Epoch </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(epoch, epochs))</span>
<span id="cb3-22">        avg_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb3-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> counter, (mini_batch_data, label) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(data_loader):</span>
<span id="cb3-24">            </span>
<span id="cb3-25">            model.zero_grad()</span>
<span id="cb3-26">            </span>
<span id="cb3-27">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(mini_batch_data.view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, x_dim))</span>
<span id="cb3-28">            loss.backward()</span>
<span id="cb3-29">            optimizer.step()</span>
<span id="cb3-30">            </span>
<span id="cb3-31">            avg_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset)</span>
<span id="cb3-32">            </span>
<span id="cb3-33">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> (counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader):</span>
<span id="cb3-34">                batch_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss.item() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(mini_batch_data)</span>
<span id="cb3-35">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">] batch loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.2f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(counter <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb3-36">                                                            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(data_loader),</span>
<span id="cb3-37">                                                            batch_loss),</span>
<span id="cb3-38">                      end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-39">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">Average loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{:.3f}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(avg_loss)) </span>
<span id="cb3-40">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Done!</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-41">    trained_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb3-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> trained_VAE</span>
<span id="cb3-43"></span>
<span id="cb3-44">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datasets.MNIST(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/'</span>, transform<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>transforms.ToTensor(), download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-45">x_dim, hid_dim, z_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span></span>
<span id="cb3-46">batch_size, L, epochs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-47"></span>
<span id="cb3-48">Bernoulli_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bernoulli'</span>, dataset, x_dim, hid_dim, z_dim, </span>
<span id="cb3-49">                      batch_size, L, epochs)</span>
<span id="cb3-50">Gaussian_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Gaussian'</span>, dataset, x_dim, hid_dim, z_dim, </span>
<span id="cb3-51">                     batch_size, L, epochs)</span>
<span id="cb3-52">I_Gaussian_VAE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I-Gaussian'</span>, dataset, x_dim, hid_dim, z_dim, </span>
<span id="cb3-53">                       batch_size, L, epochs)</span></code></pre></div>
</details>
</div>
<!-- Note how the Gaussian distribution with diagonal covariance structure -->
<!-- (i.e., `Gaussian`) as decoder distribution approaches huge negative -->
<!-- losses. These would further increase towards negative infinity when -->
<!-- training for more epochs. In contrast, the `Bernoulli` and `I-Gaussian` -->
<!-- distribution losses clearly saturate. -->
<p>Let’s look at the differences in the reconstructions:</p>
<div class="cell" data-execution_count="5">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb4-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>matplotlib inline</span>
<span id="cb4-3"></span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_results(trained_model, dataset, n_samples):</span>
<span id="cb4-6">    decoder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_model.decoder.coder_type</span>
<span id="cb4-7">    </span>
<span id="cb4-8">    fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">14</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb4-9">    fig.suptitle(decoder_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' Distribution: Observations (top row) and '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb4-10">                 <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'their reconstructions (bottom row)'</span>)</span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i_sample <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n_samples):</span>
<span id="cb4-12">        x_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset[i_sample][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].view(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>)</span>
<span id="cb4-13">        </span>
<span id="cb4-14">        z, mu_E, log_var_E <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_model.encode(x_sample, L<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> decoder_type <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bernoulli'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'I-Gaussian'</span>]:</span>
<span id="cb4-16">            x_prime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_model.decode(z)</span>
<span id="cb4-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb4-18">            x_prime <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trained_model.decode(z)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb4-19">    </span>
<span id="cb4-20">        plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_samples, i_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-21">        plt.imshow(x_sample.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>).data.numpy())</span>
<span id="cb4-22">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-23">        plt.subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_samples, i_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_samples)</span>
<span id="cb4-24">        plt.imshow(x_prime.view(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>).data.numpy())</span>
<span id="cb4-25">        plt.axis(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'off'</span>)</span>
<span id="cb4-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span></span>
<span id="cb4-27"></span>
<span id="cb4-28"></span>
<span id="cb4-29">n_samples <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb4-30"></span>
<span id="cb4-31">plot_results(Bernoulli_VAE, dataset, n_samples)</span>
<span id="cb4-32">plot_results(Gaussian_VAE, dataset, n_samples)</span>
<span id="cb4-33">plot_results(I_Gaussian_VAE, dataset, n_samples)</span></code></pre></div>
</details>
</div>
</section>
<section id="acknowledgement" class="level2">
<h2 class="anchored" data-anchor-id="acknowledgement">Acknowledgement</h2>
<p><a href="https://dfdazac.github.io/">Daniel Daza’s</a> blog was really helpful and the presented code is highly inspired by his <a href="https://dfdazac.github.io/01-vae.html">summary on VAEs</a>.</p>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The true posterior could be calculated via Bayes theorem <img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D%7C%5Ctextbf%7Bx%7D)%20=%20%5Cfrac%20%7Bp_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bx%7D%7C%5Ctextbf%7Bz%7D)%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D)%7D%20%7B%5Cint%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bx%7D%7C%5Ctextbf%7Bz%7D)%20p_%7B%5Cboldsymbol%7B%5Ctheta%7D%7D%20(%5Ctextbf%7Bz%7D)%20d%5Ctextbf%7Bz%7D%7D">. However, the integral in the denominator is intractable in practice.↩︎</p></li>
<li id="fn2"><p>Note that the variance is by definition greater than zero. Furthermore, the variance is typically relatively small. Thus, using the logarithmized variance as network output increases stability and performance (see <a href="https://stats.stackexchange.com/a/353222">this answer</a> for details).↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>reimplementation</category>
  <category>VAE</category>
  <category>generative</category>
  <guid>https://borea17.github.io/paper_summaries/auto-encoding_variational_bayes/index.html</guid>
  <pubDate>Fri, 24 Jul 2020 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Schema Networks: Zero-shot Transfer with a Generative Causal Model of Intuitive Physics</title>
  <dc:creator>borea17 </dc:creator>
  <link>https://borea17.github.io/paper_summaries/schema_networks/index.html</link>
  <description><![CDATA[ 




<p><a href="https://arxiv.org/abs/1706.04317">Kansky et al.&nbsp;(2017)</a> showed remarkable results of zero-shot transfer in several variations of Breakout by introducing Schema Networks as a generative model for object-oriented reinforcement learning and planning. This model incorporates objects as <em>entities</em>, represents local cause-effect relationships including one or more entities and is based on Probabilistic Graphical Models (PGMs). Due to its foundation in PGMs, Schema Networks support flexible inference and search strategies for planning.</p>
<section id="model-description" class="level2">
<h2 class="anchored" data-anchor-id="model-description">Model Description</h2>
<p>Building upon the ideas of object-oriented Markov decision processes (OO-MDPs), states are represented as a list of entities where each entity can be understood as a different instantiation from the same class (i.e., all entities share the same attributes). Additionally, the attributes, actions and rewards are binarized using discretization and one-hot encoding, see image below. This representation comes from a handcrafted image parser with the handwavy argument that in practice a vision module could be responsible for this task.</p>
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/schema_networks/img/exemplary_state_representation.png" title="Exemplary State Representation" class="img-fluid" alt="Exemplary State Representation"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Exemplary State Representation in a Schema Network</strong>. A handcrafted image parser converts an image (left) into the state representation (right), where filled green circles indicate that the binary variable is set to <em>True</em>.</td>
</tr>
</tbody>
</table>
<p><a href="https://arxiv.org/abs/1706.04317">Kansky et al.&nbsp;(2017)</a> define 53 attributes for each entity in the Breakout domain (21 for bricks, 30 for the paddle, 1 for walls, 1 for the ball). However, they do not elaborate on what these attributes describe exactly. Furthermore, each pixel is identified as a part of an object and assigned the corresponding attributes. Accordingly, their representation could rather be understood as a 53-channel image where each entry can either be 0 or 1, e.g., one layer showing the walls. In this form, the entity-based state representation can also be provided to other algorithms such as A3C.</p>
<p>Similiar to OO-MDPs, state transitions are determined by a change of entity-attributes. However, due to the specific representation in Schema Networks, entity-attributes can only be active or inactive (with an associated probability). An attribute becomes activated if a <em>grounded schema</em><sup>1</sup> is active. Grounded schemas can include a variable size of entity attributes from a variable number of entities and may include one or more actions. Thus, these schemas can be interpreted as local cause-effect relationships. Formally, a grounded schema <img src="https://latex.codecogs.com/png.latex?%5Cphi%5E%7Bk%7D"> is a binary variable that becomes activated via a probabilistic AND over the binary variables <img src="https://latex.codecogs.com/png.latex?v_1,%20%5Cdots,%20v_n"> that are included in it:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Cphi%5E%7Bk%7D%20=%20%5Ctext%7BAND%7D%20(v_1,%20%5Cdots,%20v_n)%20=%20%5Cprod_%7Bi=1%7D%5En%20P(v_i%20=%201).%0A%5Cend%7Balign%7D%0A"></p>
<p>The binary variables <img src="https://latex.codecogs.com/png.latex?v_1,%20%5Cdots,%20v_n"> may be entity-attributes<sup>2</sup> or actions, see image below.</p>
<p>Multiple grounded schemas can predict the same attribute which is formalized through an OR factor, e.g., let <img src="https://latex.codecogs.com/png.latex?%5Calpha_%7Bi,%20j%7D%5E%7B(t+1)%7D"> denote the <img src="https://latex.codecogs.com/png.latex?j%5E%7Bth%7D"> attribute of the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> entity at time <img src="https://latex.codecogs.com/png.latex?t+1"> and assume there are <img src="https://latex.codecogs.com/png.latex?n"> grounded schemas that predict this entity attribute. Then, this formalizes into</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Calpha_%7Bi,j%7D%5E%7B(t+1)%7D%20=%20%5Ctext%7BOR%7D%20(%5Cphi_%7Bi,j%7D%5E%7B1%7D,%20%5Cdots,%20%5Cphi_%7Bi,%20j%7D%5E%7Bn%7D)%20=%201%20-%20%5Cprod_%7Bk=1%7D%5En%20%20%5Cbig(1%20-%20P(%5Cphi_%7Bi,j%7D%5Ek)%5Cbig).%0A%5Cend%7Balign%7D%0A"></p>
<p><a href="https://arxiv.org/abs/1706.04317">Kansky et al.&nbsp;(2017)</a> divide entity attributes into two classes: * <em>Positional Attributes</em>: These attributes correspond to discrete positions. * <em>Non-Positional Attributes</em>: The semantic meaning of those attributes is unknown to the model such that they may encode completely different things, e.g., color and shape.</p>
<p>A <strong>self-transition</strong> variable is introduced for <em>positional attributes</em> which represents the probability that a position attribute will remain active in the next time step when no schema predicts a change from that position. Note that through this mechanism, they include the bias that an object cannot be at multiple positions at the same time.</p>
<!-- A problem of ambiguity arises, when entity-attributes are categorical and should -->
<!-- remain active without a grounded schema[^3]. To circumvent this problem, -->
<!-- [Kansky et al. (2017)](https://arxiv.org/abs/1706.04317) introduce a -->
<!-- *self-transition* gate that allows an entity-attribute to remain -->
<!-- active in the next time step when no schema predicts a change from -->
<!-- that entity-attribute, see image below. -->
<table class="table">
<colgroup>
<col style="width: 100%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/schema_networks/img/transition_dynamics.png" title="Transition Dynamics" class="img-fluid" alt="Transition Dynamics"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Transition dynamics in Schema Networks are governed by changes in entity-attributes due to activated grounded schemas. In this example all relevant gates are shown to illustrate the state transition dynamics via this mechanics. Note that there are two schemas that predict the same behavior, i.e., only one input in OR is necessary to activate <img src="https://latex.codecogs.com/png.latex?y=1">.</td>
</tr>
</tbody>
</table>
<p>Formally, a self transition is a NOR factor over the grounded schemas that predict a change from a position attribute (i.e., the grounded schemas that predict towards a different position) combined with an AND factor over the NOR factor and the position attribute at the current time step. E.g., let <img src="https://latex.codecogs.com/png.latex?%5Calpha_%7Bi,j%7D%5E%7Bt%7D"> denote the <img src="https://latex.codecogs.com/png.latex?j%5E%7Bth%7D"> position attribute of the the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> entity at time <img src="https://latex.codecogs.com/png.latex?t"> and assume that the set <img src="https://latex.codecogs.com/png.latex?%5C%7B%5Cphi%5E1,%20%5Cdots,%20%5Cphi%5E%7Bn%7D%20%5C%7D"> includes all schemas predicting towards a different position of that entity. Then, the self-transition is formalized as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5CLambda_%7Bi,j%7D%5E%7Bt+1%7D%0A%20%20=%20%5Ctext%7BAND%7D%20%5Cbig(%5Clnot%20%5Cphi%5E%7B1%7D,%20%5Cdots,%20%5Clnot%20%5Cphi%5E%7Bn%7D,%20%5Calpha_%7Bi,j%7D%5E%7Bt%7D%20%5Cbig).%0A%5Cend%7Balign%7D%0A"></p>
<p>Finally, the transition function in this model can be factorized as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20T%5Cleft(s%5E%7B(t+1)%7D%20%7C%20s%5E%7B(t)%7D,%20a%5E%7B(t)%7D%5Cright)%20=%20%5Cprod_%7Bi=1%7D%5EN%20%5Cprod_%7Bj=1%7D%5EM%20T_%7Bi,%20j%7D%20%5Cleft(s_%7Bi,%20j%7D%5E%7B(t+1)%7D%7Cs%5E%7B(t)%7D,%20a%5E%7B(t)%7D%5Cright),%0A%5Cend%7Balign%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?T_%7Bi,j%7D"> denotes the transition probability of the <img src="https://latex.codecogs.com/png.latex?j%5E%7Bth%7D"> attribute of the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> entity towards its value defined in <img src="https://latex.codecogs.com/png.latex?s_%7Bi,j%7D%5E%7B(t+1)%7D">. The entity attribute <img src="https://latex.codecogs.com/png.latex?s_%7Bi,j%7D%5E%7B(t+1)%7D"> is by definition activated if one of its grounded schema is active or if a self-transition occured, thus the entity-attribute transition probability is defined as</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20T_%7Bi,j%7D%20%5Cleft(%20s_%7Bi,j%7D%5E%7B(t+1)%7D%20%7C%20s%5E%7B(t)%7D,%20a%5E%7B(t)%7D%5Cright)%20=%20%5Ctext%7BOR%7D%5Cleft(%20%5Cphi%5E%7Bk_1%7D,%20%5Cdots,%20%5Cphi%5E%7Bk_Q%7D,%20%5CLambda_%7Bi,j%7D%20%5Cright),%0A%5Cend%7Balign%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5CLambda_%7Bi,j%7D"> denotes the self-transition variable of <img src="https://latex.codecogs.com/png.latex?s_%7Bi,j%7D"> and <img src="https://latex.codecogs.com/png.latex?k_1,%20%5Cdots,%20k_Q"> are the indices of all grounded schemas that predict <img src="https://latex.codecogs.com/png.latex?s_%7Bi,j%7D">. Note that although all variables are defined as binary variables, this model could still be used for non-deterministic environments.</p>
<p>To increase the generality of their model such that the attribute change of two entities is described by the same schema, <a href="https://arxiv.org/abs/1706.04317">Kansky et al. (2017)</a> introduce the term <em>ungrounded schema</em> or <em>template</em>. An ungrounded schema can be understood as template for specific grounded schemas, i.e., it describes a grounded schema where the included entity-attributes are assigned relative to the position of the entity-attribute that should be predicted.</p>
</section>
<section id="learning-the-model" class="level2">
<h2 class="anchored" data-anchor-id="learning-the-model">Learning the Model</h2>
<p>The Schema Network is essentially a factor graph that is aimed to be a probabilistic simulator of the game environment using the aforementioned representation. Assuming that the environment dynamics can be represented by some Schema Network, learning the model comes down to structure learning in graphical models. <a href="https://arxiv.org/abs/1706.04317">Kansky et al.&nbsp;(2017)</a> preprocess a sequence of observations (dataset of <em>state-action-reward-new state</em> tuples over time) into a convenient representation, define a NP-hard optimization problem based on this representation as the optimal solution and retrieve the schemas (and Schema Network) through solving the optimization problem approximately using linear programming (LP) relaxations.</p>
<section id="notation" class="level3">
<h3 class="anchored" data-anchor-id="notation">Notation</h3>
<p>Let <img src="https://latex.codecogs.com/png.latex?%5Calpha%5C_%7Bi,j%7D%5E%7B(t)%7D"> denote the <img src="https://latex.codecogs.com/png.latex?j%5E%7Bth%7D"> attribute of the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> entity at time <img src="https://latex.codecogs.com/png.latex?t"> and let <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Be%7D%5C_i%5E%7B(t)%7D%20%5Cin%20%5C%5C%7B0,%201%5C%5C%7D%5E%7BM%7D"> be an<br>
<img src="https://latex.codecogs.com/png.latex?M">-dimensional binary vector representing all entity-attributes values of the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> entity at time <img src="https://latex.codecogs.com/png.latex?t">, i.e., <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Be%7D%5C_i%5E%7B(t)%7D%20=%20%5Cbegin%7Bbmatrix%7D%5Calpha%5C_%7Bi,1%7D%5E%7B(t)%7D%20&amp;%20%5Cdots%20&amp;%20%5Calpha%5C_%7Bi,M%7D%5E%7B(t)%7D%20%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D"> where <img src="https://latex.codecogs.com/png.latex?M"> denotes the number of entity-attributes.</p>
<p>Let <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cbeta%7D%5C_%7Bi%7D%5E%7B(t)%7D%5Cin%20%5C%5C%7B0,1%5C%5C%7D%5EE"> be a row vector representing the attribute values of the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> entity and the entity-attributes of the <img src="https://latex.codecogs.com/png.latex?R-1"> (fixed radius) spatial neighbors, i.e., <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cbeta%7D_%7Bi%7D%5E%7B(t)%7D%20=%20%5Cbegin%7Bbmatrix%7D%20%5Ctextbf%7Be%7D%5C_%7Bi%7D%5E%7B(t)%7D%20&amp;%20%5Ctextbf%7Be%7D%5C_%7Bi+1%7D%5E%7B(t)%7D%20&amp;%20%5Cdots%20&amp;%20%5Ctextbf%7Be%7D%5C_%7BR-1%7D%5E%7B(t)%7D%20%5Cend%7Bbmatrix%7D"> has length <img src="https://latex.codecogs.com/png.latex?E=M(R-1)%20+%20M%20=%20MR">.</p>
<p>Suppose there are <img src="https://latex.codecogs.com/png.latex?N"> entities observed for <img src="https://latex.codecogs.com/png.latex?%5Ctau"> timesteps. Then, let <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D%5Cin%5C%5C%7B0,1%5C%5C%7D%5E%7BD%5Ctimes%20E%7D"> be a binary matrix where each row consists of a <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Cbeta%7D%5C_%7Bi%7D%5E%7B(t)%7D"> and there are <img src="https://latex.codecogs.com/png.latex?D=N%5Ccdot%20%5Ctau"> rows (all entities and time steps). Similarly, let <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7By%7D%5Cin%5C%5C%7B0,%201%5C%5C%7D%5ED"> be a binary vector where each entry refers to the future attribute value <img src="https://latex.codecogs.com/png.latex?%5Calpha%5C_%7Bi,j%7D%5E%7B(t+1)%7D"> corresonding to the a row of <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D"> with entity <img src="https://latex.codecogs.com/png.latex?i"> and time <img src="https://latex.codecogs.com/png.latex?t">, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%20%20%5Ctextbf%7BX%7D%20&amp;=%0A%20%20%5Cbegin%7Bbmatrix%7D%0A%20%20%20%20%5Cbegin%7Bbmatrix%7D%20%5Cboldsymbol%7B%5Cbeta%7D_%7B1%7D%5E%7B(1)%7D%20&amp;%20%5Cdots%20&amp;%20%5Cboldsymbol%7B%5Cbeta%7D_%7BN%7D%5E%7B(1)%7D%20%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D%20%5C%5C%0A%20%20%20%20%5Cvdots%5C%5C%0A%20%20%20%20%5Cbegin%7Bbmatrix%7D%20%5Cboldsymbol%7B%5Cbeta%7D_%7B1%7D%5E%7B(%5Ctau)%7D%20&amp;%20%5Cdots%20&amp;%20%5Cboldsymbol%7B%5Cbeta%7D_%7BN%7D%5E%7B(%5Ctau)%7D%20%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D%0A%20%20%5Cend%7Bbmatrix%7D%20,%20%5Cquad%20%5Ctextbf%7By%7D%20=%0A%20%20%20%5Cbegin%7Bbmatrix%7D%0A%5Cbegin%7Bbmatrix%7D%20%5Calpha_%7B1,j%7D%5E%7B(2)%7D%20&amp;%20%5Cdots%20&amp;%20%5Calpha_%7BN,j%7D%5E%7B(2)%7D%20%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D%0A%5C%5C%20%5Cvdots%20%5C%5C%0A%5Cbegin%7Bbmatrix%7D%20%5Calpha_%7B1,j%7D%5E%7B(%5Ctau+1)%7D%20&amp;%20%5Cdots%20&amp;%20%5Calpha_%7BN,j%7D%5E%7B(%5Ctau+1)%7D%20%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D%0A%20%20%20%20%5Cend%7Bbmatrix%7D%0A%5Cend%7Balign*%7D%0A"></p>
</section>
<section id="learning-problem" class="level3">
<h3 class="anchored" data-anchor-id="learning-problem">Learning Problem</h3>
<p>The goal is to predict <img src="https://latex.codecogs.com/png.latex?%5Calpha%5C_%7Bi,j%7D%5E%7B(t+1)%7D"> based on the entity-attributes of itself and its spatial neighbors. Using the introduced notation, the learning problem can be defined as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Ctextbf%7By%7D%20=%20f_%7B%5Ctextbf%7BW%7D%7D%20(%5Ctextbf%7BX%7D)%20=%20%5Coverline%7B%5Coverline%7B%5Ctextbf%7BX%7D%7D%20%5Ctextbf%7BW%7D%7D%20%5Ctextbf%7B1%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?f%5C_%7B%5Ctextbf%7BW%7D%7D"> denotes the desired function of <em>ungrounded schemas</em> which is applied row-wise to the argument <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D"> to produce either active or inactive grounded schemas. <img src="https://latex.codecogs.com/png.latex?f%5C_%7B%5Ctextbf%7BW%7D%7D"> is parametrized by a binary matrix <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BW%7D%20%5Cin%20%5C%5C%7B0,%201%5C%5C%7D%5E%7BE%20%5Ctimes%20L%7D"> with each column representing one ungrounded schema for a maximum of <img src="https://latex.codecogs.com/png.latex?L"> schemas. Each element that is set to 1 in a column of <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BW%7D"> indicates that for this schema the corresponding input attribute (from <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BX%7D">) is necessary for an activated grounded schema. On the right-hand side of the equation above all variables and operations follow Boolean logic: addition corresponds to <code>OR</code>ing and overlining to negation.</p>
<blockquote class="blockquote">
<p>E.g., let <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bw%7D%5C_i%20=%20%5Cbegin%7Bbmatrix%7D%20w%5C_%7Bi_1%7D%20&amp;%20%5Cdots%20&amp;%20w%5C_%7Bi_%20E%7D%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D"> denote the <img src="https://latex.codecogs.com/png.latex?i%5E%7Bth%7D"> column of <img src="https://latex.codecogs.com/png.latex?%5Chspace%7B0.1cm%7D%5Ctextbf%7BW%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D_r%20=%20%5Cbegin%7Bbmatrix%7D%20x%5C_%7Br_1%7D%20&amp;%20%5Cdots%20&amp;%20x%5C_%7Br_E%7D%20%5Cend%7Bbmatrix%7D"> be the <img src="https://latex.codecogs.com/png.latex?r%5E%7Bth%7D"> row of <img src="https://latex.codecogs.com/png.latex?%5Chspace%7B0.1cm%7D%5Ctextbf%7BX%7D">. Then, the (dot) product of the two vectors leads to</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%5Ctextbf%7Bx%7D_r%20%5Ctextbf%7Bw%7D_i%20=%20%5Csum_%7Bk=1%7D%5E%7BE%7D%20x_%7Br_k%7D%20%5Ccdot%20w_%7Bi_k%7D%20=%20%5Ctext%7BOR%7D%20%5Cleft(%20x_%7Br_1%7D%20w_%7Bi_1%7D,%20%5Cdots,%20x_%7Br_E%7D%20w_%7Bi_E%7D%20%5Cright),%0A%5Cend%7Balign%7D%0A"></p>
<p>in this form the corresponding grounded schema would be activated as soon as one <em>precondition</em> is satisfied, i.e., as soon as for one <img src="https://latex.codecogs.com/png.latex?w%5C_%7Bi_j%7D%20=%201"> the corresponding attribute variable is also <img src="https://latex.codecogs.com/png.latex?x%5C_%7Bi_j%7D=1">.</p>
</blockquote>
<p>A <strong>grounded schema</strong> <img src="https://latex.codecogs.com/png.latex?%5Cphi"> is defined through a logical AND over the necessary attributes (i.e., all preconditions)<sup>3</sup> <!-- , thus the product needs to be rewritten as follows --></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Cphi%20=%20%5Ctext%7BAND%7D%5Cleft(%20%5C%7Bx_%7Br_j%7D%20%5Cmid%20%5Cforall%20j:%20w_%7Bi_j%7D%20=%201%20%5C%7D%20%20%5Cright)%20=%20%5Ctext%7BNot%7D%20%5Cleft(%0A%20%20%5Ctext%7BOR%7D%20%5Cleft(%5Ctext%7BNot%20%7D%20%5C%7Bx_%7Br_j%7D%20%5Cmid%20%5Cforall%20j:%20w_%7Bi_j%7D%20=%201%20%5C%7D%20%5Cright)%20%5Cright)%0A%20%20=%20%5Coverline%7B%5Coverline%7B%5Ctextbf%7Bx%7D%7D_r%20%5Ctextbf%7Bw%7D_i%7D.%0A%5Cend%7Balign%7D%0A"></p>
<p>This equation states how one individual schema (<img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bw%7D_%7Bi%7D">) is applied to one attribute vector <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D_R">. The first equation of this section summarizes this result into a matrix-matrix multiplication.</p>
<p>At the end all outputs of each individual schema are <code>OR</code>ed to produce the final prediction for each attribute (corresponding to the provided attribute vector). This is done through multiplication with the identity tensor <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7B1%7D%20%5Cin%20%5C%5C%7B1%5C%5C%7D%5E%7BL%20%5Ctimes%20D%7D">. Remind that this is in alignment with the entity-attribute transition probability definition for <em>non-positional</em> attributes</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20T_%7Bi,j%7D%20%5Cleft(%20s_%7Bi,j%7D%5E%7B(t+1)%7D%20%7C%20s%5E%7B(t)%7D,%20a%5E%7B(t)%7D%5Cright)%20=%20%5Ctext%7BOR%7D%5Cleft(%20%5Cphi%5E%7Bk_1%7D,%20%5Cdots,%20%5Cphi%5E%7Bk_Q%7D%5Cright)%0A%5Cend%7Balign%7D%0A"></p>
<p>As stated above, for <em>positional attributes</em> a self-transition <img src="https://latex.codecogs.com/png.latex?%5CLambda_%7Bi,j%7D"> is added to allow these attributes to remain active when no change is predicted. Unfortunately, <a href="https://arxiv.org/abs/1706.04317">Kansky et al.&nbsp;(2017)</a> did not elaborate on self-transitions in the learning problem. Thus, we can only guess how they are included. My idea would be to preprocess the data such that only positional attributes that changed (either from 0 to 1 or vice versa) are included in the learning problem. In the prediction phase, we then simply group all positional grounded schemas and apply the self-transition as a post-processing step.</p>
</section>
<section id="objective-function" class="level3">
<h3 class="anchored" data-anchor-id="objective-function">Objective Function</h3>
<p>As there might be multiple Schemas that explain certain behaviors, the objective function is aimed to minimize the prediction error while keeping ungrounded schemas as simple as possible<sup>4</sup>:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Cmin_%7B%5Ctextbf%7BW%7D%7D%20J(%5Ctextbf%7BW%7D)%20=%20%5Cmin_%7B%5Ctextbf%7BW%7D%7D%20%5Cunderbrace%7B%5Cfrac%20%7B1%7D%7BD%7D%20%5Ccdot%20%5CBigg%7C%20%5Ctextbf%7By%7D%20-%0A%20%20f_%7B%5Ctextbf%7BW%7D%7D%20(%5Ctextbf%7BX%7D)%20%5CBigg%7C_1%20%7D_%7B%5Ctext%7BPrediction%20Error%7D%7D+%0A%20%20%5Cunderbrace%7BC%20%5Ccdot%20%5CBigg%7C%20%5Ctextbf%7BW%7D%20%5CBigg%7C_1%7D_%7B%5Ctext%7BModel%20Complexity%7D%7D,%0A%5Cend%7Balign%7D%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?C"> is a hyperparameter that can be used to control the trade-off between the complexity of the model and the accuracy of the predictions. This is a NP-hard optimization problem, since <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BW%7D%5Cin%20%5C%5C%7B0,1%5C%5C%7D%5E%7BE%5Ctimes%20L%7D"> is a binary matrix. Furthermore, the search space is combinatorially large, i.e., there are <img src="https://latex.codecogs.com/png.latex?2%5E%7BE%20%5Ccdot%20L%7D"> possible realizations of <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BW%7D">. Hence, finding the optimal solution <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BW%7D%5E%7B*%7D"> is infeasible (for larger environments such as Breakout).</p>
</section>
<section id="schema-learning" class="level3">
<h3 class="anchored" data-anchor-id="schema-learning">Schema Learning</h3>
<p><a href="https://arxiv.org/abs/1706.04317">Kansky et al.&nbsp;(2017)</a> search for an approximate solution with the desired features (low prediction error and low model complexity) using a greedy algorithm of linear programming (LP) relaxations. This algorithm works as follows</p>
<ol type="1">
<li><p>Start with an empty set of schemas, i.e., <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7BW%7D%20=%20%5Ctextbf%7B0%7D">.</p></li>
<li><p>Greedily select a schema <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bw%7D"> that perfectly predicts a cluster of input samples:</p>
<ol type="a">
<li><p>Randomly select an input sample <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bx%7D%5C_n"> for which <img src="https://latex.codecogs.com/png.latex?y_n%20=%201"> and <img src="https://latex.codecogs.com/png.latex?f%5C_%7B%5Ctextbf%7BW%7D%7D%20(%5Ctextbf%7Bx%7D%5C_n)%20=%200">.</p></li>
<li><p>Put sample in the set <code>solved</code>, then solve the following LP</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%20%5Cbegin%7Bsplit%7D%0A%20%20%20&amp;%5Cmax_%7B%5Ctextbf%7Bw%7D%5Cin%20%5C%7B0,1%5C%7D%5ED%7D%20%5Csum_%7Bn:%20y_n%20=%201%7D%20%5Coverline%7B%20%5Coverline%7B%5Ctextbf%7Bx%7D%7D_n%20%5Ctextbf%7Bw%7D%7D%20=%0A%20%20%20%5Cmin_%7B%5Ctextbf%7Bw%7D%20%5Cin%20%5C%7B0,%201%5C%7D%5E%7BD%7D%7D%20%5Csum%20(1%20-%20%7B%5Ctextbf%7Bx%7D%7D_n%20%5Ctextbf%7Bw%7D)%20%5C%5C%0A%20%20%20&amp;%5Cquad%20%5Cquad%20%5Ctext%7Bs.t.%20%7D%20%5Cforall_%7Bn:y_n=0%7D%20%5Cquad%20(1%20-%20%5Ctextbf%7Bx%7D_n)%20%5Ctextbf%7Bw%7D%20%3E%201%20%5Cqquad%20%5Ctext%7B(no%20false%20alarms)%7D%5C%5C%0A%20%20%20&amp;%5Cqquad%20%5Cquad%20%5Chspace%7B0.3cm%7D%20%5Cforall_%7Bn%5Cin%20%5Ctext%7Bsolved%7D%7D%20%5Chspace%7B0.2cm%7D%20(1-%5Ctextbf%7Bx%7D_n)%20%5Ctextbf%7Bw%7D%20=%200%20%20%5Cqquad%20%5Ctext%7B(active%20grounded%20schema)%7D%0A%20%20%20%5Cend%7Bsplit%7D%0A%5Cend%7Balign%7D%0A"></p></li>
<li><p>Update the <code>solved</code> set, i.e., put all samples in for which <img src="https://latex.codecogs.com/png.latex?(1-%5Ctextbf%7Bx%7D_n)%20%5Ctextbf%7Bw%7D%20=%200"> in the <code>solved</code> set.</p></li>
</ol></li>
<li><p>Simplify resulting schema by making <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bw%7D"> as sparse as possible while keeping the predictions correct without introducing false alarms:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%5Cbegin%7Bsplit%7D%0A%20%20%20%20%20&amp;%5Cmin_%7B%5Ctextbf%7Bw%7D%20%5Cin%20%5C%7B0,%201%5C%7D%5ED%7D%20%5Ctextbf%7Bw%7D%5E%7B%5Ctext%7BT%7D%7D%20%5Ctextbf%7B1%7D%20%5C%5C%0A%20%20%20%20%20&amp;%5Cquad%20%5Cquad%20%5Ctext%7Bs.t.%20%7D%20%5Cforall_%7Bn:y_n=0%7D%20%5Cquad%20(1%20-%20%5Ctextbf%7Bx%7D_n)%20%5Ctextbf%7Bw%7D%20%3E%201%5C%5C%0A%20%20%20%20%20&amp;%5Cqquad%20%5Cquad%20%5Chspace%7B0.3cm%7D%20%5Cforall_%7Bn%5Cin%20%5Ctext%7Bsolved%7D%7D%20%5Chspace%7B0.2cm%7D%20(1-%5Ctextbf%7Bx%7D_n)%20%5Ctextbf%7Bw%7D%20=%200%0A%20%20%20%5Cend%7Bsplit%7D%0A%5Cend%7Balign%7D"></p></li>
<li><p>Binarize <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bw%7D"></p></li>
</ol>
</section>
</section>
<section id="planning" class="level2">
<h2 class="anchored" data-anchor-id="planning">Planning</h2>
<p>TODO: Summarize planning</p>
</section>
<section id="drawbacks" class="level2">
<h2 class="anchored" data-anchor-id="drawbacks">Drawbacks</h2>
<ul>
<li>based on specific and exact representation <img src="https://latex.codecogs.com/png.latex?%5CRightarrow"> not end-to-end</li>
<li>blow up of entity attributes, since:
<ul>
<li>binarized attributes using discretization and one-hot encoding</li>
<li>all entities share the same set of attributes</li>
</ul></li>
<li>image parser needs to know the whole attribute space beforehand<br>
Note: also the reward space needs to be defined beforehand.</li>
<li>learning algorithm is only capable of learning deterministic environments</li>
</ul>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A grounded schema in Schema Networks is similar to a rule in OO-MDP terms. Each attribute may have several grounded schemas. When one of those schemas is active (active effect condition in OO-MDP terms), the corresponding attribute is actived (set to <em>True</em>) in the next step.↩︎</p></li>
<li id="fn2"><p><a href="https://arxiv.org/abs/1706.04317">Kansky et al.&nbsp;(2017)</a> refer to the entity attributes in the binary variables <img src="https://latex.codecogs.com/png.latex?v_1,%20%5Cdots,%20v_n"> of a grounded schema as <em>entity-attribute preconditions</em>. This terminology relates attributes to preconditions, since the actual condition (i.e., grounded schema) is only active iff all preconditions are active.↩︎</p></li>
<li id="fn3"><p>In Boolean logic, De Morgan’s law states that <img src="https://latex.codecogs.com/png.latex?%5Ctext%7BAND%7D%20%5CBig(A,%20B%5CBig)%20=%5Ctext%7BNOT%7D%20%5CBig(%20%5Ctext%7BOR%7D%20%5Cbig(%5Ctext%7BNOT%20%7D%20A,%20%5Ctext%7BNOT%20%7D%20B%20%5Cbig)%5CBig)">.↩︎</p></li>
<li id="fn4"><p>Occam’s razor (<em>law of parsimony</em>) states that simplest solution is most likely the right one.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>RL</category>
  <guid>https://borea17.github.io/paper_summaries/schema_networks/index.html</guid>
  <pubDate>Tue, 14 Jul 2020 22:00:00 GMT</pubDate>
  <media:content url="https://borea17.github.io/paper_summaries/schema_networks/img/transition_dynamics.png" medium="image" type="image/png" height="54" width="144"/>
</item>
<item>
  <title>Relational Inductive Biases, Deep Learning, and Graph Networks</title>
  <dc:creator>borea17 </dc:creator>
  <link>https://borea17.github.io/paper_summaries/graph_networks/index.html</link>
  <description><![CDATA[ 




<p>Few years after the IN paper, <a href="https://arxiv.org/abs/1806.01261">Battaglia et al. (2018)</a> showed that the IN can be cast into a special case of a broader framework, termed <em>Graph Networks (GNs)</em>. They hypothesize that despite the recent successes in deep learning with minimal representational biases, key ingredients of human-like intelligence such as <em>combinatorial generalization</em><sup>1</sup> remain out of reach. Arguing that solving this challenge should be a top priority of current research, they recommend<sup>2</sup> the use of integrative approaches that build strong relational inductive biases<sup>3</sup> into deep learning architectures. By presenting and formalizing a general GN framework for entity- and relation-based reasoning, they conclude that this framework could be a stepping stone towards combinatorial generalization.</p>
<section id="model-description" class="level2">
<h2 class="anchored" data-anchor-id="model-description">Model Description</h2>
<p>Similiar to the IN model, the <em>GN block</em> can be understood as a <code>graph-to-graph</code> module using a message passing scheme. In contrast to the IN, the GN block includes global attributes instead of external effects and uses these global attributes to update the edge attributes and node attributes instead of only updating the node attributes. Accordingly, the message passing scheme is slightly more complex.</p>
<p><strong>Definition</strong>: Let <img src="https://latex.codecogs.com/png.latex?G=%5Clangle%20%5Ctextbf%7Bu%7D,%20V,%20E%20%5Crangle"> be an attributed, directed multigraph in which the global attribute (vector) <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bu%7D"> represents system-level properties (e.g., gravitational field), the set of nodes <img src="https://latex.codecogs.com/png.latex?V=%5C%5C%7B%5Ctextbf%7Bv%7D_j%5C%5C%7D%5C_%7Bj=1%20%5Cdots%20N_V%7D"> represents entities<sup>4</sup> and the set of edges <img src="https://latex.codecogs.com/png.latex?E%20=%20%5C%5C%7B%20%5Clangle%20%5Ctextbf%7Be%7D_k,%20r_k,%20s_k%20%5Crangle%20%5C%5C%7D%5C_%7Bk=1%5Cdots%20N_E%7D"> represents the attributed relations, i.e., the triplet <img src="https://latex.codecogs.com/png.latex?%5Clangle%20%5Ctextbf%7Be%7D_k,%20r_k,%20s_k%20%5Crangle"> defines the <img src="https://latex.codecogs.com/png.latex?k%5E%7B%5Ctext%7Bth%7D%7D"> relation from sender <img src="https://latex.codecogs.com/png.latex?o%5C_%7Bs_k%7D"> to receiver <img src="https://latex.codecogs.com/png.latex?o%5C_%7Br_k%7D"> with relation attribute(s) <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Be%7D_k">.</p>
<p>Formally, the (full) GN block is defined as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Cbegin%7Bsplit%7D%0A%20%20%20%20%5Ctext%7BGN%7D(G)%20&amp;=%20%5Ctext%7BGN%7D%20(%5Clangle%20%5Ctextbf%7Bu%7D,%20V,%20E%20%5Crangle)%20=%20G%5E%5Cprime%5C%5C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20&amp;=%20%5Cleft%5Clangle%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cunderbrace%7B%5Cphi%5E%7Bu%7D%20%5CBig(%5Ctextbf%7Bu%7D,%20%5Crho%5E%7Bv%5Crightarrow%20u%7D%20%5Cbig(V%5E%5Cprime%5Cbig),%20%5Crho%5E%7Be%5Crightarrow%20u%7D%5Cbig(E%5E%7B%5Cprime%7D%20%5Cbig)%20%5CBig)%7D_%7B%5Ctextbf%7Bu%7D%5E%5Cprime%7D,%0A%20%20%20%5Cunderbrace%7B%5Cphi%5E%7Bv%7D%20%5CBig(%5Ctextbf%7Bu%7D,%20V,%20%5Crho%5E%7Be%5Crightarrow%20v%7D%5Cbig(E%5E%5Cprime%20%5Cbig)%5CBig)%7D_%7BV%5E%5Cprime%7D,%0A%20%20%20%5Cunderbrace%7B%5Cphi%5E%7Be%7D%20%5CBig(%5Ctextbf%7Bu%7D,%20V,%20E%5CBig)%7D_%7BE%5E%5Cprime%7D%20%5Cright%5Crangle,%0A%20%20%20%5Cend%7Bsplit%7D%0A%5Cend%7Balign%7D%0A"></p>
<p>where the updates within the graph triple <img src="https://latex.codecogs.com/png.latex?G=%5Clangle%20%5Ctextbf%7Bu%7D,%20V,%20E%20%5Crangle"> occur from right to left. More specifically, <img src="https://latex.codecogs.com/png.latex?%5Cphi%5Ee"> updates the edge attributes of all edges to compute the updated edge set <img src="https://latex.codecogs.com/png.latex?E%5E%5Cprime"> as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20E%5E%5Cprime%20%20=%20%5Cphi%5E%7Be%7D%20(%5Ctextbf%7Bu%7D,%20%5Ctextbf%7BV%7D,%20E)%0A%20%20=%20%5Cleft%5C%7B%20f%5Ee%20%5Cbig(%5Ctextbf%7Be%7D_1,%20%5Ctextbf%7Bv%7D_%7Br_1%7D,%20%5Ctextbf%7Bv%7D_%7Bs_1%7D,%20%5Ctextbf%7Bu%7D%5Cbig),%20%5Cdots,%0A%20%20%20%20f%5E%7Be%7D%20%5Cbig(%5Ctextbf%7Be%7D_%7BN_E%7D,%20%5Ctextbf%7Bv%7D_%7Br_%7BN_E%7D%7D,%20%5Ctextbf%7Bv%7D_%7Bs_%7BN_E%7D%7D,%20%5Ctextbf%7Bu%7D%5Cbig)%5Cright%5C%7D.%0A%5Cend%7Balign%7D%0A"></p>
<p>The updated edge set <img src="https://latex.codecogs.com/png.latex?E%5E%5Cprime"> is used to compute the aggregated updated edge attributes per node <img src="https://latex.codecogs.com/png.latex?%5Coverline%7B%5Ctextbf%7Be%7D%7D_i"> using the aggregation function <img src="https://latex.codecogs.com/png.latex?%5Crho%5E%7Be%5Crightarrow%20v%7D">, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Cforall%20i%20%5Cin%20%5C%7B1,%20%5Cdots,%20N_V%5C%7D:%20%5Coverline%7B%5Ctextbf%7Be%7D%7D_i%20=%20%5Crho%5E%7Be%5Crightarrow%20v%7D%20(E%5E%5Cprime)%0A%20%20=%20%5Crho%5E%7Be%5Crightarrow%20v%7D%20%5CBig(%20%5Cleft%5C%7B%20%20%5Cbig(%5Ctextbf%7Be%7D_k%5E%5Cprime,%20r_k,%20s_k%5Cbig)%20%20%5Cright%5C%7D_%7Br_k=i,%20k=1:N_E%7D%5CBig).%0A%5Cend%7Balign%7D%0A"></p>
<p>The results are used to compute the updated node set <img src="https://latex.codecogs.com/png.latex?V%5E%5Cprime"> using <img src="https://latex.codecogs.com/png.latex?%5Cphi%5Ev"> as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20V%5E%5Cprime%20=%20%5Cphi%5Ev%20%5CBig(%5Ctextbf%7Bu%7D,%20V,%20%5Crho%5E%7Be%5Crightarrow%20v%7D%20%5Cbig(%20E%5E%5Cprime%20%5Cbig)%20%5CBig)%0A%20%20=%20%5C%7B%20f%5Ev%20%5Cbig(%5Coverline%7B%5Ctextbf%7Be%7D%7D_1,%20%5Ctextbf%7Bv%7D_1,%20%5Ctextbf%7Bu%7D%5Cbig),%20%5Cdots,%0A%20%20f%5Ev%5Cbig(%5Coverline%7B%5Ctextbf%7Be%7D%7D_%7BN_V%7D,%20%5Ctextbf%7Bv%7D_%7BN_V%7D,%20%5Ctextbf%7Bu%7D%5Cbig)%5C%7D.%0A%5Cend%7Balign%7D%0A"></p>
<p>Lastly, the global attribute is updated towards <img src="https://latex.codecogs.com/png.latex?%5Ctextbf%7Bu%7D%5E%5Cprime"> by aggregating the edge and node attributes globally, and then applying <img src="https://latex.codecogs.com/png.latex?%5Cphi%5Eu">. The figure below summarizes the internal structure within a (full) GN block and shows how different variants such as the relation network (<a href="https://arxiv.org/abs/1702.05068">Raposo et al., 2017</a>) can be identified within the GN framework.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/graph_networks/img/graph_networks_vs_RN.png" title="GN block vs Relation Network" class="img-fluid" alt="GN block vs Relation Network"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">(a) The internal GN block structure in its broadest formulation is shown including three update and three aggregation functions. (b) The relation network by <a href="https://arxiv.org/abs/1702.05068">Raposo et al.&nbsp;(2017)</a> can be identified as a special case of the broader GN framework which only uses the edge predictions to predict global attributes. Taken from <a href="https://arxiv.org/abs/1806.01261">Battaglia et al.&nbsp;(2018)</a></td>
</tr>
</tbody>
</table>
<p>The GN block can be understood as a building block to compose complex multi-block architectures, e.g., by stacking GN blocks similar to stacking layers in MLPs or reusing a GN block in a recurrent fashion. Additionally, the features inside the GN such as node attributes can be input to a standard MLP to infer abstract properties such as the potential energy (which was done in the IN paper (<a href="https://arxiv.org/abs/1612.00222">Battaglia et al., 2016</a>)).</p>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://arxiv.org/abs/1806.01261">Battaglia et al.&nbsp;(2018)</a> define the <em>principle of combinatorial generalization</em> as the ability of <code>constructing new inferences, predictions, and behaviors from known building blocks</code>.↩︎</p></li>
<li id="fn2"><p>The paper was written by a large group of 27 researchers from DeepMind, GoogleBrain, MIT and University of Edinburgh. As directly stated in the abstract, it <code>is part position paper, part review, and part unification</code>.↩︎</p></li>
<li id="fn3"><p><a href="https://arxiv.org/abs/1806.01261">Battaglia et al.&nbsp;(2018)</a> use the term <em>relational inductive bias</em> to <code>refer generally to inductive biases which impose constraints on relationships and interactions among entities in a learning process</code>. They motivate the use of relational inductive biases by human cognition which also uses (yet-to-understand) mechanisms for representing structure (e.g., world is understood as composition of objects) and relations (e.g., distance between objects).↩︎</p></li>
<li id="fn4"><p><a href="https://arxiv.org/abs/1806.01261">Battaglia et al.&nbsp;(2018)</a> define an <em>entity</em> as <code>an element with attributes</code>. Thus, the term entity is more general than <em>object</em> capturing objects, parts of objects or any other attributed structure.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>interaction network</category>
  <category>graph networks</category>
  <category>generalization</category>
  <guid>https://borea17.github.io/paper_summaries/graph_networks/index.html</guid>
  <pubDate>Thu, 09 Jul 2020 22:00:00 GMT</pubDate>
</item>
<item>
  <title>Interaction Networks for Learning about Objects, Relations and Physics</title>
  <dc:creator>borea17 </dc:creator>
  <link>https://borea17.github.io/paper_summaries/interaction_network/index.html</link>
  <description><![CDATA[ 




<p><a href="https://arxiv.org/abs/1612.00222">Battaglia et al.&nbsp;(2016)</a> introduce the <em>Interaction Network (IN)</em> as the first general-purpose learnable physics engine capable of zero-shot generalization in terms of varying configurations of objects and relations. The IN leverages object- and relation-based reasoning by defining a message passing scheme on a graph-structured representation of objects as nodes and relations as edges. As a proof of concept, they show that their model successfully learned to predict physical trajectories in gravitational systems, bouncing ball domains and mass string systems, and that it could also learn to estimate abstract properties such as the potential energy. Although its formulation is based on dynamical physical systems, it might also be applicable to other domains that can be abstracted into a graph-structured representation of objects and relations such as model-based reinforcment learning.</p>
<section id="model-description" class="level2">
<h2 class="anchored" data-anchor-id="model-description">Model Description</h2>
<p>In essence, the IN model can be understood as a graph-based simulator (i.e., state is represented as a graph) that predicts a future state (i.e., altered graph) using a message-passing scheme. <a href="https://arxiv.org/abs/1612.00222">Battaglia et al. (2016)</a> used a handcrafted scene encoder/decoder to convert the physical scene into the corresponding graph structure and vice versa.</p>
<p><strong>Definition</strong>: Let <img src="https://latex.codecogs.com/png.latex?G=%5Clangle%20O,%20R%20%5Crangle"> be an attributed, directed multigraph in which the set of nodes <img src="https://latex.codecogs.com/png.latex?O=%5C%5C%7Bo_j%5C%5C%7D_%7Bj=1%20%5Cdots%20N_O%7D"> represents objects and the set of edges <img src="https://latex.codecogs.com/png.latex?R%20=%20%5C%5C%7B%20%5Clangle%20i,%20j%20,%20r_k%20%5Crangle_k%20%5C%5C%7D%5C_%7B1%20%5Cdots%20N_R%7D"> represents the relations between the objects, i.e., the triplet <img src="https://latex.codecogs.com/png.latex?%5Clangle%20i,j,%20r_k%20%5Crangle_k"> defines the <img src="https://latex.codecogs.com/png.latex?k%5E%7B%5Ctext%7Bth%7D%7D"> relation from sender <img src="https://latex.codecogs.com/png.latex?o_i"> to receiver <img src="https://latex.codecogs.com/png.latex?o_j"> with relation attribute <img src="https://latex.codecogs.com/png.latex?r_k">. Each object <img src="https://latex.codecogs.com/png.latex?o_i"> may have several attributes<sup>1</sup>, an object state <img src="https://latex.codecogs.com/png.latex?o_i%5E%7B(t)%7D"> at time <img src="https://latex.codecogs.com/png.latex?t"> can be understood as a value assignment to all of its attributes. Additionally, let <img src="https://latex.codecogs.com/png.latex?X=%5C%5C%7B%20x_j%20%5C%5C%7D%5C_%7B1%20%5Cdots%20N_O%7D"> denote external effects (e.g., active control or gravitation) which are applied to each object separately.</p>
<p><strong><em>Intuition</em></strong>: The ultimate goal of the IN is to predict all future object states <img src="https://latex.codecogs.com/png.latex?o_i%5E%7B(t+1)%7D"> based on the graph <img src="https://latex.codecogs.com/png.latex?G">, the current external effects per object <img src="https://latex.codecogs.com/png.latex?x_i%5E%7B(t)%7D"> and all current object states <img src="https://latex.codecogs.com/png.latex?o_i%5E%7B(t)%7D">. A message passing scheme is defined to achieve this goal in which first effects resulting from interactions are computed (<em>relational reasoning</em>), then these effects (messages) together with the external effects are aggregated towards the objects, lastly the aggregated information is used to update the object states (<em>object reasoning</em>).</p>
<p>Formally, the basic IN is defined as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A&amp;%5Ctext%7BIN%7D(G)%20=%20%5Cphi_O%20%5CBigg(%20a%5CBig(%20G,%20X,%20%5Cphi_R%20%5Cbig(%20m%20(G)%5Cbig)%20%5CBig)%5CBigg)%0A%5Cend%7Balign%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Cbegin%7Baligned%7D%0A%20%20%20%20&amp;%20m(G)%20=%20B%20=%20%5C%7B%20b_k%5C%7D_%7Bk=1%5Cdots%20N_R%7D%20%5C%5C%0A%20%20%20%20&amp;%20f_%7BR%7D%20(b_k)%20=%20e_k%20%5C%5C%0A%20%20%20%20&amp;%20%5Cphi_%7BR%7D%20(B)%20=%20E%20=%20%5C%7Be_k%5C%7D_%7Bk=1%20%5Cdots%20N_R%7D%0A%20%20%5Cend%7Baligned%7D%0A%20%20%20%20&amp;&amp;%0A%20%20%20%20%20%20%20%5Cbegin%7Baligned%7D%0A%20%20%20%20%20%20%20%20%20&amp;%20a(G,%20X,%20E)%20=%20C%20=%20%5C%7Bc_j%5C%7D_%7Bj=1%5Cdots%20N_O%7D%20%5C%5C%0A%20%20%20%20%20%20%20%20%20&amp;%20f_O%20(c_j)%20=%20p_j%20%5C%5C%0A%20%20%20%20%20%20%20%20%20&amp;%20%5Cphi_O%20(C)%20=%20P%20=%20%5C%7Bp_j%5C%7D_%7Bj=1%5Cdots%20N_o%7D%0A%20%20%20%20%20%20%20%5Cend%7Baligned%7D%0A%5Cend%7Balign%7D%0A"></p>
<p>In this definition <img src="https://latex.codecogs.com/png.latex?m"> denotes the marshalling function which rearranges objects and relations into interaction terms <img src="https://latex.codecogs.com/png.latex?b_k=%20%5Clangle%20o_i,%20o_j,%20r_k%20%5Crangle%20%5Cin%20B"> on which the relational function <img src="https://latex.codecogs.com/png.latex?%5Cphi_R"> can operate (element-wise by applying <img src="https://latex.codecogs.com/png.latex?f_R"> on each interaction term) to predict the effects of each interaction <img src="https://latex.codecogs.com/png.latex?e_k%5Cin%20E">. The aggregation function <img src="https://latex.codecogs.com/png.latex?a"> builds a a set of of object model inputs <img src="https://latex.codecogs.com/png.latex?c_j%20%5Cin%20C"> (one per object) by collecting and merging all incoming effects per object and combining the result with the object state <img src="https://latex.codecogs.com/png.latex?o_%7Bj%7D%5E%7B(t)%7D"> and the external effects for that object <img src="https://latex.codecogs.com/png.latex?x_j%5E%7B(t)%7D">. Lastly, the object model <img src="https://latex.codecogs.com/png.latex?%5Cphi_O"> predicts for all objects their result <img src="https://latex.codecogs.com/png.latex?p_j%5Cin%20P">, i.e., future object states <img src="https://latex.codecogs.com/png.latex?o_%7Bj%7D%5E%7B(t+1)%7D">, by applying <img src="https://latex.codecogs.com/png.latex?f_O"> to each <img src="https://latex.codecogs.com/png.latex?c_j">. The figure below represents the described procedure of an (exemplary) IN.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/interaction_network/img/IN.png" title="Schematic of the IN's update procedure" class="img-fluid" alt="Schematic of the IN’s update procedure for an exemplary IN"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>Schematic of the IN’s update procedure for an exemplary IN</strong><sup>2</sup>:<br>Firstly, the marshalling function <img src="https://latex.codecogs.com/png.latex?m"> rearranges objects <img src="https://latex.codecogs.com/png.latex?o_i"> based on the relations <img src="https://latex.codecogs.com/png.latex?r_j"> into interaction terms <img src="https://latex.codecogs.com/png.latex?b_k%20=%20%5Clangle%20o_i,%20o_j,%20r_k%20%5Crangle">. Secondly, the function <img src="https://latex.codecogs.com/png.latex?f_R"> is applied on each interaction term to compute the corresponding (directed) effects.<br>Thirdly, the aggregation function <img src="https://latex.codecogs.com/png.latex?a"> uses the graph structure to collect and merge the incoming effects, and to add the corresponding object state and external effects into a new object term <img src="https://latex.codecogs.com/png.latex?c_k%20=%20%5Clangle%20o_k,%20x_k,%20%5Chat%7Be%7D_k%20%5Crangle"> (<img src="https://latex.codecogs.com/png.latex?%5Chat%7Be%7D_k"> denotes aggregated effect). Lastly, this representation is used to predict the results <img src="https://latex.codecogs.com/png.latex?p_k">, i.e., future object states, by applying <img src="https://latex.codecogs.com/png.latex?f_O"> to each <img src="https://latex.codecogs.com/png.latex?c_k">.</td>
</tr>
</tbody>
</table>
<p><strong><em>Intuition</em></strong>: Computing the trajectories of planets in a solar system may be a good example to motivate and understand the IN definition. Objects in the graph shall be the planets and relations the pairwise gravitational forces on each other, i.e., each object has an arrow pointing to all other objects. Object attributes could be the mass, acceleration, velocity and position. As external effects we could define the step size (necessary for approximate integration). Relational attributes are not needed then. The physics approach to compute the approximated trajacetories would be to first compute all gravitational forces per object which corresponds to computing the effects in the IN. Then, the net force would be computed as the sum of all forces per object, i.e., aggregation in the IN. Lastly, the object attributes would be updated (except mass) using the calculated net force, current object state and step size which corresponds to the object-centric update in the IN.</p>
</section>
<section id="learning-the-model" class="level2">
<h2 class="anchored" data-anchor-id="learning-the-model">Learning the Model</h2>
<p>In the IN defintion, there are no limitations whatsoever for the functions and how they operate over their inputs (e.g., objects itself could also be graphs). Thus, learning the underlying dynamics given the graph structured representation and the scene encoder/decoder (and assuming that there is some IN that can simulate the dynamics) without further assumptions remains an intractable quest. To overcome this problem, <a href="https://arxiv.org/abs/1612.00222">Battaglia et al. (2016)</a> present a learnable implementation of the IN which uses deep neural networks as function approximators and a specific object and relation representation using matrices. Then, learning the model comes down to training from data using the standard deep learning framework.</p>
<p><strong>Implementation</strong>: Let each object <img src="https://latex.codecogs.com/png.latex?o_i%5E%7B(t)%7D%5Cin%20%5Cmathbb%7BR%7D%5E%7BD_s%7D"> be represented by a <img src="https://latex.codecogs.com/png.latex?D_s">-dimensional vector where each entry corresponds to an attribute, i.e., attributes have a predefined order which is fix over all objects. Then, <img src="https://latex.codecogs.com/png.latex?O"> is defined as a <img src="https://latex.codecogs.com/png.latex?D_S%20%5Ctimes%20N_O"> matrix where each column represents an object. Similarly, <img src="https://latex.codecogs.com/png.latex?X"> is defined as a <img src="https://latex.codecogs.com/png.latex?D_X%20%5Ctimes%20N_O"> matrix where each <img src="https://latex.codecogs.com/png.latex?D_x">-dimensional column represents the external effects that correspond to the object defined in the same column of <img src="https://latex.codecogs.com/png.latex?O">. Let each relation be formalized into a triple of three vectors <img src="https://latex.codecogs.com/png.latex?r_k%20=%20%5Clangle%20r_r,%20r_s,%20r_a%20%5Crangle"> where <img src="https://latex.codecogs.com/png.latex?r_a%20%5Cin%20%5Cmathbb%7BR%7D%5E%7BD_R%7D"> represents the (ordered) relational attributes and <img src="https://latex.codecogs.com/png.latex?r_r,%20r_s%20%5Cin%20%5C%7B0,%201%5C%7D%5E%7BN_O%7D"> are one-hot encodings of the receiver and sender object, respectively. Then, all relations can be represented by the triplet <img src="https://latex.codecogs.com/png.latex?R%20=%20%5Clangle%20R_r,%20R_s,%20R_a%20%5Crangle"> where the matrices <img src="https://latex.codecogs.com/png.latex?R_r,%20R_s%20%5Cin%20%5C%7B0,1%5C%7D%5E%7BN_O%20%5Ctimes%20N_R%7D"> and <img src="https://latex.codecogs.com/png.latex?R_a%20%5Cin%20%5Cmathbb%7BR%7D%5E%7BD_R%20%5Ctimes%20N_R%7D"> are generated by stacking the relations column-wise.</p>
<p>It follows that the interaction terms <img src="https://latex.codecogs.com/png.latex?b_k"> can be vectorized by concatenation of the receiver and sender object attributes and the relational attributes into a <img src="https://latex.codecogs.com/png.latex?(2%20D_s%20+%20D_R)">-length vector. The marshalling function <img src="https://latex.codecogs.com/png.latex?m"> can be stated as follows</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20m(G)%0A%20%20=%20%5Cbegin%7Bbmatrix%7D%20%20O%20R_r%20%5C%5C%20O%20R_s%20%5C%5C%20R_a%20%20%5Cend%7Bbmatrix%7D%20=%20%5Cbegin%7Bbmatrix%7D%20b_1%20%20&amp;%0A%20%20%20%20%5Cdots%20&amp;%20b_%7BN_R%7D%20%5Cend%7Bbmatrix%7D%20=%20B.%0A%5Cend%7Balign%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?B"> is the input to the relational model <img src="https://latex.codecogs.com/png.latex?%5Cphi_R"> which is defined through the application of <img src="https://latex.codecogs.com/png.latex?f_R"> on each column of <img src="https://latex.codecogs.com/png.latex?B"> (each interaction term), i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%5Cphi_R%20(B)%20=%20%5Cbegin%7Bbmatrix%7D%20f_R%20%5Cbig(b_1%5Cbig)%20&amp;%20%5Cdots%20&amp;%20f_R%20%5Cbig(b_%7BN_R%7D%5Cbig)%20%5Cend%7Bbmatrix%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20=%20%5Cbegin%7Bbmatrix%7D%20e_1%20&amp;%20%5Cdots%20e_%7BN_R%7D%5Cend%7Bbmatrix%7D%20%20=%20E.%0A%5Cend%7Balign%7D%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?f_R"> shall be approximated by a neural network to estimate a <img src="https://latex.codecogs.com/png.latex?D_E">-length vector <img src="https://latex.codecogs.com/png.latex?e_k"> that encodes the resulting effect. Similar to the marshalling function, the aggregation function <img src="https://latex.codecogs.com/png.latex?a"> constructs vectorized object terms <img src="https://latex.codecogs.com/png.latex?c_k%20=%20%5Cbegin%7Bbmatrix%7D%20o_k%5E%7B(t)%7D%20&amp;%20x_k%5E%7B(t)%7D%20&amp;%20%5Chat%7Be%7D_k%5E%7B(t)%7D%20%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D"> by concatenation of the object attributes, the external effects and the aggregated effect (summation of all incoming effects per object):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20a(O,%20R,%20X,%20E)%20=%20%5Cbegin%7Bbmatrix%7D%20O%20&amp;%20X%20&amp;%20E%20R_r%5E%7B%5Ctext%7BT%7D%7D%0A%20%20%5Cend%7Bbmatrix%7D%5E%7B%5Ctext%7BT%7D%7D%20=%0A%20%20%5Cbegin%7Bbmatrix%7D%20c_1%20&amp;%20%5Cdots%20&amp;%20c_%7BN_O%7D%20%5Cend%7Bbmatrix%7D%20=%20C.%0A%5Cend%7Balign%7D%0A"></p>
<p>Lastly, <img src="https://latex.codecogs.com/png.latex?C"> is used as the input to the object model <img src="https://latex.codecogs.com/png.latex?%5Cphi_O"> which is defined through the application of <img src="https://latex.codecogs.com/png.latex?f_O"> on each column of <img src="https://latex.codecogs.com/png.latex?C">, i.e.,</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%5Cphi_O%20(C)%20=%0A%20%20%5Cbegin%7Bbmatrix%7D%20f_O%20%5Cbig(%20c_1%20%5Cbig)%20&amp;%20%5Cdots%20&amp;%20f_O%20%5Cbig(%20c_%7BN_O%7D%20%5Cbig)%20%5Cend%7Bbmatrix%7D=%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cbegin%7Bbmatrix%7D%20o_1%5E%7B(t+1)%7D%20&amp;%20%5Cdots%20&amp;%20o_%7BN_O%7D%5E%7B(t+1)%7D%20%5Cend%7Bbmatrix%7D.%0A"></p>
<p>The result can be used to update the graph structured representation. The figure below summarizes the implementation of the IN.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;"><img src="https://borea17.github.io/paper_summaries/interaction_network/img/implementation.png" title="One step roll out of the IN implementation" class="img-fluid" alt="One step roll out of the IN implementation"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><strong>One step roll out of the IN implementation</strong>.<br> The physical scene is encoded (decoded) into (from) a graph structured representation using a handcrafted scene encoder (decoder). <a href="https://arxiv.org/abs/1612.00222">Battaglia et al.&nbsp;(2016)</a> present a learnable implementation by using neural networks (blue boxes) as function approximators for the relational model (<img src="https://latex.codecogs.com/png.latex?%5Cphi_R">) and the object model (<img src="https://latex.codecogs.com/png.latex?%5Cphi_O">).</td>
</tr>
</tbody>
</table>
</section>
<section id="drawbacks-of-paper" class="level2">
<h2 class="anchored" data-anchor-id="drawbacks-of-paper">Drawbacks of Paper</h2>
<ul>
<li>handcrafted scene encoder/decoder <img src="https://latex.codecogs.com/png.latex?%5CRightarrow"> not end-to-end</li>
<li>object states could blow up since all objects share the same attributes</li>
</ul>
<hr>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In their implementation, <a href="https://arxiv.org/abs/1612.00222">Battaglia et al. (2016)</a> assume that all objects share the same attributes, i.e., are instances from the same class. <a name="myfootnote2">2</a>: Schematic is taken from the original paper of <a href="https://arxiv.org/abs/1612.00222">Battaglia et al. (2016)</a>.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>graph networks</category>
  <guid>https://borea17.github.io/paper_summaries/interaction_network/index.html</guid>
  <pubDate>Thu, 25 Jun 2020 22:00:00 GMT</pubDate>
  <media:content url="https://borea17.github.io/paper_summaries/interaction_network/img/implementation.png" medium="image" type="image/png" height="83" width="144"/>
</item>
</channel>
</rss>
